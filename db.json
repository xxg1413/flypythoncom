{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/CNAME","path":"CNAME","modified":1,"renderable":0},{"_id":"source/images/new-01.png","path":"images/new-01.png","modified":1,"renderable":0},{"_id":"source/images/new-02.png","path":"images/new-02.png","modified":1,"renderable":0},{"_id":"source/images/oa2.jpg","path":"images/oa2.jpg","modified":1,"renderable":0},{"_id":"source/images/oa3.jpg","path":"images/oa3.jpg","modified":1,"renderable":0},{"_id":"source/images/oa4.jpg","path":"images/oa4.jpg","modified":1,"renderable":0},{"_id":"source/images/tutorial3.png","path":"images/tutorial3.png","modified":1,"renderable":0},{"_id":"source/images/wechat.png","path":"images/wechat.png","modified":1,"renderable":0},{"_id":"source/images/flypython.png","path":"images/flypython.png","modified":1,"renderable":0},{"_id":"source/images/oa1.jpg","path":"images/oa1.jpg","modified":1,"renderable":0},{"_id":"source/images/tutorial1.png","path":"images/tutorial1.png","modified":1,"renderable":0},{"_id":"source/images/tutorial2.png","path":"images/tutorial2.png","modified":1,"renderable":0},{"_id":"themes/f25/source/css/f25.css","path":"css/f25.css","modified":1,"renderable":1},{"_id":"themes/f25/source/css/gitalk.css","path":"css/gitalk.css","modified":1,"renderable":1},{"_id":"themes/f25/source/css/highlight.css","path":"css/highlight.css","modified":1,"renderable":1},{"_id":"themes/f25/source/js/f25.js","path":"js/f25.js","modified":1,"renderable":1},{"_id":"themes/f25/source/images/default_cover.jpg","path":"images/default_cover.jpg","modified":1,"renderable":1},{"_id":"themes/f25/source/images/bg_post.png","path":"images/bg_post.png","modified":1,"renderable":1},{"_id":"themes/f25/source/js/gitalk.min.js","path":"js/gitalk.min.js","modified":1,"renderable":1},{"_id":"themes/f25/source/images/bg.png","path":"images/bg.png","modified":1,"renderable":1},{"_id":"themes/f25/source/images/bg_sm.png","path":"images/bg_sm.png","modified":1,"renderable":1},{"_id":"source/images/nlp1.png","path":"images/nlp1.png","modified":1,"renderable":0}],"Cache":[{"_id":"source/CNAME","hash":"0b7452dfb927e002dbc503864ab25775a4662a1e","modified":1567497351557},{"_id":"themes/f25/_config.yml","hash":"79d511608ae11b7dd799d975e7542339935f1e94","modified":1577940637133},{"_id":"themes/f25/readme.md","hash":"b2e8de464a7f0a30b4982b34043d7e79a908b1ce","modified":1577810293242},{"_id":"source/_posts/about.md","hash":"33c325dbac2719dc6d293739498a978285cf7c2f","modified":1577946806150},{"_id":"source/_posts/python-new-01.md","hash":"883e931a5ae24239dc47c99f49732bbb2835e0a2","modified":1577946084256},{"_id":"source/_posts/python-new-02.md","hash":"6d2d9b44693286e26fc0169fb02b58f1ffdac594","modified":1577946117838},{"_id":"source/_posts/python-nlp-01.md","hash":"7abc1ae3a1f3890f0e178afcf1e3648225ea5052","modified":1577938712427},{"_id":"source/_posts/python-oa-01.md","hash":"4d50ac1e668f0ddf531ec1e9b425782bd71bee3f","modified":1577936208389},{"_id":"source/_posts/python-oa-02.md","hash":"cd4b0d58c96bfcddee6c0c2674db7424bc5d411e","modified":1577936798931},{"_id":"source/_posts/python-oa-04.md","hash":"24bbd0d1d9d30d6098c0a48e89498e3f4515ddc7","modified":1577936968301},{"_id":"source/_posts/python-oa-05.md","hash":"e4a29baee300bdc6d73cd392be2914cbadb8f579","modified":1577937320976},{"_id":"source/_posts/python-oa-03.md","hash":"7684a969454dab6f710b7aac184f8201c890c20a","modified":1577936918668},{"_id":"source/_posts/python-tutorial-01.md","hash":"f4465c0cd835945d062f3d3aba656f84602ab32f","modified":1577939478548},{"_id":"source/_posts/python-tutorial-02.md","hash":"9db12bc0d5e7273609930973ae512911bdad5094","modified":1577939484964},{"_id":"source/_posts/python-tutorial-03.md","hash":"dab91851534dfa044dffa5f15e2abae942b5284e","modified":1577939494650},{"_id":"source/images/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1567499619851},{"_id":"source/images/new-01.png","hash":"808e8eaf4e92e53bef9bad5e0d528be496397e21","modified":1577939233043},{"_id":"source/images/new-02.png","hash":"cd2a2581b1c7dc849998e0b6d9579cfeada454a7","modified":1577939349224},{"_id":"source/images/oa2.jpg","hash":"4b7f8b1a3d818eda4afc671b95f937605f078440","modified":1577936762918},{"_id":"source/images/oa3.jpg","hash":"313bb2d45be8b86a71edc9e21a3fbcd9f3ae9e30","modified":1577937264142},{"_id":"source/images/oa4.jpg","hash":"ffb114810c1f131587626c13e50b13ca0806a609","modified":1577937285682},{"_id":"source/images/tutorial3.png","hash":"f7c2b72c6beb30cb5c3ac363c4c90303a43844de","modified":1577939035351},{"_id":"source/images/wechat.png","hash":"fa452476b4889a264c2010c3d4d523a8e44f3df4","modified":1567499249498},{"_id":"themes/f25/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1577810293233},{"_id":"themes/f25/.git/config","hash":"a462ab7e0be48cb1f227dc7c207b86d321119e16","modified":1577810293235},{"_id":"themes/f25/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1577810249688},{"_id":"themes/f25/.git/index","hash":"f0ae285a86e4a7632a09777126069af5b312c466","modified":1577810293252},{"_id":"themes/f25/.git/packed-refs","hash":"00dc01fdc9dc5a55de1e982f785b5ac98743ce38","modified":1577810293232},{"_id":"themes/f25/layout/about.ejs","hash":"5780daf6db0b013dbf82807c9f85abba683b0820","modified":1577810293241},{"_id":"themes/f25/layout/category.ejs","hash":"129cab8e4ad73b840ee53a2900b4b7213dbf5c97","modified":1577810293241},{"_id":"themes/f25/layout/index.ejs","hash":"1f8997be04e1d741634670b56fb54a21249a8c1c","modified":1577810293242},{"_id":"themes/f25/layout/layout.ejs","hash":"5fdee538d743d51804c5338d763d163ef23c4f7c","modified":1577810293242},{"_id":"themes/f25/layout/page.ejs","hash":"129cab8e4ad73b840ee53a2900b4b7213dbf5c97","modified":1577810293242},{"_id":"themes/f25/layout/post.ejs","hash":"52f88e4273c5e7ba175402219c499fe3f7466620","modified":1577810293242},{"_id":"themes/f25/scripts/helpers.js","hash":"fc824ca830c5b7118e67f71eab48e36b8ef2da9c","modified":1577810293242},{"_id":"source/images/flypython.png","hash":"b3dbdf2f840fc8a4313199945c0030f32d1d2103","modified":1577946723248},{"_id":"source/images/oa1.jpg","hash":"a60cb12a6035b8bc2b114bda56cc19216c0561c6","modified":1577936219365},{"_id":"source/images/tutorial1.png","hash":"7be93a9bdd57dae67af6c82fa7ffab32f5e3ef88","modified":1577937785585},{"_id":"source/images/tutorial2.png","hash":"9f654c89daa080c41e7a3c0f85b645e49d3e937f","modified":1577938516011},{"_id":"themes/f25/.git/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1577810249689},{"_id":"themes/f25/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1577810249689},{"_id":"themes/f25/.git/hooks/fsmonitor-watchman.sample","hash":"f7c0aa40cb0d620ff0bca3efe3521ec79e5d7156","modified":1577810249690},{"_id":"themes/f25/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1577810249690},{"_id":"themes/f25/.git/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1577810249691},{"_id":"themes/f25/.git/hooks/pre-commit.sample","hash":"33729ad4ce51acda35094e581e4088f3167a0af8","modified":1577810249689},{"_id":"themes/f25/.git/hooks/pre-push.sample","hash":"5c8518bfd1d1d3d2c1a7194994c0a16d8a313a41","modified":1577810249691},{"_id":"themes/f25/.git/hooks/pre-rebase.sample","hash":"288efdc0027db4cfd8b7c47c4aeddba09b6ded12","modified":1577810249689},{"_id":"themes/f25/.git/hooks/pre-receive.sample","hash":"705a17d259e7896f0082fe2e9f2c0c3b127be5ac","modified":1577810249690},{"_id":"themes/f25/.git/hooks/prepare-commit-msg.sample","hash":"2584806ba147152ae005cb675aa4f01d5d068456","modified":1577810249690},{"_id":"themes/f25/.git/hooks/update.sample","hash":"e729cd61b27c128951d139de8e7c63d1a3758dde","modified":1577810249691},{"_id":"themes/f25/.git/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1577810249688},{"_id":"themes/f25/.git/logs/HEAD","hash":"dd5275d8cfaa289810dd8243858618d2893290e1","modified":1577810293234},{"_id":"themes/f25/layout/_partial/banner.ejs","hash":"843d2fd6dbad26d62dc9ff374c79e6febace3370","modified":1577810293240},{"_id":"themes/f25/layout/_partial/footer.ejs","hash":"e4d2db9379eff7e39e4184fdcf9174a88970f775","modified":1577940950951},{"_id":"themes/f25/layout/_partial/gitalk.ejs","hash":"33db77da6d1ac2fbfff1d6b3c0014aebe79dc7f5","modified":1577810293240},{"_id":"themes/f25/layout/_partial/google-analytics.ejs","hash":"18787006fa1fe747b360389a3e9bb2e16d5f2a0c","modified":1577810293240},{"_id":"themes/f25/layout/_partial/head.ejs","hash":"13f03373cf0e55c4fd67e0e7ab12040b6728c28b","modified":1577810293241},{"_id":"themes/f25/layout/_partial/header.ejs","hash":"0292eb1ef772385f8bd9d4c0c758440831b7dd18","modified":1577934971373},{"_id":"themes/f25/layout/_partial/menu.ejs","hash":"8c63b692a31be4343fd66900b48020f205e8b06d","modified":1577810293241},{"_id":"themes/f25/layout/_partial/post-i.ejs","hash":"c1e98dde559b1f03a65f09ddf0e774cb3b9e5ea3","modified":1577810293241},{"_id":"themes/f25/layout/_partial/post-tpl.ejs","hash":"4573a840c6c0fa3003b61014dce2d3be404a12e1","modified":1577810293241},{"_id":"themes/f25/source/css/f25.css","hash":"1df44a46b2fc876885a1b91a5caf0433bcccab6c","modified":1577810293243},{"_id":"themes/f25/source/css/gitalk.css","hash":"95266930c30eb66cf618119a10d8c9fb1017a6da","modified":1577810293243},{"_id":"themes/f25/source/css/highlight.css","hash":"8ed179050ac30ef8197875deda89a20328ff18ac","modified":1577810293243},{"_id":"themes/f25/source/js/f25.js","hash":"71886bfff44f857fbe3748753079b78f3f781de8","modified":1577810293248},{"_id":"themes/f25/source/images/default_cover.jpg","hash":"18ad3a649b591853620fea5d8101b7dd9e647fbc","modified":1577810293248},{"_id":"themes/f25/theme.png","hash":"2c0bcdd8fee895ee734a1ac8dfede835187dc091","modified":1577810293251},{"_id":"themes/f25/.git/objects/pack/pack-c5f902797e9e0f27404fabafdb9661768bef05a3.idx","hash":"a01fc2e798e408216d49eee17568e46e6be20be2","modified":1577810293225},{"_id":"themes/f25/.git/refs/heads/master","hash":"300e6aabf9579f8edc5036fad58dc589bb8acc25","modified":1577810293234},{"_id":"themes/f25/source/images/bg_post.png","hash":"a6bdfcd667d07c472e1e675fec7be7ec6a908cae","modified":1577810293247},{"_id":"themes/f25/source/js/gitalk.min.js","hash":"b277e711cbe0942783b4294030f45c56dd741d86","modified":1577810293249},{"_id":"themes/f25/source/images/bg.png","hash":"51106adfbeae3a021656b2126ee9b73d95c6a795","modified":1577810293245},{"_id":"themes/f25/source/images/bg_sm.png","hash":"870f8203acdcef8ededf04f18228e1fba1bcd6fd","modified":1577810293247},{"_id":"source/images/nlp1.png","hash":"56b8fdfa3ffebb7e031d090f8e358576bc7ec3d3","modified":1577938672601},{"_id":"themes/f25/.git/logs/refs/heads/master","hash":"dd5275d8cfaa289810dd8243858618d2893290e1","modified":1577810293234},{"_id":"themes/f25/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1577810293233},{"_id":"themes/f25/.git/logs/refs/remotes/origin/HEAD","hash":"dd5275d8cfaa289810dd8243858618d2893290e1","modified":1577810293233},{"_id":"themes/f25/.git/objects/pack/pack-c5f902797e9e0f27404fabafdb9661768bef05a3.pack","hash":"a91b132f8c1c71385827c38ba8905597c6e2953c","modified":1577810293225},{"_id":"public/article/python-new-02/index.html","hash":"3028a01b4d22e9c0a707cbb87a219eaa6f8799a5","modified":1577948036937},{"_id":"public/article/python-new-01/index.html","hash":"c9584da9e536a242721d29b2fd3119660139f0be","modified":1577948036937},{"_id":"public/article/python-nlp-01/index.html","hash":"726e7206d656dcc026c93ecca371fd376652eb4d","modified":1577948036937},{"_id":"public/article/python-tutorial-02/index.html","hash":"24854b9c1a340d464034d9ba6a563551e9e225a5","modified":1577948036938},{"_id":"public/article/python-tutorial-01/index.html","hash":"29c78ba7a22d0d040a5476b299b29f088feb5060","modified":1577948036938},{"_id":"public/article/python-oa-05/index.html","hash":"c6a75beb440b3250880413b7908839824ce7cd66","modified":1577948036938},{"_id":"public/article/python-oa-04/index.html","hash":"bc0022069a5e479b88e59f3927bcc35817ae8315","modified":1577948036938},{"_id":"public/article/python-oa-03/index.html","hash":"f5f13c1f6342e204f6cd6c615b9923e29faee627","modified":1577948036938},{"_id":"public/article/python-oa-01/index.html","hash":"f4a8674540165b507fdeadad9e91d328c37527d9","modified":1577948036938},{"_id":"public/article/about/index.html","hash":"684693404a151f21d6e56881445d9594b5209dab","modified":1577948036938},{"_id":"public/archives/index.html","hash":"48adf25c2e35868614242c77902b312b0072db5f","modified":1577948036938},{"_id":"public/archives/2018/index.html","hash":"07f8e1718511b15f3bc6a67cc6e0c4d433c677f3","modified":1577948036938},{"_id":"public/archives/2018/01/index.html","hash":"07f8e1718511b15f3bc6a67cc6e0c4d433c677f3","modified":1577948036938},{"_id":"public/archives/2019/index.html","hash":"da23ab1c4b395763278294a18c705f376d96d63f","modified":1577948036938},{"_id":"public/archives/2019/01/index.html","hash":"17c8afb93066523f0d5aa05315c618e6d6642585","modified":1577948036938},{"_id":"public/archives/2019/02/index.html","hash":"74b210d540f7f58ba80fed4075230de83a24a406","modified":1577948036938},{"_id":"public/archives/2019/03/index.html","hash":"79c78ba149ea9630d64b6532165dc27f58b522ab","modified":1577948036939},{"_id":"public/archives/2019/04/index.html","hash":"73e7c46acef8ef4bae5c35cdd45d69aaf08cac11","modified":1577948036939},{"_id":"public/fly/Python入门/index.html","hash":"393c7e7e9c758957fe6c614f82dab52f9068cb68","modified":1577948036939},{"_id":"public/fly/Python新特性/index.html","hash":"6f86e3af24bf298b2e7ab2c89370c01e341181a3","modified":1577948036939},{"_id":"public/fly/自然语言处理/index.html","hash":"6f55aa656095743d6f3ad3f5bcf632f146e310ea","modified":1577948036939},{"_id":"public/fly/自动化办公/index.html","hash":"27b219f13eab19dca0f5565bce6e68bb8b9e7f56","modified":1577948036939},{"_id":"public/index.html","hash":"48adf25c2e35868614242c77902b312b0072db5f","modified":1577948036939},{"_id":"public/article/python-tutorial-03/index.html","hash":"cfe0adfe8868bfc1956a6e57b83833b4f449199e","modified":1577948036939},{"_id":"public/article/python-oa-02/index.html","hash":"2df4f980fa4662bee6ecd52c291b583a2ce54237","modified":1577948036939},{"_id":"public/CNAME","hash":"0b7452dfb927e002dbc503864ab25775a4662a1e","modified":1577948036944},{"_id":"public/images/new-01.png","hash":"808e8eaf4e92e53bef9bad5e0d528be496397e21","modified":1577948036944},{"_id":"public/images/new-02.png","hash":"cd2a2581b1c7dc849998e0b6d9579cfeada454a7","modified":1577948036944},{"_id":"public/images/oa3.jpg","hash":"313bb2d45be8b86a71edc9e21a3fbcd9f3ae9e30","modified":1577948036944},{"_id":"public/images/oa2.jpg","hash":"4b7f8b1a3d818eda4afc671b95f937605f078440","modified":1577948036944},{"_id":"public/images/oa4.jpg","hash":"ffb114810c1f131587626c13e50b13ca0806a609","modified":1577948036944},{"_id":"public/images/tutorial3.png","hash":"f7c2b72c6beb30cb5c3ac363c4c90303a43844de","modified":1577948036944},{"_id":"public/images/wechat.png","hash":"fa452476b4889a264c2010c3d4d523a8e44f3df4","modified":1577948036944},{"_id":"public/images/default_cover.jpg","hash":"18ad3a649b591853620fea5d8101b7dd9e647fbc","modified":1577948036944},{"_id":"public/images/flypython.png","hash":"b3dbdf2f840fc8a4313199945c0030f32d1d2103","modified":1577948036948},{"_id":"public/images/oa1.jpg","hash":"a60cb12a6035b8bc2b114bda56cc19216c0561c6","modified":1577948036948},{"_id":"public/images/tutorial1.png","hash":"7be93a9bdd57dae67af6c82fa7ffab32f5e3ef88","modified":1577948036948},{"_id":"public/images/tutorial2.png","hash":"9f654c89daa080c41e7a3c0f85b645e49d3e937f","modified":1577948036948},{"_id":"public/css/highlight.css","hash":"8ed179050ac30ef8197875deda89a20328ff18ac","modified":1577948036951},{"_id":"public/js/f25.js","hash":"71886bfff44f857fbe3748753079b78f3f781de8","modified":1577948036951},{"_id":"public/images/bg_post.png","hash":"a6bdfcd667d07c472e1e675fec7be7ec6a908cae","modified":1577948036951},{"_id":"public/css/f25.css","hash":"1df44a46b2fc876885a1b91a5caf0433bcccab6c","modified":1577948036954},{"_id":"public/images/bg_sm.png","hash":"870f8203acdcef8ededf04f18228e1fba1bcd6fd","modified":1577948036954},{"_id":"public/images/bg.png","hash":"51106adfbeae3a021656b2126ee9b73d95c6a795","modified":1577948036954},{"_id":"public/css/gitalk.css","hash":"95266930c30eb66cf618119a10d8c9fb1017a6da","modified":1577948036958},{"_id":"public/images/nlp1.png","hash":"56b8fdfa3ffebb7e031d090f8e358576bc7ec3d3","modified":1577948036964},{"_id":"public/js/gitalk.min.js","hash":"b277e711cbe0942783b4294030f45c56dd741d86","modified":1577948036968}],"Category":[{"name":"Python入门","_id":"ck4wdip830002wz1b2tpr7ety"},{"name":"Python新特性","_id":"ck4wdip890006wz1b5r4r38am"},{"name":"自然语言处理","_id":"ck4wdip8h000dwz1bsdbs84e4"},{"name":"自动化办公","_id":"ck4wdip8k000iwz1bttiuiyhn"}],"Data":[],"Page":[],"Post":[{"date":"2017-12-31T16:00:00.000Z","title":"关于我们","subtitle":"关于飞蟒Python","cover":"/images/flypython.png","_content":"\n## 关于我们\n\nhttp://flypython.com\n\n#### 关于FlyPython\n\nFlyPython是提供一站式Python编程学习的组织，我们致力于为用户提供高效，有趣的学习环境，打造专注于Python的中文学习社区。\n\n#### 联系我们\n\n客服&合作: 微信号 flypython\n\n\n#### 公众号二维码\n\n![](https://tva1.sinaimg.cn/large/006tNbRwly1gai7aeyheij3076076dgb.jpg)","source":"_posts/about.md","raw":"---\ndate: 2018-01-01 00:00\ntitle:  关于我们\nsubtitle: 关于飞蟒Python\ncover: /images/flypython.png\ncategories: [Python入门]\n---\n\n## 关于我们\n\nhttp://flypython.com\n\n#### 关于FlyPython\n\nFlyPython是提供一站式Python编程学习的组织，我们致力于为用户提供高效，有趣的学习环境，打造专注于Python的中文学习社区。\n\n#### 联系我们\n\n客服&合作: 微信号 flypython\n\n\n#### 公众号二维码\n\n![](https://tva1.sinaimg.cn/large/006tNbRwly1gai7aeyheij3076076dgb.jpg)","slug":"about","published":1,"updated":"2020-01-02T06:33:26.150Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck4wdip7u0000wz1bh68wu3dz","content":"<h2 id=\"关于我们\"><a href=\"#关于我们\" class=\"headerlink\" title=\"关于我们\"></a>关于我们</h2><p><a href=\"http://flypython.com\" target=\"_blank\" rel=\"noopener\">http://flypython.com</a></p>\n<h4 id=\"关于FlyPython\"><a href=\"#关于FlyPython\" class=\"headerlink\" title=\"关于FlyPython\"></a>关于FlyPython</h4><p>FlyPython是提供一站式Python编程学习的组织，我们致力于为用户提供高效，有趣的学习环境，打造专注于Python的中文学习社区。</p>\n<h4 id=\"联系我们\"><a href=\"#联系我们\" class=\"headerlink\" title=\"联系我们\"></a>联系我们</h4><p>客服&amp;合作: 微信号 flypython</p>\n<h4 id=\"公众号二维码\"><a href=\"#公众号二维码\" class=\"headerlink\" title=\"公众号二维码\"></a>公众号二维码</h4><p><img src=\"https://tva1.sinaimg.cn/large/006tNbRwly1gai7aeyheij3076076dgb.jpg\" alt></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"关于我们\"><a href=\"#关于我们\" class=\"headerlink\" title=\"关于我们\"></a>关于我们</h2><p><a href=\"http://flypython.com\" target=\"_blank\" rel=\"noopener\">http://flypython.com</a></p>\n<h4 id=\"关于FlyPython\"><a href=\"#关于FlyPython\" class=\"headerlink\" title=\"关于FlyPython\"></a>关于FlyPython</h4><p>FlyPython是提供一站式Python编程学习的组织，我们致力于为用户提供高效，有趣的学习环境，打造专注于Python的中文学习社区。</p>\n<h4 id=\"联系我们\"><a href=\"#联系我们\" class=\"headerlink\" title=\"联系我们\"></a>联系我们</h4><p>客服&amp;合作: 微信号 flypython</p>\n<h4 id=\"公众号二维码\"><a href=\"#公众号二维码\" class=\"headerlink\" title=\"公众号二维码\"></a>公众号二维码</h4><p><img src=\"https://tva1.sinaimg.cn/large/006tNbRwly1gai7aeyheij3076076dgb.jpg\" alt></p>\n"},{"date":"2019-03-31T16:00:00.000Z","title":"Python 3.8新特性——赋值表达式","subtitle":"介绍Python语言新的特性","cover":"/images/new-01.png","_content":"上周，Python3.8版本发布，到底带来了哪些新的特性呢？我们应该在哪些场景中使用这些特性呢？本周，我们通过几篇文章来告诉你答案。\n\n![](https://tva1.sinaimg.cn/large/006tNbRwly1gai72bypmej30u00u9wl1.jpg)\n\n#### 安装\n\n首先，我们并不推荐安装最新版本到常用的开发环境中，你可以使用虚拟环境或者docker来尝鲜。\n\n官方安装包\n\n网址：`https://www.python.org/downloads/release/python-380/`\n\n也可以使用docker\n\n拉取镜像命令\n`docker pull  python:3.8`\n\n## 赋值表达式\n\n![](https://tva1.sinaimg.cn/large/006tNbRwly1gai72nu5otj30jg0atdfq.jpg)\n\n赋值表达式被叫做海象运算符，因为它的形状像海象。如果熟悉go语言的话，会对这个表达式会熟悉。\n\n\n赋值表达式的语法是 \n```\n name := expression\n```\n\n和赋值语句 `=` 作用差不多，非必不可少，但可以简化代码。\n\n\n#### 官方示例\n\n```\n>>> a = False\n>>> print(a)\nFalse\n>>> print(a := True)\nTrue\n```\n\n此例子赋值之后，后续还需要使用变量。赋值表达可用于简化代码，提高可读性。\n\n```\n>>> inputs = list()\n>>> while True:\n...   current = input(\"your input:\")\n...   if current == \"quit\":\n...       break\n...   inputs.append(current)\n...\nyour input:a\nyour input:b\nyour input:test\nyour input:quit\n>>> inputs\n['a', 'b', 'test']\n```\n\n使用赋值操作符时：\n\n```\n>>> inputs = list()\n>>> while (current := input(\"your input:\")) != \"quit\":\n...   inputs.append(current)\n...\nyour input:a\nyour input:b\nyour input:test\nyour input:quit\n>>> inputs\n['a', 'b', 'test']\n\n```\n\n此例子，省略了一条语句，可读性上升。\n\n\n再来一个例子\n\n最初版本\n```\n a = [1,2,3,4]\n if len(a) > 3:  #计算 len(a) 一次 \n    print(f\"a is too long ({len(a)} elements,expected < 3)\")  # 计算 len(a) 第二次\n```\n\n我们改写为:\n\n改进版本\n```\n a = [1,2,3,4]\n n = len(a) # 计算一次len(a)\n if n > 3:  # 多了变量n\n    print(f\"a is too long ({n} elements,expected < 3)\")  # \n```\n\n新特性重写:\n重写版本\n```\n a = [1,2,3,4]\n if (n:=len(a)) > 3:  # 计算一次len(a)，多了变量n，把两行改为一行\n    print(f\"a is too long ({n} elements,expected < 3)\")  # \n```\n\n从上面可以看到，重写版本和改进版本的不同在于：\n\n```\n n = len(a) \n if n > 3:\n    pass\n```\n    \n与\n```\n if (n:=len(a)) > 3:\n    pass\n    \n```\n\n这两个版本的区别在于，`:=`和`=`是补充关系并不是替换关系，下面的例子可以看到官方的意图。\n\n```\n    x = 5\n    print(f\"x = {x}\")\n    \n    #能用=解决的就用=解决\n    y := 5 # SyntaxError: invalid syntax\n    print(f\"y = {y}\")\n\n    (z := 5)\n    print(f\"z = {z}\")\n\n```\n\n由上面可以看出`:=`和`=`是互补关系，在应该使用`:=`的时候才可以使用`:=`。\n\nPython语言的一致性，不管是专家还是新手，在同一个问题上都应该有一致的写法，然后这就形成了最pythonic的写法。\n\n\n最后带来，新特性带来的最佳实践\n\n```\n# 简化 os.fork \nif pid := os.fork():\n    # Parent code\nelse:\n    # Child code\n\n# 直接到把 socket 对象的 read buffer 读完为止\nwhile data := sock.recv(8192):\n    print(\"Received data:\", data)\n\n```\n\n#### 参考\n- https://docs.python.org/zh-cn/3.8/whatsnew/3.8.html\n- https://www.python.org/dev/peps/pep-0572\n\n","source":"_posts/python-new-01.md","raw":"---\ndate: 2019-04-01 00:00\ntitle:  Python 3.8新特性——赋值表达式\nsubtitle: 介绍Python语言新的特性\ncover: /images/new-01.png\ncategories: [Python新特性]\n---\n上周，Python3.8版本发布，到底带来了哪些新的特性呢？我们应该在哪些场景中使用这些特性呢？本周，我们通过几篇文章来告诉你答案。\n\n![](https://tva1.sinaimg.cn/large/006tNbRwly1gai72bypmej30u00u9wl1.jpg)\n\n#### 安装\n\n首先，我们并不推荐安装最新版本到常用的开发环境中，你可以使用虚拟环境或者docker来尝鲜。\n\n官方安装包\n\n网址：`https://www.python.org/downloads/release/python-380/`\n\n也可以使用docker\n\n拉取镜像命令\n`docker pull  python:3.8`\n\n## 赋值表达式\n\n![](https://tva1.sinaimg.cn/large/006tNbRwly1gai72nu5otj30jg0atdfq.jpg)\n\n赋值表达式被叫做海象运算符，因为它的形状像海象。如果熟悉go语言的话，会对这个表达式会熟悉。\n\n\n赋值表达式的语法是 \n```\n name := expression\n```\n\n和赋值语句 `=` 作用差不多，非必不可少，但可以简化代码。\n\n\n#### 官方示例\n\n```\n>>> a = False\n>>> print(a)\nFalse\n>>> print(a := True)\nTrue\n```\n\n此例子赋值之后，后续还需要使用变量。赋值表达可用于简化代码，提高可读性。\n\n```\n>>> inputs = list()\n>>> while True:\n...   current = input(\"your input:\")\n...   if current == \"quit\":\n...       break\n...   inputs.append(current)\n...\nyour input:a\nyour input:b\nyour input:test\nyour input:quit\n>>> inputs\n['a', 'b', 'test']\n```\n\n使用赋值操作符时：\n\n```\n>>> inputs = list()\n>>> while (current := input(\"your input:\")) != \"quit\":\n...   inputs.append(current)\n...\nyour input:a\nyour input:b\nyour input:test\nyour input:quit\n>>> inputs\n['a', 'b', 'test']\n\n```\n\n此例子，省略了一条语句，可读性上升。\n\n\n再来一个例子\n\n最初版本\n```\n a = [1,2,3,4]\n if len(a) > 3:  #计算 len(a) 一次 \n    print(f\"a is too long ({len(a)} elements,expected < 3)\")  # 计算 len(a) 第二次\n```\n\n我们改写为:\n\n改进版本\n```\n a = [1,2,3,4]\n n = len(a) # 计算一次len(a)\n if n > 3:  # 多了变量n\n    print(f\"a is too long ({n} elements,expected < 3)\")  # \n```\n\n新特性重写:\n重写版本\n```\n a = [1,2,3,4]\n if (n:=len(a)) > 3:  # 计算一次len(a)，多了变量n，把两行改为一行\n    print(f\"a is too long ({n} elements,expected < 3)\")  # \n```\n\n从上面可以看到，重写版本和改进版本的不同在于：\n\n```\n n = len(a) \n if n > 3:\n    pass\n```\n    \n与\n```\n if (n:=len(a)) > 3:\n    pass\n    \n```\n\n这两个版本的区别在于，`:=`和`=`是补充关系并不是替换关系，下面的例子可以看到官方的意图。\n\n```\n    x = 5\n    print(f\"x = {x}\")\n    \n    #能用=解决的就用=解决\n    y := 5 # SyntaxError: invalid syntax\n    print(f\"y = {y}\")\n\n    (z := 5)\n    print(f\"z = {z}\")\n\n```\n\n由上面可以看出`:=`和`=`是互补关系，在应该使用`:=`的时候才可以使用`:=`。\n\nPython语言的一致性，不管是专家还是新手，在同一个问题上都应该有一致的写法，然后这就形成了最pythonic的写法。\n\n\n最后带来，新特性带来的最佳实践\n\n```\n# 简化 os.fork \nif pid := os.fork():\n    # Parent code\nelse:\n    # Child code\n\n# 直接到把 socket 对象的 read buffer 读完为止\nwhile data := sock.recv(8192):\n    print(\"Received data:\", data)\n\n```\n\n#### 参考\n- https://docs.python.org/zh-cn/3.8/whatsnew/3.8.html\n- https://www.python.org/dev/peps/pep-0572\n\n","slug":"python-new-01","published":1,"updated":"2020-01-02T06:21:24.256Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck4wdip810001wz1bpzb1bkfv","content":"<p>上周，Python3.8版本发布，到底带来了哪些新的特性呢？我们应该在哪些场景中使用这些特性呢？本周，我们通过几篇文章来告诉你答案。</p>\n<p><img src=\"https://tva1.sinaimg.cn/large/006tNbRwly1gai72bypmej30u00u9wl1.jpg\" alt></p>\n<h4 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h4><p>首先，我们并不推荐安装最新版本到常用的开发环境中，你可以使用虚拟环境或者docker来尝鲜。</p>\n<p>官方安装包</p>\n<p>网址：<code>https://www.python.org/downloads/release/python-380/</code></p>\n<p>也可以使用docker</p>\n<p>拉取镜像命令<br><code>docker pull  python:3.8</code></p>\n<h2 id=\"赋值表达式\"><a href=\"#赋值表达式\" class=\"headerlink\" title=\"赋值表达式\"></a>赋值表达式</h2><p><img src=\"https://tva1.sinaimg.cn/large/006tNbRwly1gai72nu5otj30jg0atdfq.jpg\" alt></p>\n<p>赋值表达式被叫做海象运算符，因为它的形状像海象。如果熟悉go语言的话，会对这个表达式会熟悉。</p>\n<p>赋值表达式的语法是 </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">name := expression</span><br></pre></td></tr></table></figure>\n\n<p>和赋值语句 <code>=</code> 作用差不多，非必不可少，但可以简化代码。</p>\n<h4 id=\"官方示例\"><a href=\"#官方示例\" class=\"headerlink\" title=\"官方示例\"></a>官方示例</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;&gt;&gt; a = False</span><br><span class=\"line\">&gt;&gt;&gt; print(a)</span><br><span class=\"line\">False</span><br><span class=\"line\">&gt;&gt;&gt; print(a := True)</span><br><span class=\"line\">True</span><br></pre></td></tr></table></figure>\n\n<p>此例子赋值之后，后续还需要使用变量。赋值表达可用于简化代码，提高可读性。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;&gt;&gt; inputs = list()</span><br><span class=\"line\">&gt;&gt;&gt; while True:</span><br><span class=\"line\">...   current = input(&quot;your input:&quot;)</span><br><span class=\"line\">...   if current == &quot;quit&quot;:</span><br><span class=\"line\">...       break</span><br><span class=\"line\">...   inputs.append(current)</span><br><span class=\"line\">...</span><br><span class=\"line\">your input:a</span><br><span class=\"line\">your input:b</span><br><span class=\"line\">your input:test</span><br><span class=\"line\">your input:quit</span><br><span class=\"line\">&gt;&gt;&gt; inputs</span><br><span class=\"line\">[&apos;a&apos;, &apos;b&apos;, &apos;test&apos;]</span><br></pre></td></tr></table></figure>\n\n<p>使用赋值操作符时：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;&gt;&gt; inputs = list()</span><br><span class=\"line\">&gt;&gt;&gt; while (current := input(&quot;your input:&quot;)) != &quot;quit&quot;:</span><br><span class=\"line\">...   inputs.append(current)</span><br><span class=\"line\">...</span><br><span class=\"line\">your input:a</span><br><span class=\"line\">your input:b</span><br><span class=\"line\">your input:test</span><br><span class=\"line\">your input:quit</span><br><span class=\"line\">&gt;&gt;&gt; inputs</span><br><span class=\"line\">[&apos;a&apos;, &apos;b&apos;, &apos;test&apos;]</span><br></pre></td></tr></table></figure>\n\n<p>此例子，省略了一条语句，可读性上升。</p>\n<p>再来一个例子</p>\n<p>最初版本</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a = [1,2,3,4]</span><br><span class=\"line\">if len(a) &gt; 3:  #计算 len(a) 一次 </span><br><span class=\"line\">   print(f&quot;a is too long (&#123;len(a)&#125; elements,expected &lt; 3)&quot;)  # 计算 len(a) 第二次</span><br></pre></td></tr></table></figure>\n\n<p>我们改写为:</p>\n<p>改进版本</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a = [1,2,3,4]</span><br><span class=\"line\">n = len(a) # 计算一次len(a)</span><br><span class=\"line\">if n &gt; 3:  # 多了变量n</span><br><span class=\"line\">   print(f&quot;a is too long (&#123;n&#125; elements,expected &lt; 3)&quot;)  #</span><br></pre></td></tr></table></figure>\n\n<p>新特性重写:<br>重写版本</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a = [1,2,3,4]</span><br><span class=\"line\">if (n:=len(a)) &gt; 3:  # 计算一次len(a)，多了变量n，把两行改为一行</span><br><span class=\"line\">   print(f&quot;a is too long (&#123;n&#125; elements,expected &lt; 3)&quot;)  #</span><br></pre></td></tr></table></figure>\n\n<p>从上面可以看到，重写版本和改进版本的不同在于：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">n = len(a) </span><br><span class=\"line\">if n &gt; 3:</span><br><span class=\"line\">   pass</span><br></pre></td></tr></table></figure>\n\n\n<p>与</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">if (n:=len(a)) &gt; 3:</span><br><span class=\"line\">   pass</span><br></pre></td></tr></table></figure>\n\n<p>这两个版本的区别在于，<code>:=</code>和<code>=</code>是补充关系并不是替换关系，下面的例子可以看到官方的意图。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">x = 5</span><br><span class=\"line\">print(f&quot;x = &#123;x&#125;&quot;)</span><br><span class=\"line\"></span><br><span class=\"line\">#能用=解决的就用=解决</span><br><span class=\"line\">y := 5 # SyntaxError: invalid syntax</span><br><span class=\"line\">print(f&quot;y = &#123;y&#125;&quot;)</span><br><span class=\"line\"></span><br><span class=\"line\">(z := 5)</span><br><span class=\"line\">print(f&quot;z = &#123;z&#125;&quot;)</span><br></pre></td></tr></table></figure>\n\n<p>由上面可以看出<code>:=</code>和<code>=</code>是互补关系，在应该使用<code>:=</code>的时候才可以使用<code>:=</code>。</p>\n<p>Python语言的一致性，不管是专家还是新手，在同一个问题上都应该有一致的写法，然后这就形成了最pythonic的写法。</p>\n<p>最后带来，新特性带来的最佳实践</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 简化 os.fork </span><br><span class=\"line\">if pid := os.fork():</span><br><span class=\"line\">    # Parent code</span><br><span class=\"line\">else:</span><br><span class=\"line\">    # Child code</span><br><span class=\"line\"></span><br><span class=\"line\"># 直接到把 socket 对象的 read buffer 读完为止</span><br><span class=\"line\">while data := sock.recv(8192):</span><br><span class=\"line\">    print(&quot;Received data:&quot;, data)</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h4><ul>\n<li><a href=\"https://docs.python.org/zh-cn/3.8/whatsnew/3.8.html\" target=\"_blank\" rel=\"noopener\">https://docs.python.org/zh-cn/3.8/whatsnew/3.8.html</a></li>\n<li><a href=\"https://www.python.org/dev/peps/pep-0572\" target=\"_blank\" rel=\"noopener\">https://www.python.org/dev/peps/pep-0572</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<p>上周，Python3.8版本发布，到底带来了哪些新的特性呢？我们应该在哪些场景中使用这些特性呢？本周，我们通过几篇文章来告诉你答案。</p>\n<p><img src=\"https://tva1.sinaimg.cn/large/006tNbRwly1gai72bypmej30u00u9wl1.jpg\" alt></p>\n<h4 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h4><p>首先，我们并不推荐安装最新版本到常用的开发环境中，你可以使用虚拟环境或者docker来尝鲜。</p>\n<p>官方安装包</p>\n<p>网址：<code>https://www.python.org/downloads/release/python-380/</code></p>\n<p>也可以使用docker</p>\n<p>拉取镜像命令<br><code>docker pull  python:3.8</code></p>\n<h2 id=\"赋值表达式\"><a href=\"#赋值表达式\" class=\"headerlink\" title=\"赋值表达式\"></a>赋值表达式</h2><p><img src=\"https://tva1.sinaimg.cn/large/006tNbRwly1gai72nu5otj30jg0atdfq.jpg\" alt></p>\n<p>赋值表达式被叫做海象运算符，因为它的形状像海象。如果熟悉go语言的话，会对这个表达式会熟悉。</p>\n<p>赋值表达式的语法是 </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">name := expression</span><br></pre></td></tr></table></figure>\n\n<p>和赋值语句 <code>=</code> 作用差不多，非必不可少，但可以简化代码。</p>\n<h4 id=\"官方示例\"><a href=\"#官方示例\" class=\"headerlink\" title=\"官方示例\"></a>官方示例</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;&gt;&gt; a = False</span><br><span class=\"line\">&gt;&gt;&gt; print(a)</span><br><span class=\"line\">False</span><br><span class=\"line\">&gt;&gt;&gt; print(a := True)</span><br><span class=\"line\">True</span><br></pre></td></tr></table></figure>\n\n<p>此例子赋值之后，后续还需要使用变量。赋值表达可用于简化代码，提高可读性。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;&gt;&gt; inputs = list()</span><br><span class=\"line\">&gt;&gt;&gt; while True:</span><br><span class=\"line\">...   current = input(&quot;your input:&quot;)</span><br><span class=\"line\">...   if current == &quot;quit&quot;:</span><br><span class=\"line\">...       break</span><br><span class=\"line\">...   inputs.append(current)</span><br><span class=\"line\">...</span><br><span class=\"line\">your input:a</span><br><span class=\"line\">your input:b</span><br><span class=\"line\">your input:test</span><br><span class=\"line\">your input:quit</span><br><span class=\"line\">&gt;&gt;&gt; inputs</span><br><span class=\"line\">[&apos;a&apos;, &apos;b&apos;, &apos;test&apos;]</span><br></pre></td></tr></table></figure>\n\n<p>使用赋值操作符时：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;&gt;&gt; inputs = list()</span><br><span class=\"line\">&gt;&gt;&gt; while (current := input(&quot;your input:&quot;)) != &quot;quit&quot;:</span><br><span class=\"line\">...   inputs.append(current)</span><br><span class=\"line\">...</span><br><span class=\"line\">your input:a</span><br><span class=\"line\">your input:b</span><br><span class=\"line\">your input:test</span><br><span class=\"line\">your input:quit</span><br><span class=\"line\">&gt;&gt;&gt; inputs</span><br><span class=\"line\">[&apos;a&apos;, &apos;b&apos;, &apos;test&apos;]</span><br></pre></td></tr></table></figure>\n\n<p>此例子，省略了一条语句，可读性上升。</p>\n<p>再来一个例子</p>\n<p>最初版本</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a = [1,2,3,4]</span><br><span class=\"line\">if len(a) &gt; 3:  #计算 len(a) 一次 </span><br><span class=\"line\">   print(f&quot;a is too long (&#123;len(a)&#125; elements,expected &lt; 3)&quot;)  # 计算 len(a) 第二次</span><br></pre></td></tr></table></figure>\n\n<p>我们改写为:</p>\n<p>改进版本</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a = [1,2,3,4]</span><br><span class=\"line\">n = len(a) # 计算一次len(a)</span><br><span class=\"line\">if n &gt; 3:  # 多了变量n</span><br><span class=\"line\">   print(f&quot;a is too long (&#123;n&#125; elements,expected &lt; 3)&quot;)  #</span><br></pre></td></tr></table></figure>\n\n<p>新特性重写:<br>重写版本</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a = [1,2,3,4]</span><br><span class=\"line\">if (n:=len(a)) &gt; 3:  # 计算一次len(a)，多了变量n，把两行改为一行</span><br><span class=\"line\">   print(f&quot;a is too long (&#123;n&#125; elements,expected &lt; 3)&quot;)  #</span><br></pre></td></tr></table></figure>\n\n<p>从上面可以看到，重写版本和改进版本的不同在于：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">n = len(a) </span><br><span class=\"line\">if n &gt; 3:</span><br><span class=\"line\">   pass</span><br></pre></td></tr></table></figure>\n\n\n<p>与</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">if (n:=len(a)) &gt; 3:</span><br><span class=\"line\">   pass</span><br></pre></td></tr></table></figure>\n\n<p>这两个版本的区别在于，<code>:=</code>和<code>=</code>是补充关系并不是替换关系，下面的例子可以看到官方的意图。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">x = 5</span><br><span class=\"line\">print(f&quot;x = &#123;x&#125;&quot;)</span><br><span class=\"line\"></span><br><span class=\"line\">#能用=解决的就用=解决</span><br><span class=\"line\">y := 5 # SyntaxError: invalid syntax</span><br><span class=\"line\">print(f&quot;y = &#123;y&#125;&quot;)</span><br><span class=\"line\"></span><br><span class=\"line\">(z := 5)</span><br><span class=\"line\">print(f&quot;z = &#123;z&#125;&quot;)</span><br></pre></td></tr></table></figure>\n\n<p>由上面可以看出<code>:=</code>和<code>=</code>是互补关系，在应该使用<code>:=</code>的时候才可以使用<code>:=</code>。</p>\n<p>Python语言的一致性，不管是专家还是新手，在同一个问题上都应该有一致的写法，然后这就形成了最pythonic的写法。</p>\n<p>最后带来，新特性带来的最佳实践</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 简化 os.fork </span><br><span class=\"line\">if pid := os.fork():</span><br><span class=\"line\">    # Parent code</span><br><span class=\"line\">else:</span><br><span class=\"line\">    # Child code</span><br><span class=\"line\"></span><br><span class=\"line\"># 直接到把 socket 对象的 read buffer 读完为止</span><br><span class=\"line\">while data := sock.recv(8192):</span><br><span class=\"line\">    print(&quot;Received data:&quot;, data)</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h4><ul>\n<li><a href=\"https://docs.python.org/zh-cn/3.8/whatsnew/3.8.html\" target=\"_blank\" rel=\"noopener\">https://docs.python.org/zh-cn/3.8/whatsnew/3.8.html</a></li>\n<li><a href=\"https://www.python.org/dev/peps/pep-0572\" target=\"_blank\" rel=\"noopener\">https://www.python.org/dev/peps/pep-0572</a></li>\n</ul>\n"},{"date":"2019-04-01T16:00:00.000Z","title":"Python 3.8新特性——仅限位置形参","subtitle":"介绍Python语言新的特性","cover":"/images/new-02.png","_content":"## 仅限位置形参\n\nPositional-only parameters官方翻译为仅限位置形参，也可以理解为只接受位置参数。意思就是，它只是一个位置参数，不接受关键字传参。\n\n语法： \n\n```\ndef funx(a,b,/): # / 指明，前面的a,b参数是仅限位置形参\n    pass\n```\n\n函数形参语法`/` 用来指明某些函数形参必须使用仅限位置而非关键字参数\n\n其实，Python内置的很多C函数接口都是这种形式，比如\n\n```\n>>> import builtins\n>>> help(__builtins__.divmod)\nHelp on built-in function divmod in module builtins:\n\ndivmod(x, y, /)\n    Return the tuple (x//y, x%y).  Invariant: div*y + mod == x.\n\n```\n\n很多函数后面都有 `/`来表明，左边的这些参数只接受位置参数。\n\n```\n>>> divmod(1,2)\n(0, 1)\n>>> divmod(x=1,y=2) \nTraceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\nTypeError: divmod() takes no keyword arguments\n>>>\n\n```\n\n指定关键字的参数会报语法错误，它的用途就是强制使用者用位置参数来传参。\n\n\n#### 官方例子\n\n```\n>>> def f(a,b,/,**kwargs):\n...   print(a,b,kwargs)\n...\n>>> f(10,20,a=1,b=2,c=3)\n10 20 {'a': 1, 'b': 2, 'c': 3}\n```\n\n由于在 `/` 左侧的形参不会被公开为可用关键字\n\n这里的a,b 为仅限位置参数，最后a,b会被赋值了两次。\n位置参数赋值一次，关键字参数赋值一次，关键字参数以kwargs字典的形式存在，需要通过 `kwargs['a'],kwargs['b']`访问。\n\n\n\n现在我们来看一下，添加了仅限位置形参之后的函数参数形式\n\n```\ndef name(positional_only_parameters, /, positional_or_keyword_parameters,\n         *, keyword_only_parameters):\n```\n\n包括了仅限位置形参， `/`, 位置形参或者关键字参数 ,`*`，仅限关键字参数。\n\n![](https://tva1.sinaimg.cn/large/006tNbRwly1gai73g9r3ej30so09mq3k.jpg)\n\n\n最后，我们可以定义以下形式的函数\n\n```\ndef name(p1, p2, /, p_or_kw, *, kw):\ndef name(p1, p2=None, /, p_or_kw=None, *, kw):\ndef name(p1, p2=None, /, *, kw):\ndef name(p1, p2=None, /):\ndef name(p1, p2, /, p_or_kw):\ndef name(p1, p2, /):\n\n```\n\n\n#### 参考\n- https://docs.python.org/zh-cn/3.8/whatsnew/3.8.html\n- https://docs.python.org/zh-cn/3/howto/clinic.html\n- https://www.python.org/dev/peps/pep-0570\n\n","source":"_posts/python-new-02.md","raw":"---\ndate: 2019-04-02 00:00\ntitle:  Python 3.8新特性——仅限位置形参\nsubtitle: 介绍Python语言新的特性\ncover: /images/new-02.png\ncategories: [Python新特性]\n---\n## 仅限位置形参\n\nPositional-only parameters官方翻译为仅限位置形参，也可以理解为只接受位置参数。意思就是，它只是一个位置参数，不接受关键字传参。\n\n语法： \n\n```\ndef funx(a,b,/): # / 指明，前面的a,b参数是仅限位置形参\n    pass\n```\n\n函数形参语法`/` 用来指明某些函数形参必须使用仅限位置而非关键字参数\n\n其实，Python内置的很多C函数接口都是这种形式，比如\n\n```\n>>> import builtins\n>>> help(__builtins__.divmod)\nHelp on built-in function divmod in module builtins:\n\ndivmod(x, y, /)\n    Return the tuple (x//y, x%y).  Invariant: div*y + mod == x.\n\n```\n\n很多函数后面都有 `/`来表明，左边的这些参数只接受位置参数。\n\n```\n>>> divmod(1,2)\n(0, 1)\n>>> divmod(x=1,y=2) \nTraceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\nTypeError: divmod() takes no keyword arguments\n>>>\n\n```\n\n指定关键字的参数会报语法错误，它的用途就是强制使用者用位置参数来传参。\n\n\n#### 官方例子\n\n```\n>>> def f(a,b,/,**kwargs):\n...   print(a,b,kwargs)\n...\n>>> f(10,20,a=1,b=2,c=3)\n10 20 {'a': 1, 'b': 2, 'c': 3}\n```\n\n由于在 `/` 左侧的形参不会被公开为可用关键字\n\n这里的a,b 为仅限位置参数，最后a,b会被赋值了两次。\n位置参数赋值一次，关键字参数赋值一次，关键字参数以kwargs字典的形式存在，需要通过 `kwargs['a'],kwargs['b']`访问。\n\n\n\n现在我们来看一下，添加了仅限位置形参之后的函数参数形式\n\n```\ndef name(positional_only_parameters, /, positional_or_keyword_parameters,\n         *, keyword_only_parameters):\n```\n\n包括了仅限位置形参， `/`, 位置形参或者关键字参数 ,`*`，仅限关键字参数。\n\n![](https://tva1.sinaimg.cn/large/006tNbRwly1gai73g9r3ej30so09mq3k.jpg)\n\n\n最后，我们可以定义以下形式的函数\n\n```\ndef name(p1, p2, /, p_or_kw, *, kw):\ndef name(p1, p2=None, /, p_or_kw=None, *, kw):\ndef name(p1, p2=None, /, *, kw):\ndef name(p1, p2=None, /):\ndef name(p1, p2, /, p_or_kw):\ndef name(p1, p2, /):\n\n```\n\n\n#### 参考\n- https://docs.python.org/zh-cn/3.8/whatsnew/3.8.html\n- https://docs.python.org/zh-cn/3/howto/clinic.html\n- https://www.python.org/dev/peps/pep-0570\n\n","slug":"python-new-02","published":1,"updated":"2020-01-02T06:21:57.838Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck4wdip850003wz1b9djz8e2s","content":"<h2 id=\"仅限位置形参\"><a href=\"#仅限位置形参\" class=\"headerlink\" title=\"仅限位置形参\"></a>仅限位置形参</h2><p>Positional-only parameters官方翻译为仅限位置形参，也可以理解为只接受位置参数。意思就是，它只是一个位置参数，不接受关键字传参。</p>\n<p>语法： </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">def funx(a,b,/): # / 指明，前面的a,b参数是仅限位置形参</span><br><span class=\"line\">    pass</span><br></pre></td></tr></table></figure>\n\n<p>函数形参语法<code>/</code> 用来指明某些函数形参必须使用仅限位置而非关键字参数</p>\n<p>其实，Python内置的很多C函数接口都是这种形式，比如</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;&gt;&gt; import builtins</span><br><span class=\"line\">&gt;&gt;&gt; help(__builtins__.divmod)</span><br><span class=\"line\">Help on built-in function divmod in module builtins:</span><br><span class=\"line\"></span><br><span class=\"line\">divmod(x, y, /)</span><br><span class=\"line\">    Return the tuple (x//y, x%y).  Invariant: div*y + mod == x.</span><br></pre></td></tr></table></figure>\n\n<p>很多函数后面都有 <code>/</code>来表明，左边的这些参数只接受位置参数。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;&gt;&gt; divmod(1,2)</span><br><span class=\"line\">(0, 1)</span><br><span class=\"line\">&gt;&gt;&gt; divmod(x=1,y=2) </span><br><span class=\"line\">Traceback (most recent call last):</span><br><span class=\"line\">  File &quot;&lt;stdin&gt;&quot;, line 1, in &lt;module&gt;</span><br><span class=\"line\">TypeError: divmod() takes no keyword arguments</span><br><span class=\"line\">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure>\n\n<p>指定关键字的参数会报语法错误，它的用途就是强制使用者用位置参数来传参。</p>\n<h4 id=\"官方例子\"><a href=\"#官方例子\" class=\"headerlink\" title=\"官方例子\"></a>官方例子</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;&gt;&gt; def f(a,b,/,**kwargs):</span><br><span class=\"line\">...   print(a,b,kwargs)</span><br><span class=\"line\">...</span><br><span class=\"line\">&gt;&gt;&gt; f(10,20,a=1,b=2,c=3)</span><br><span class=\"line\">10 20 &#123;&apos;a&apos;: 1, &apos;b&apos;: 2, &apos;c&apos;: 3&#125;</span><br></pre></td></tr></table></figure>\n\n<p>由于在 <code>/</code> 左侧的形参不会被公开为可用关键字</p>\n<p>这里的a,b 为仅限位置参数，最后a,b会被赋值了两次。<br>位置参数赋值一次，关键字参数赋值一次，关键字参数以kwargs字典的形式存在，需要通过 <code>kwargs[&#39;a&#39;],kwargs[&#39;b&#39;]</code>访问。</p>\n<p>现在我们来看一下，添加了仅限位置形参之后的函数参数形式</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">def name(positional_only_parameters, /, positional_or_keyword_parameters,</span><br><span class=\"line\">         *, keyword_only_parameters):</span><br></pre></td></tr></table></figure>\n\n<p>包括了仅限位置形参， <code>/</code>, 位置形参或者关键字参数 ,<code>*</code>，仅限关键字参数。</p>\n<p><img src=\"https://tva1.sinaimg.cn/large/006tNbRwly1gai73g9r3ej30so09mq3k.jpg\" alt></p>\n<p>最后，我们可以定义以下形式的函数</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">def name(p1, p2, /, p_or_kw, *, kw):</span><br><span class=\"line\">def name(p1, p2=None, /, p_or_kw=None, *, kw):</span><br><span class=\"line\">def name(p1, p2=None, /, *, kw):</span><br><span class=\"line\">def name(p1, p2=None, /):</span><br><span class=\"line\">def name(p1, p2, /, p_or_kw):</span><br><span class=\"line\">def name(p1, p2, /):</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h4><ul>\n<li><a href=\"https://docs.python.org/zh-cn/3.8/whatsnew/3.8.html\" target=\"_blank\" rel=\"noopener\">https://docs.python.org/zh-cn/3.8/whatsnew/3.8.html</a></li>\n<li><a href=\"https://docs.python.org/zh-cn/3/howto/clinic.html\" target=\"_blank\" rel=\"noopener\">https://docs.python.org/zh-cn/3/howto/clinic.html</a></li>\n<li><a href=\"https://www.python.org/dev/peps/pep-0570\" target=\"_blank\" rel=\"noopener\">https://www.python.org/dev/peps/pep-0570</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"仅限位置形参\"><a href=\"#仅限位置形参\" class=\"headerlink\" title=\"仅限位置形参\"></a>仅限位置形参</h2><p>Positional-only parameters官方翻译为仅限位置形参，也可以理解为只接受位置参数。意思就是，它只是一个位置参数，不接受关键字传参。</p>\n<p>语法： </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">def funx(a,b,/): # / 指明，前面的a,b参数是仅限位置形参</span><br><span class=\"line\">    pass</span><br></pre></td></tr></table></figure>\n\n<p>函数形参语法<code>/</code> 用来指明某些函数形参必须使用仅限位置而非关键字参数</p>\n<p>其实，Python内置的很多C函数接口都是这种形式，比如</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;&gt;&gt; import builtins</span><br><span class=\"line\">&gt;&gt;&gt; help(__builtins__.divmod)</span><br><span class=\"line\">Help on built-in function divmod in module builtins:</span><br><span class=\"line\"></span><br><span class=\"line\">divmod(x, y, /)</span><br><span class=\"line\">    Return the tuple (x//y, x%y).  Invariant: div*y + mod == x.</span><br></pre></td></tr></table></figure>\n\n<p>很多函数后面都有 <code>/</code>来表明，左边的这些参数只接受位置参数。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;&gt;&gt; divmod(1,2)</span><br><span class=\"line\">(0, 1)</span><br><span class=\"line\">&gt;&gt;&gt; divmod(x=1,y=2) </span><br><span class=\"line\">Traceback (most recent call last):</span><br><span class=\"line\">  File &quot;&lt;stdin&gt;&quot;, line 1, in &lt;module&gt;</span><br><span class=\"line\">TypeError: divmod() takes no keyword arguments</span><br><span class=\"line\">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure>\n\n<p>指定关键字的参数会报语法错误，它的用途就是强制使用者用位置参数来传参。</p>\n<h4 id=\"官方例子\"><a href=\"#官方例子\" class=\"headerlink\" title=\"官方例子\"></a>官方例子</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;&gt;&gt; def f(a,b,/,**kwargs):</span><br><span class=\"line\">...   print(a,b,kwargs)</span><br><span class=\"line\">...</span><br><span class=\"line\">&gt;&gt;&gt; f(10,20,a=1,b=2,c=3)</span><br><span class=\"line\">10 20 &#123;&apos;a&apos;: 1, &apos;b&apos;: 2, &apos;c&apos;: 3&#125;</span><br></pre></td></tr></table></figure>\n\n<p>由于在 <code>/</code> 左侧的形参不会被公开为可用关键字</p>\n<p>这里的a,b 为仅限位置参数，最后a,b会被赋值了两次。<br>位置参数赋值一次，关键字参数赋值一次，关键字参数以kwargs字典的形式存在，需要通过 <code>kwargs[&#39;a&#39;],kwargs[&#39;b&#39;]</code>访问。</p>\n<p>现在我们来看一下，添加了仅限位置形参之后的函数参数形式</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">def name(positional_only_parameters, /, positional_or_keyword_parameters,</span><br><span class=\"line\">         *, keyword_only_parameters):</span><br></pre></td></tr></table></figure>\n\n<p>包括了仅限位置形参， <code>/</code>, 位置形参或者关键字参数 ,<code>*</code>，仅限关键字参数。</p>\n<p><img src=\"https://tva1.sinaimg.cn/large/006tNbRwly1gai73g9r3ej30so09mq3k.jpg\" alt></p>\n<p>最后，我们可以定义以下形式的函数</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">def name(p1, p2, /, p_or_kw, *, kw):</span><br><span class=\"line\">def name(p1, p2=None, /, p_or_kw=None, *, kw):</span><br><span class=\"line\">def name(p1, p2=None, /, *, kw):</span><br><span class=\"line\">def name(p1, p2=None, /):</span><br><span class=\"line\">def name(p1, p2, /, p_or_kw):</span><br><span class=\"line\">def name(p1, p2, /):</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h4><ul>\n<li><a href=\"https://docs.python.org/zh-cn/3.8/whatsnew/3.8.html\" target=\"_blank\" rel=\"noopener\">https://docs.python.org/zh-cn/3.8/whatsnew/3.8.html</a></li>\n<li><a href=\"https://docs.python.org/zh-cn/3/howto/clinic.html\" target=\"_blank\" rel=\"noopener\">https://docs.python.org/zh-cn/3/howto/clinic.html</a></li>\n<li><a href=\"https://www.python.org/dev/peps/pep-0570\" target=\"_blank\" rel=\"noopener\">https://www.python.org/dev/peps/pep-0570</a></li>\n</ul>\n"},{"date":"2019-02-28T16:00:00.000Z","title":"使用 Python 生成《红楼梦》词云","subtitle":"Python自然语言处理教程","cover":"/images/nlp1.png","_content":"\n\n使用 Python 生成《红楼梦》词云\n\n![](http://jcjview.github.io/img/1210058744_15500375990201n.jpg)\n\n\n本文介绍如何使用python绘制《红楼梦》的词云。\n\n>“词云”就是对网络文本中出现频率较高的“关键词”予以视觉上的突出，形成“关键词云层”或“关键词渲染”，从而过滤掉大量的文本信息，使浏览网页者只要一眼扫过文本就可以领略文本的主旨。\n>[“词云”——网络内容发布新招式  ．人民网](http://media.people.com.cn/GB/22100/61748/61749/4281906.html)\n\n\n## 0.摘要\n\n**本文建议在电脑上打开，边阅读边操作。**\n\n1. 安装python词云工具wordcloud，画图软件matplotlib\n2. 准备红楼梦文本\n3. 编写python代码并运行\n4.展示词云结果\n\n## 1.安装wordcloud\n\n\n可以在cmd窗口输入```pip install wordcloud  matplotlib```\n\n![](http://jcjview.github.io/img/wordcloud001.png)\n\n\n## 2.准备红楼梦文本\n\n文本可以用下面链接下载\n\n\n`https://github.com/flypythoncom/flypython/blob/master/wordcloud_hlm_seg.txt`\n\n或者可以自己写代码，对文本进行清洗，分词。\n这里需要安装jieba分词，`pip install jieba`\n``` python\nimport jieba\nimport re\n\nspecial_character_removal = re.compile(r'[，。、【 】“”：；（）《》‘’{}？！⑦%>℃.^-——=&#@￥『』]', re.IGNORECASE)\n\nfw=open(\"hlm_seg.txt\",\"w\",encoding=\"utf-8\")\n\nwith open('hlm.txt',encoding=\"utf-8\") as fp:\n    for line in fp:\n        l = special_character_removal.sub('', line.strip())\n        words=jieba.cut(l)\n        t=\" \".join(words)\n        fw.write(t)\n        fw.write(\"\\n\")\n \nfw.close()\n\n```\n\n\n## 3. 编写词云python代码并运行\n\n```python\nfrom os import path  \nfrom wordcloud import WordCloud\n\nd = path.dirname(__file__)  \n# Read the whole text.  \ntext = open(path.join(d, 'hlm_seg.txt'),encoding=\"utf-8\").read()  \n# Generate a word cloud image  \n# font=path.join(d, \"simkai.ttf\")  \nfont='C:/Windows/Fonts/simkai.ttf'  \nwordcloud = WordCloud(font_path=font,#设置中文字体，不指定就会出现中文不显示  \n  width=1024,#宽  \n  height=840,#高  \n  background_color='white',#设置背景色   \n  # max_words=100,#最大词汇数  \n  # max_font_size=100#最大号字体  \n  ).generate(text)  \n  \n# Display the generated image:  \n# the matplotlib way:  \nimport matplotlib.pyplot as plt  \n  \nplt.figure()  \nplt.imshow(wordcloud)  \nplt.axis(\"off\")  \nplt.show()\n\n```\n\n结果：\n\n![词云运行结果](\nhttp://jcjview.github.io/img/Figure_1.png)\n\n\n\n后台回复“词云”获得完整运行代码\n\n\n*人生苦短，我用python早下班。如果觉得不错，对你工作中有帮助，请加我微信公众号flypython，我们一起探讨python相关问题*\n\n  ![flypython微信公众号](https://flypython.com/images/wechat.png)","source":"_posts/python-nlp-01.md","raw":"---\ndate: 2019-03-01 00:00\ntitle:  使用 Python 生成《红楼梦》词云\nsubtitle: Python自然语言处理教程\ncover: /images/nlp1.png\ncategories: [自然语言处理]\n---\n\n\n使用 Python 生成《红楼梦》词云\n\n![](http://jcjview.github.io/img/1210058744_15500375990201n.jpg)\n\n\n本文介绍如何使用python绘制《红楼梦》的词云。\n\n>“词云”就是对网络文本中出现频率较高的“关键词”予以视觉上的突出，形成“关键词云层”或“关键词渲染”，从而过滤掉大量的文本信息，使浏览网页者只要一眼扫过文本就可以领略文本的主旨。\n>[“词云”——网络内容发布新招式  ．人民网](http://media.people.com.cn/GB/22100/61748/61749/4281906.html)\n\n\n## 0.摘要\n\n**本文建议在电脑上打开，边阅读边操作。**\n\n1. 安装python词云工具wordcloud，画图软件matplotlib\n2. 准备红楼梦文本\n3. 编写python代码并运行\n4.展示词云结果\n\n## 1.安装wordcloud\n\n\n可以在cmd窗口输入```pip install wordcloud  matplotlib```\n\n![](http://jcjview.github.io/img/wordcloud001.png)\n\n\n## 2.准备红楼梦文本\n\n文本可以用下面链接下载\n\n\n`https://github.com/flypythoncom/flypython/blob/master/wordcloud_hlm_seg.txt`\n\n或者可以自己写代码，对文本进行清洗，分词。\n这里需要安装jieba分词，`pip install jieba`\n``` python\nimport jieba\nimport re\n\nspecial_character_removal = re.compile(r'[，。、【 】“”：；（）《》‘’{}？！⑦%>℃.^-——=&#@￥『』]', re.IGNORECASE)\n\nfw=open(\"hlm_seg.txt\",\"w\",encoding=\"utf-8\")\n\nwith open('hlm.txt',encoding=\"utf-8\") as fp:\n    for line in fp:\n        l = special_character_removal.sub('', line.strip())\n        words=jieba.cut(l)\n        t=\" \".join(words)\n        fw.write(t)\n        fw.write(\"\\n\")\n \nfw.close()\n\n```\n\n\n## 3. 编写词云python代码并运行\n\n```python\nfrom os import path  \nfrom wordcloud import WordCloud\n\nd = path.dirname(__file__)  \n# Read the whole text.  \ntext = open(path.join(d, 'hlm_seg.txt'),encoding=\"utf-8\").read()  \n# Generate a word cloud image  \n# font=path.join(d, \"simkai.ttf\")  \nfont='C:/Windows/Fonts/simkai.ttf'  \nwordcloud = WordCloud(font_path=font,#设置中文字体，不指定就会出现中文不显示  \n  width=1024,#宽  \n  height=840,#高  \n  background_color='white',#设置背景色   \n  # max_words=100,#最大词汇数  \n  # max_font_size=100#最大号字体  \n  ).generate(text)  \n  \n# Display the generated image:  \n# the matplotlib way:  \nimport matplotlib.pyplot as plt  \n  \nplt.figure()  \nplt.imshow(wordcloud)  \nplt.axis(\"off\")  \nplt.show()\n\n```\n\n结果：\n\n![词云运行结果](\nhttp://jcjview.github.io/img/Figure_1.png)\n\n\n\n后台回复“词云”获得完整运行代码\n\n\n*人生苦短，我用python早下班。如果觉得不错，对你工作中有帮助，请加我微信公众号flypython，我们一起探讨python相关问题*\n\n  ![flypython微信公众号](https://flypython.com/images/wechat.png)","slug":"python-nlp-01","published":1,"updated":"2020-01-02T04:18:32.427Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck4wdip860004wz1bqndu1rjc","content":"<p>使用 Python 生成《红楼梦》词云</p>\n<p><img src=\"http://jcjview.github.io/img/1210058744_15500375990201n.jpg\" alt></p>\n<p>本文介绍如何使用python绘制《红楼梦》的词云。</p>\n<blockquote>\n<p>“词云”就是对网络文本中出现频率较高的“关键词”予以视觉上的突出，形成“关键词云层”或“关键词渲染”，从而过滤掉大量的文本信息，使浏览网页者只要一眼扫过文本就可以领略文本的主旨。<br><a href=\"http://media.people.com.cn/GB/22100/61748/61749/4281906.html\" target=\"_blank\" rel=\"noopener\">“词云”——网络内容发布新招式  ．人民网</a></p>\n</blockquote>\n<h2 id=\"0-摘要\"><a href=\"#0-摘要\" class=\"headerlink\" title=\"0.摘要\"></a>0.摘要</h2><p><strong>本文建议在电脑上打开，边阅读边操作。</strong></p>\n<ol>\n<li>安装python词云工具wordcloud，画图软件matplotlib</li>\n<li>准备红楼梦文本</li>\n<li>编写python代码并运行</li>\n<li>展示词云结果</li>\n</ol>\n<h2 id=\"1-安装wordcloud\"><a href=\"#1-安装wordcloud\" class=\"headerlink\" title=\"1.安装wordcloud\"></a>1.安装wordcloud</h2><p>可以在cmd窗口输入<figure class=\"highlight plain\"><figcaption><span>install wordcloud  matplotlib```</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">![](http://jcjview.github.io/img/wordcloud001.png)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">## 2.准备红楼梦文本</span><br><span class=\"line\"></span><br><span class=\"line\">文本可以用下面链接下载</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">`https://github.com/flypythoncom/flypython/blob/master/wordcloud_hlm_seg.txt`</span><br><span class=\"line\"></span><br><span class=\"line\">或者可以自己写代码，对文本进行清洗，分词。</span><br><span class=\"line\">这里需要安装jieba分词，`pip install jieba`</span><br><span class=\"line\">``` python</span><br><span class=\"line\">import jieba</span><br><span class=\"line\">import re</span><br><span class=\"line\"></span><br><span class=\"line\">special_character_removal = re.compile(r&apos;[，。、【 】“”：；（）《》‘’&#123;&#125;？！⑦%&gt;℃.^-——=&amp;#@￥『』]&apos;, re.IGNORECASE)</span><br><span class=\"line\"></span><br><span class=\"line\">fw=open(&quot;hlm_seg.txt&quot;,&quot;w&quot;,encoding=&quot;utf-8&quot;)</span><br><span class=\"line\"></span><br><span class=\"line\">with open(&apos;hlm.txt&apos;,encoding=&quot;utf-8&quot;) as fp:</span><br><span class=\"line\">    for line in fp:</span><br><span class=\"line\">        l = special_character_removal.sub(&apos;&apos;, line.strip())</span><br><span class=\"line\">        words=jieba.cut(l)</span><br><span class=\"line\">        t=&quot; &quot;.join(words)</span><br><span class=\"line\">        fw.write(t)</span><br><span class=\"line\">        fw.write(&quot;\\n&quot;)</span><br><span class=\"line\"> </span><br><span class=\"line\">fw.close()</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"3-编写词云python代码并运行\"><a href=\"#3-编写词云python代码并运行\" class=\"headerlink\" title=\"3. 编写词云python代码并运行\"></a>3. 编写词云python代码并运行</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> os <span class=\"keyword\">import</span> path  </span><br><span class=\"line\"><span class=\"keyword\">from</span> wordcloud <span class=\"keyword\">import</span> WordCloud</span><br><span class=\"line\"></span><br><span class=\"line\">d = path.dirname(__file__)  </span><br><span class=\"line\"><span class=\"comment\"># Read the whole text.  </span></span><br><span class=\"line\">text = open(path.join(d, <span class=\"string\">'hlm_seg.txt'</span>),encoding=<span class=\"string\">\"utf-8\"</span>).read()  </span><br><span class=\"line\"><span class=\"comment\"># Generate a word cloud image  </span></span><br><span class=\"line\"><span class=\"comment\"># font=path.join(d, \"simkai.ttf\")  </span></span><br><span class=\"line\">font=<span class=\"string\">'C:/Windows/Fonts/simkai.ttf'</span>  </span><br><span class=\"line\">wordcloud = WordCloud(font_path=font,<span class=\"comment\">#设置中文字体，不指定就会出现中文不显示  </span></span><br><span class=\"line\">  width=<span class=\"number\">1024</span>,<span class=\"comment\">#宽  </span></span><br><span class=\"line\">  height=<span class=\"number\">840</span>,<span class=\"comment\">#高  </span></span><br><span class=\"line\">  background_color=<span class=\"string\">'white'</span>,<span class=\"comment\">#设置背景色   </span></span><br><span class=\"line\">  <span class=\"comment\"># max_words=100,#最大词汇数  </span></span><br><span class=\"line\">  <span class=\"comment\"># max_font_size=100#最大号字体  </span></span><br><span class=\"line\">  ).generate(text)  </span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"comment\"># Display the generated image:  </span></span><br><span class=\"line\"><span class=\"comment\"># the matplotlib way:  </span></span><br><span class=\"line\"><span class=\"keyword\">import</span> matplotlib.pyplot <span class=\"keyword\">as</span> plt  </span><br><span class=\"line\">  </span><br><span class=\"line\">plt.figure()  </span><br><span class=\"line\">plt.imshow(wordcloud)  </span><br><span class=\"line\">plt.axis(<span class=\"string\">\"off\"</span>)  </span><br><span class=\"line\">plt.show()</span><br></pre></td></tr></table></figure>\n\n<p>结果：</p>\n<p><img src=\"http://jcjview.github.io/img/Figure_1.png\" alt=\"词云运行结果\"></p>\n<p>后台回复“词云”获得完整运行代码</p>\n<p><em>人生苦短，我用python早下班。如果觉得不错，对你工作中有帮助，请加我微信公众号flypython，我们一起探讨python相关问题</em></p>\n<p>  <img src=\"https://flypython.com/images/wechat.png\" alt=\"flypython微信公众号\"></p>\n","site":{"data":{}},"excerpt":"","more":"<p>使用 Python 生成《红楼梦》词云</p>\n<p><img src=\"http://jcjview.github.io/img/1210058744_15500375990201n.jpg\" alt></p>\n<p>本文介绍如何使用python绘制《红楼梦》的词云。</p>\n<blockquote>\n<p>“词云”就是对网络文本中出现频率较高的“关键词”予以视觉上的突出，形成“关键词云层”或“关键词渲染”，从而过滤掉大量的文本信息，使浏览网页者只要一眼扫过文本就可以领略文本的主旨。<br><a href=\"http://media.people.com.cn/GB/22100/61748/61749/4281906.html\" target=\"_blank\" rel=\"noopener\">“词云”——网络内容发布新招式  ．人民网</a></p>\n</blockquote>\n<h2 id=\"0-摘要\"><a href=\"#0-摘要\" class=\"headerlink\" title=\"0.摘要\"></a>0.摘要</h2><p><strong>本文建议在电脑上打开，边阅读边操作。</strong></p>\n<ol>\n<li>安装python词云工具wordcloud，画图软件matplotlib</li>\n<li>准备红楼梦文本</li>\n<li>编写python代码并运行</li>\n<li>展示词云结果</li>\n</ol>\n<h2 id=\"1-安装wordcloud\"><a href=\"#1-安装wordcloud\" class=\"headerlink\" title=\"1.安装wordcloud\"></a>1.安装wordcloud</h2><p>可以在cmd窗口输入<figure class=\"highlight plain\"><figcaption><span>install wordcloud  matplotlib```</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">![](http://jcjview.github.io/img/wordcloud001.png)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">## 2.准备红楼梦文本</span><br><span class=\"line\"></span><br><span class=\"line\">文本可以用下面链接下载</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">`https://github.com/flypythoncom/flypython/blob/master/wordcloud_hlm_seg.txt`</span><br><span class=\"line\"></span><br><span class=\"line\">或者可以自己写代码，对文本进行清洗，分词。</span><br><span class=\"line\">这里需要安装jieba分词，`pip install jieba`</span><br><span class=\"line\">``` python</span><br><span class=\"line\">import jieba</span><br><span class=\"line\">import re</span><br><span class=\"line\"></span><br><span class=\"line\">special_character_removal = re.compile(r&apos;[，。、【 】“”：；（）《》‘’&#123;&#125;？！⑦%&gt;℃.^-——=&amp;#@￥『』]&apos;, re.IGNORECASE)</span><br><span class=\"line\"></span><br><span class=\"line\">fw=open(&quot;hlm_seg.txt&quot;,&quot;w&quot;,encoding=&quot;utf-8&quot;)</span><br><span class=\"line\"></span><br><span class=\"line\">with open(&apos;hlm.txt&apos;,encoding=&quot;utf-8&quot;) as fp:</span><br><span class=\"line\">    for line in fp:</span><br><span class=\"line\">        l = special_character_removal.sub(&apos;&apos;, line.strip())</span><br><span class=\"line\">        words=jieba.cut(l)</span><br><span class=\"line\">        t=&quot; &quot;.join(words)</span><br><span class=\"line\">        fw.write(t)</span><br><span class=\"line\">        fw.write(&quot;\\n&quot;)</span><br><span class=\"line\"> </span><br><span class=\"line\">fw.close()</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"3-编写词云python代码并运行\"><a href=\"#3-编写词云python代码并运行\" class=\"headerlink\" title=\"3. 编写词云python代码并运行\"></a>3. 编写词云python代码并运行</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> os <span class=\"keyword\">import</span> path  </span><br><span class=\"line\"><span class=\"keyword\">from</span> wordcloud <span class=\"keyword\">import</span> WordCloud</span><br><span class=\"line\"></span><br><span class=\"line\">d = path.dirname(__file__)  </span><br><span class=\"line\"><span class=\"comment\"># Read the whole text.  </span></span><br><span class=\"line\">text = open(path.join(d, <span class=\"string\">'hlm_seg.txt'</span>),encoding=<span class=\"string\">\"utf-8\"</span>).read()  </span><br><span class=\"line\"><span class=\"comment\"># Generate a word cloud image  </span></span><br><span class=\"line\"><span class=\"comment\"># font=path.join(d, \"simkai.ttf\")  </span></span><br><span class=\"line\">font=<span class=\"string\">'C:/Windows/Fonts/simkai.ttf'</span>  </span><br><span class=\"line\">wordcloud = WordCloud(font_path=font,<span class=\"comment\">#设置中文字体，不指定就会出现中文不显示  </span></span><br><span class=\"line\">  width=<span class=\"number\">1024</span>,<span class=\"comment\">#宽  </span></span><br><span class=\"line\">  height=<span class=\"number\">840</span>,<span class=\"comment\">#高  </span></span><br><span class=\"line\">  background_color=<span class=\"string\">'white'</span>,<span class=\"comment\">#设置背景色   </span></span><br><span class=\"line\">  <span class=\"comment\"># max_words=100,#最大词汇数  </span></span><br><span class=\"line\">  <span class=\"comment\"># max_font_size=100#最大号字体  </span></span><br><span class=\"line\">  ).generate(text)  </span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"comment\"># Display the generated image:  </span></span><br><span class=\"line\"><span class=\"comment\"># the matplotlib way:  </span></span><br><span class=\"line\"><span class=\"keyword\">import</span> matplotlib.pyplot <span class=\"keyword\">as</span> plt  </span><br><span class=\"line\">  </span><br><span class=\"line\">plt.figure()  </span><br><span class=\"line\">plt.imshow(wordcloud)  </span><br><span class=\"line\">plt.axis(<span class=\"string\">\"off\"</span>)  </span><br><span class=\"line\">plt.show()</span><br></pre></td></tr></table></figure>\n\n<p>结果：</p>\n<p><img src=\"http://jcjview.github.io/img/Figure_1.png\" alt=\"词云运行结果\"></p>\n<p>后台回复“词云”获得完整运行代码</p>\n<p><em>人生苦短，我用python早下班。如果觉得不错，对你工作中有帮助，请加我微信公众号flypython，我们一起探讨python相关问题</em></p>\n<p>  <img src=\"https://flypython.com/images/wechat.png\" alt=\"flypython微信公众号\"></p>\n"},{"date":"2018-12-31T16:00:00.000Z","title":"Python写入Excel表格","subtitle":"极简Python自动化办公系列","cover":"/images/oa1.jpg","_content":"# 【极简Python 自动化办公】Python写入Excel表格\n\n\n\n>【极简Python 自动化办公】专栏是介绍如何利用python办公，减少工作负荷。篇幅精炼，内容易懂，无论是否有编程基础，都非常适合。\n\n\n\n在上次文章中，我们学习了【用python读取excel】，这次我们继续学习Python写excel吧！\n\n\n\n![](http://jcjview.github.io/img/flypythonpython-excel-tutorial.jpg)\n\n\n## 0.摘要\n\n**本文大约需要15分钟，建议在电脑上打开，边阅读边操作。**\n\n1. 安装Python读excel模块——xlwt\n2. 准备写入表格内容\n3. 编写python代码并运行\n4.使用for循环语句读取并写入excel表格\n\n## 1.安装xlwt\n\n与上篇文章类似，需要在cmd窗口输入```pip install xlwt```。\n![](http://jcjview.github.io/img/flypythonpythonexcelw2.png)\n\n## 2.准备写入表格内容\n\n这步很简单，只要想好输入内容即可，这里设计了一个简单的表格内容作为写入内容（目前这个内容还不存在）。\n\n| 序号  | 学号 |年龄 |\n| --- | --- |--- |\n| 张三 | 20190901 |11|\n| 李四 |20190902|12 |\n| 小明 | 20190903 |13 |\n\n## 3.编写python代码并运行\n\n新建一个writeexcel.py文件，用记事本或其他文本编辑工具打开。\n\n本次写入excel的思路是，新建文件->指定行列->写入内容。\n\n在文本编辑工具中输入如下代码，保存并关闭。\n\n```\nimport xlwt\n\nf = xlwt.Workbook()\nsheet1 = f.add_sheet('sheet1',cell_overwrite_ok=True)\ncolumn = [\"姓名\",\"学号\",\"年龄\"]\nname = [\"张三\",\"李四\",\"小明\"]\n\nschool_code = [20190901,20190902,20190903]\n\nage = [11,12,13]\n\nsheet1.write(0,0,column[0])#第1行第1列\nsheet1.write(0,1,column[1])#第3行第3列\nsheet1.write(0,2,column[2])#第2行第2列\n\n\nsheet1.write(1,0,name[0])#第2行第1列\nsheet1.write(1,1,school_code[0])#第2行第1列\nsheet1.write(1,2,age[0])#第3行第1列\n\n\nsheet1.write(2,0,name[1])\nsheet1.write(2,1,school_code[1])\nsheet1.write(2,2,age[1])\n\nsheet1.write(3,0,name[2])\nsheet1.write(3,1,school_code[2])\nsheet1.write(3,2,age[2])\n\n\nf.save('test1.xls')\n```\n\n还是一样，注意每句的开头不可以有空格，因为python用*缩进*来表示编程的层次，缩进不同就会报错了。\n\n\n在保存writeexcel.py的位置上打开cmd，运行 python writeexcel.py\n可以看到结果：\n![](http://jcjview.github.io/img/flypythonpythonexcelw4.png)\n![](http://jcjview.github.io/img/flypythonpythonexcelw5.png)\n\n\n## 4.使用for循环语句读取并写入excel表格\n\n非常好！您已经学会了如何读取和写入excel表格。\n\n但是，我们只能一个一个单元格读取和写入数据，这比手工操作excel表格快不了多少。\n\n接下来，我们需要学习使用for循环，来批量读取一个excel表格，并循环写入另一个excel表格中。\n\n不要删除test1.xls，在test1.xls文件的位置，新建一个rwexcel.py文件，将下面代码输入到文件中：\n\n```\nimport xlrd\nimport xlwt\n\nwb = xlrd.open_workbook(\"test1.xls\")#打开文件\nsheet1 = wb.sheet_by_index(0)#获取第一个表格\n\ncolumn = []#列名\n\ndata=[]\n\n#获取列名\ncolumn.append(sheet1.cell(0,0).value)#姓名\ncolumn.append(sheet1.cell(0,1).value)#学号\ncolumn.append(sheet1.cell(0,2).value)#年龄\n\nfor i in range(1,sheet1.nrows):#sheet1.nrows 行数\n    coldata=[]\n    coldata.append(sheet1.cell(i, 0).value)#姓名\n    coldata.append(int(sheet1.cell_value(i, 1)))#学号\n    coldata.append(sheet1.cell(i, 2).value)#年龄\n    data.append(coldata)\n\n\nf = xlwt.Workbook()\nsheetw = f.add_sheet('sheet1',cell_overwrite_ok=True)\n\nsheetw.write(0,0,column[0])#姓名\nsheetw.write(0,2,column[2])#学号\nsheetw.write(0,1,column[1])#年龄\n\nfor i in range(len(data)):\n    d=data[i]\n    sheetw.write(i+1, 0, d[0])  # 第2行第1列\n    sheetw.write(i+1, 1, d[1])  # 第2行第1列\n    sheetw.write(i+1, 2, d[2])  # 第3行第1列\n\nf.save('test2.xls')\n\n```\n\n运行后，会生成一个test2.xls，与test1.xls一模一样。\n\n\n\n*人生苦短，我用python早下班。如果觉得不错，对你工作中有帮助，请加我微信公众号flypython，我们一起探讨python相关问题*\n\n  ![flypython微信公众号](https://flypython.com/images/wechat.png)","source":"_posts/python-oa-01.md","raw":"---\ndate: 2019-01-01 00:00\ntitle:  Python写入Excel表格\nsubtitle: 极简Python自动化办公系列\ncover: /images/oa1.jpg\ncategories: [自动化办公]\n---\n# 【极简Python 自动化办公】Python写入Excel表格\n\n\n\n>【极简Python 自动化办公】专栏是介绍如何利用python办公，减少工作负荷。篇幅精炼，内容易懂，无论是否有编程基础，都非常适合。\n\n\n\n在上次文章中，我们学习了【用python读取excel】，这次我们继续学习Python写excel吧！\n\n\n\n![](http://jcjview.github.io/img/flypythonpython-excel-tutorial.jpg)\n\n\n## 0.摘要\n\n**本文大约需要15分钟，建议在电脑上打开，边阅读边操作。**\n\n1. 安装Python读excel模块——xlwt\n2. 准备写入表格内容\n3. 编写python代码并运行\n4.使用for循环语句读取并写入excel表格\n\n## 1.安装xlwt\n\n与上篇文章类似，需要在cmd窗口输入```pip install xlwt```。\n![](http://jcjview.github.io/img/flypythonpythonexcelw2.png)\n\n## 2.准备写入表格内容\n\n这步很简单，只要想好输入内容即可，这里设计了一个简单的表格内容作为写入内容（目前这个内容还不存在）。\n\n| 序号  | 学号 |年龄 |\n| --- | --- |--- |\n| 张三 | 20190901 |11|\n| 李四 |20190902|12 |\n| 小明 | 20190903 |13 |\n\n## 3.编写python代码并运行\n\n新建一个writeexcel.py文件，用记事本或其他文本编辑工具打开。\n\n本次写入excel的思路是，新建文件->指定行列->写入内容。\n\n在文本编辑工具中输入如下代码，保存并关闭。\n\n```\nimport xlwt\n\nf = xlwt.Workbook()\nsheet1 = f.add_sheet('sheet1',cell_overwrite_ok=True)\ncolumn = [\"姓名\",\"学号\",\"年龄\"]\nname = [\"张三\",\"李四\",\"小明\"]\n\nschool_code = [20190901,20190902,20190903]\n\nage = [11,12,13]\n\nsheet1.write(0,0,column[0])#第1行第1列\nsheet1.write(0,1,column[1])#第3行第3列\nsheet1.write(0,2,column[2])#第2行第2列\n\n\nsheet1.write(1,0,name[0])#第2行第1列\nsheet1.write(1,1,school_code[0])#第2行第1列\nsheet1.write(1,2,age[0])#第3行第1列\n\n\nsheet1.write(2,0,name[1])\nsheet1.write(2,1,school_code[1])\nsheet1.write(2,2,age[1])\n\nsheet1.write(3,0,name[2])\nsheet1.write(3,1,school_code[2])\nsheet1.write(3,2,age[2])\n\n\nf.save('test1.xls')\n```\n\n还是一样，注意每句的开头不可以有空格，因为python用*缩进*来表示编程的层次，缩进不同就会报错了。\n\n\n在保存writeexcel.py的位置上打开cmd，运行 python writeexcel.py\n可以看到结果：\n![](http://jcjview.github.io/img/flypythonpythonexcelw4.png)\n![](http://jcjview.github.io/img/flypythonpythonexcelw5.png)\n\n\n## 4.使用for循环语句读取并写入excel表格\n\n非常好！您已经学会了如何读取和写入excel表格。\n\n但是，我们只能一个一个单元格读取和写入数据，这比手工操作excel表格快不了多少。\n\n接下来，我们需要学习使用for循环，来批量读取一个excel表格，并循环写入另一个excel表格中。\n\n不要删除test1.xls，在test1.xls文件的位置，新建一个rwexcel.py文件，将下面代码输入到文件中：\n\n```\nimport xlrd\nimport xlwt\n\nwb = xlrd.open_workbook(\"test1.xls\")#打开文件\nsheet1 = wb.sheet_by_index(0)#获取第一个表格\n\ncolumn = []#列名\n\ndata=[]\n\n#获取列名\ncolumn.append(sheet1.cell(0,0).value)#姓名\ncolumn.append(sheet1.cell(0,1).value)#学号\ncolumn.append(sheet1.cell(0,2).value)#年龄\n\nfor i in range(1,sheet1.nrows):#sheet1.nrows 行数\n    coldata=[]\n    coldata.append(sheet1.cell(i, 0).value)#姓名\n    coldata.append(int(sheet1.cell_value(i, 1)))#学号\n    coldata.append(sheet1.cell(i, 2).value)#年龄\n    data.append(coldata)\n\n\nf = xlwt.Workbook()\nsheetw = f.add_sheet('sheet1',cell_overwrite_ok=True)\n\nsheetw.write(0,0,column[0])#姓名\nsheetw.write(0,2,column[2])#学号\nsheetw.write(0,1,column[1])#年龄\n\nfor i in range(len(data)):\n    d=data[i]\n    sheetw.write(i+1, 0, d[0])  # 第2行第1列\n    sheetw.write(i+1, 1, d[1])  # 第2行第1列\n    sheetw.write(i+1, 2, d[2])  # 第3行第1列\n\nf.save('test2.xls')\n\n```\n\n运行后，会生成一个test2.xls，与test1.xls一模一样。\n\n\n\n*人生苦短，我用python早下班。如果觉得不错，对你工作中有帮助，请加我微信公众号flypython，我们一起探讨python相关问题*\n\n  ![flypython微信公众号](https://flypython.com/images/wechat.png)","slug":"python-oa-01","published":1,"updated":"2020-01-02T03:36:48.389Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck4wdip880005wz1b91ml0hnn","content":"<h1 id=\"【极简Python-自动化办公】Python写入Excel表格\"><a href=\"#【极简Python-自动化办公】Python写入Excel表格\" class=\"headerlink\" title=\"【极简Python 自动化办公】Python写入Excel表格\"></a>【极简Python 自动化办公】Python写入Excel表格</h1><blockquote>\n<p>【极简Python 自动化办公】专栏是介绍如何利用python办公，减少工作负荷。篇幅精炼，内容易懂，无论是否有编程基础，都非常适合。</p>\n</blockquote>\n<p>在上次文章中，我们学习了【用python读取excel】，这次我们继续学习Python写excel吧！</p>\n<p><img src=\"http://jcjview.github.io/img/flypythonpython-excel-tutorial.jpg\" alt></p>\n<h2 id=\"0-摘要\"><a href=\"#0-摘要\" class=\"headerlink\" title=\"0.摘要\"></a>0.摘要</h2><p><strong>本文大约需要15分钟，建议在电脑上打开，边阅读边操作。</strong></p>\n<ol>\n<li>安装Python读excel模块——xlwt</li>\n<li>准备写入表格内容</li>\n<li>编写python代码并运行</li>\n<li>使用for循环语句读取并写入excel表格</li>\n</ol>\n<h2 id=\"1-安装xlwt\"><a href=\"#1-安装xlwt\" class=\"headerlink\" title=\"1.安装xlwt\"></a>1.安装xlwt</h2><p>与上篇文章类似，需要在cmd窗口输入<figure class=\"highlight plain\"><figcaption><span>install xlwt```。</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">![](http://jcjview.github.io/img/flypythonpythonexcelw2.png)</span><br><span class=\"line\"></span><br><span class=\"line\">## 2.准备写入表格内容</span><br><span class=\"line\"></span><br><span class=\"line\">这步很简单，只要想好输入内容即可，这里设计了一个简单的表格内容作为写入内容（目前这个内容还不存在）。</span><br><span class=\"line\"></span><br><span class=\"line\">| 序号  | 学号 |年龄 |</span><br><span class=\"line\">| --- | --- |--- |</span><br><span class=\"line\">| 张三 | 20190901 |11|</span><br><span class=\"line\">| 李四 |20190902|12 |</span><br><span class=\"line\">| 小明 | 20190903 |13 |</span><br><span class=\"line\"></span><br><span class=\"line\">## 3.编写python代码并运行</span><br><span class=\"line\"></span><br><span class=\"line\">新建一个writeexcel.py文件，用记事本或其他文本编辑工具打开。</span><br><span class=\"line\"></span><br><span class=\"line\">本次写入excel的思路是，新建文件-&gt;指定行列-&gt;写入内容。</span><br><span class=\"line\"></span><br><span class=\"line\">在文本编辑工具中输入如下代码，保存并关闭。</span><br></pre></td></tr></table></figure></p>\n<p>import xlwt</p>\n<p>f = xlwt.Workbook()<br>sheet1 = f.add_sheet(‘sheet1’,cell_overwrite_ok=True)<br>column = [“姓名”,”学号”,”年龄”]<br>name = [“张三”,”李四”,”小明”]</p>\n<p>school_code = [20190901,20190902,20190903]</p>\n<p>age = [11,12,13]</p>\n<p>sheet1.write(0,0,column[0])#第1行第1列<br>sheet1.write(0,1,column[1])#第3行第3列<br>sheet1.write(0,2,column[2])#第2行第2列</p>\n<p>sheet1.write(1,0,name[0])#第2行第1列<br>sheet1.write(1,1,school_code[0])#第2行第1列<br>sheet1.write(1,2,age[0])#第3行第1列</p>\n<p>sheet1.write(2,0,name[1])<br>sheet1.write(2,1,school_code[1])<br>sheet1.write(2,2,age[1])</p>\n<p>sheet1.write(3,0,name[2])<br>sheet1.write(3,1,school_code[2])<br>sheet1.write(3,2,age[2])</p>\n<p>f.save(‘test1.xls’)</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">还是一样，注意每句的开头不可以有空格，因为python用*缩进*来表示编程的层次，缩进不同就会报错了。</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">在保存writeexcel.py的位置上打开cmd，运行 python writeexcel.py</span><br><span class=\"line\">可以看到结果：</span><br><span class=\"line\">![](http://jcjview.github.io/img/flypythonpythonexcelw4.png)</span><br><span class=\"line\">![](http://jcjview.github.io/img/flypythonpythonexcelw5.png)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">## 4.使用for循环语句读取并写入excel表格</span><br><span class=\"line\"></span><br><span class=\"line\">非常好！您已经学会了如何读取和写入excel表格。</span><br><span class=\"line\"></span><br><span class=\"line\">但是，我们只能一个一个单元格读取和写入数据，这比手工操作excel表格快不了多少。</span><br><span class=\"line\"></span><br><span class=\"line\">接下来，我们需要学习使用for循环，来批量读取一个excel表格，并循环写入另一个excel表格中。</span><br><span class=\"line\"></span><br><span class=\"line\">不要删除test1.xls，在test1.xls文件的位置，新建一个rwexcel.py文件，将下面代码输入到文件中：</span><br></pre></td></tr></table></figure>\n\n<p>import xlrd<br>import xlwt</p>\n<p>wb = xlrd.open_workbook(“test1.xls”)#打开文件<br>sheet1 = wb.sheet_by_index(0)#获取第一个表格</p>\n<p>column = []#列名</p>\n<p>data=[]</p>\n<p>#获取列名<br>column.append(sheet1.cell(0,0).value)#姓名<br>column.append(sheet1.cell(0,1).value)#学号<br>column.append(sheet1.cell(0,2).value)#年龄</p>\n<p>for i in range(1,sheet1.nrows):#sheet1.nrows 行数<br>    coldata=[]<br>    coldata.append(sheet1.cell(i, 0).value)#姓名<br>    coldata.append(int(sheet1.cell_value(i, 1)))#学号<br>    coldata.append(sheet1.cell(i, 2).value)#年龄<br>    data.append(coldata)</p>\n<p>f = xlwt.Workbook()<br>sheetw = f.add_sheet(‘sheet1’,cell_overwrite_ok=True)</p>\n<p>sheetw.write(0,0,column[0])#姓名<br>sheetw.write(0,2,column[2])#学号<br>sheetw.write(0,1,column[1])#年龄</p>\n<p>for i in range(len(data)):<br>    d=data[i]<br>    sheetw.write(i+1, 0, d[0])  # 第2行第1列<br>    sheetw.write(i+1, 1, d[1])  # 第2行第1列<br>    sheetw.write(i+1, 2, d[2])  # 第3行第1列</p>\n<p>f.save(‘test2.xls’)</p>\n<p>```</p>\n<p>运行后，会生成一个test2.xls，与test1.xls一模一样。</p>\n<p><em>人生苦短，我用python早下班。如果觉得不错，对你工作中有帮助，请加我微信公众号flypython，我们一起探讨python相关问题</em></p>\n<p>  <img src=\"https://flypython.com/images/wechat.png\" alt=\"flypython微信公众号\"></p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"【极简Python-自动化办公】Python写入Excel表格\"><a href=\"#【极简Python-自动化办公】Python写入Excel表格\" class=\"headerlink\" title=\"【极简Python 自动化办公】Python写入Excel表格\"></a>【极简Python 自动化办公】Python写入Excel表格</h1><blockquote>\n<p>【极简Python 自动化办公】专栏是介绍如何利用python办公，减少工作负荷。篇幅精炼，内容易懂，无论是否有编程基础，都非常适合。</p>\n</blockquote>\n<p>在上次文章中，我们学习了【用python读取excel】，这次我们继续学习Python写excel吧！</p>\n<p><img src=\"http://jcjview.github.io/img/flypythonpython-excel-tutorial.jpg\" alt></p>\n<h2 id=\"0-摘要\"><a href=\"#0-摘要\" class=\"headerlink\" title=\"0.摘要\"></a>0.摘要</h2><p><strong>本文大约需要15分钟，建议在电脑上打开，边阅读边操作。</strong></p>\n<ol>\n<li>安装Python读excel模块——xlwt</li>\n<li>准备写入表格内容</li>\n<li>编写python代码并运行</li>\n<li>使用for循环语句读取并写入excel表格</li>\n</ol>\n<h2 id=\"1-安装xlwt\"><a href=\"#1-安装xlwt\" class=\"headerlink\" title=\"1.安装xlwt\"></a>1.安装xlwt</h2><p>与上篇文章类似，需要在cmd窗口输入<figure class=\"highlight plain\"><figcaption><span>install xlwt```。</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">![](http://jcjview.github.io/img/flypythonpythonexcelw2.png)</span><br><span class=\"line\"></span><br><span class=\"line\">## 2.准备写入表格内容</span><br><span class=\"line\"></span><br><span class=\"line\">这步很简单，只要想好输入内容即可，这里设计了一个简单的表格内容作为写入内容（目前这个内容还不存在）。</span><br><span class=\"line\"></span><br><span class=\"line\">| 序号  | 学号 |年龄 |</span><br><span class=\"line\">| --- | --- |--- |</span><br><span class=\"line\">| 张三 | 20190901 |11|</span><br><span class=\"line\">| 李四 |20190902|12 |</span><br><span class=\"line\">| 小明 | 20190903 |13 |</span><br><span class=\"line\"></span><br><span class=\"line\">## 3.编写python代码并运行</span><br><span class=\"line\"></span><br><span class=\"line\">新建一个writeexcel.py文件，用记事本或其他文本编辑工具打开。</span><br><span class=\"line\"></span><br><span class=\"line\">本次写入excel的思路是，新建文件-&gt;指定行列-&gt;写入内容。</span><br><span class=\"line\"></span><br><span class=\"line\">在文本编辑工具中输入如下代码，保存并关闭。</span><br></pre></td></tr></table></figure></p>\n<p>import xlwt</p>\n<p>f = xlwt.Workbook()<br>sheet1 = f.add_sheet(‘sheet1’,cell_overwrite_ok=True)<br>column = [“姓名”,”学号”,”年龄”]<br>name = [“张三”,”李四”,”小明”]</p>\n<p>school_code = [20190901,20190902,20190903]</p>\n<p>age = [11,12,13]</p>\n<p>sheet1.write(0,0,column[0])#第1行第1列<br>sheet1.write(0,1,column[1])#第3行第3列<br>sheet1.write(0,2,column[2])#第2行第2列</p>\n<p>sheet1.write(1,0,name[0])#第2行第1列<br>sheet1.write(1,1,school_code[0])#第2行第1列<br>sheet1.write(1,2,age[0])#第3行第1列</p>\n<p>sheet1.write(2,0,name[1])<br>sheet1.write(2,1,school_code[1])<br>sheet1.write(2,2,age[1])</p>\n<p>sheet1.write(3,0,name[2])<br>sheet1.write(3,1,school_code[2])<br>sheet1.write(3,2,age[2])</p>\n<p>f.save(‘test1.xls’)</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">还是一样，注意每句的开头不可以有空格，因为python用*缩进*来表示编程的层次，缩进不同就会报错了。</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">在保存writeexcel.py的位置上打开cmd，运行 python writeexcel.py</span><br><span class=\"line\">可以看到结果：</span><br><span class=\"line\">![](http://jcjview.github.io/img/flypythonpythonexcelw4.png)</span><br><span class=\"line\">![](http://jcjview.github.io/img/flypythonpythonexcelw5.png)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">## 4.使用for循环语句读取并写入excel表格</span><br><span class=\"line\"></span><br><span class=\"line\">非常好！您已经学会了如何读取和写入excel表格。</span><br><span class=\"line\"></span><br><span class=\"line\">但是，我们只能一个一个单元格读取和写入数据，这比手工操作excel表格快不了多少。</span><br><span class=\"line\"></span><br><span class=\"line\">接下来，我们需要学习使用for循环，来批量读取一个excel表格，并循环写入另一个excel表格中。</span><br><span class=\"line\"></span><br><span class=\"line\">不要删除test1.xls，在test1.xls文件的位置，新建一个rwexcel.py文件，将下面代码输入到文件中：</span><br></pre></td></tr></table></figure>\n\n<p>import xlrd<br>import xlwt</p>\n<p>wb = xlrd.open_workbook(“test1.xls”)#打开文件<br>sheet1 = wb.sheet_by_index(0)#获取第一个表格</p>\n<p>column = []#列名</p>\n<p>data=[]</p>\n<p>#获取列名<br>column.append(sheet1.cell(0,0).value)#姓名<br>column.append(sheet1.cell(0,1).value)#学号<br>column.append(sheet1.cell(0,2).value)#年龄</p>\n<p>for i in range(1,sheet1.nrows):#sheet1.nrows 行数<br>    coldata=[]<br>    coldata.append(sheet1.cell(i, 0).value)#姓名<br>    coldata.append(int(sheet1.cell_value(i, 1)))#学号<br>    coldata.append(sheet1.cell(i, 2).value)#年龄<br>    data.append(coldata)</p>\n<p>f = xlwt.Workbook()<br>sheetw = f.add_sheet(‘sheet1’,cell_overwrite_ok=True)</p>\n<p>sheetw.write(0,0,column[0])#姓名<br>sheetw.write(0,2,column[2])#学号<br>sheetw.write(0,1,column[1])#年龄</p>\n<p>for i in range(len(data)):<br>    d=data[i]<br>    sheetw.write(i+1, 0, d[0])  # 第2行第1列<br>    sheetw.write(i+1, 1, d[1])  # 第2行第1列<br>    sheetw.write(i+1, 2, d[2])  # 第3行第1列</p>\n<p>f.save(‘test2.xls’)</p>\n<p>```</p>\n<p>运行后，会生成一个test2.xls，与test1.xls一模一样。</p>\n<p><em>人生苦短，我用python早下班。如果觉得不错，对你工作中有帮助，请加我微信公众号flypython，我们一起探讨python相关问题</em></p>\n<p>  <img src=\"https://flypython.com/images/wechat.png\" alt=\"flypython微信公众号\"></p>\n"},{"date":"2019-01-03T16:00:00.000Z","title":"Python读取PDF文字和表格","subtitle":"极简Python自动化办公系列","cover":"/images/oa4.jpg","_content":">【极简Python 自动化办公】专栏是介绍如何利用python办公，减少工作负荷。篇幅精炼，内容易懂，无论是否有编程基础，都非常适合。\n\n\n在日常的工作中，处理PDF是最平常不过的事情了。今天带来极简Python自动化办公系列之使用Python提取Pdf文字和表格，希望能够在PDF处理上帮到你。\n\n\n这次我们准备了一个pdf测试文件，内容如下：\n\n![](https://tva1.sinaimg.cn/large/006y8mN6ly1g8e0nlr7gdj30kc0zcjua.jpg)\n\n\n\npdf中包括了2页，有文字，图片和表格，覆盖了大部分pdf的场景。\n\n\n\n#### pdfplumber介绍\n\nPdfplumber是一个可以处理pdf格式信息的库。它可以查找关于每个文本字符、矩阵、和行的详细信息，也可以对表格进行提取并进行可视化调试。\n\n官方repo:\n    `https://github.com/jsvine/pdfplumber`\n\n安装：\n`pip install pdfplumber`\n\n\n#### 使用入门\n\n```\nimport pdfplumber\n\t\nwith pdfplumber.open(\"test.pdf\") as pdf:\n\tfirst_page = pdf.pages[0] #取第一页\n\tprint(first_page.chars[0])#打印第一页第一个字文字信息\n\n```\n\n\n结果：\n\n```\n{'fontname': 'CRSMRF+PingFangTC-Semibold', 'adv': Decimal('1.000'), 'upright': 1, 'x0': Decimal('57.000'), 'y0': Decimal('751.840'), 'x1': Decimal('81.000'), 'y1': Decimal('779.776'), 'width': Decimal('24.000'), 'height': Decimal('27.936'), 'size': Decimal('27.936'), 'object_type': 'char', 'page_number': 1, 'text': '关', 'top': Decimal('62.224'), 'bottom': Decimal('90.160'), 'doctop': Decimal('62.224')}\n```\n\n\n格式化之后：\n\n![](https://tva1.sinaimg.cn/large/006y8mN6ly1g8e0nm8qvij30kq0hi0um.jpg)\n\n\n```\n{\n\t    \"fontname\":\"CRSMRF+PingFangTC-Semibold\",\n\t    \"adv\":\"1.000\",\n\t    \"upright\":1,\n\t    \"x0\":\"57.000\",\n\t    \"y0\":\"751.840\",\n\t    \"x1\":\"81.000\",\n\t    \"y1\":\"779.776\",\n\t    \"width\":\"24.000\",\n\t    \"height\":\"27.936\",\n\t    \"size\":\"27.936\",\n\t    \"object_type\":\"char\",\n\t    \"page_number\":1,  #页数\n\t    \"text\":\"关\",  #第一个文字\n\t    \"top\":\"62.224\",\n\t    \"bottom\":\"90.160\",\n\t    \"doctop\":\"62.224\"\n}\n\n```\n\n\n\n\n#### 常用方法\n\n- extract_text() 用来提页面中的文本，将页面的所有字符对象整理为一个字符串\n- extract_words() 返回的是所有的单词及其相关信息\n- extract_tables() 提取页面的表格\n\n\n\n#### 提取文字\n\n```\n#!/usr/bin/env python3\n\nimport pdfplumber\n\nwith pdfplumber.open(\"test.pdf\") as pdf:\n\tfirst_page = pdf.pages[0]\n\ttext = first_page.extract_text() #提取第一页的所有文字\n\tprint(text)\n\n```\n\n![](https://tva1.sinaimg.cn/large/006y8mN6ly1g8e0nmzq4wj30r007wgms.jpg)\n\n\n```\n关于我们\n关于FlyPython\nFlyPython是提供⼀站式Python编程学习的组织，我们致⼒于为⽤户提供⾼\n效，有趣的学习环境，打造专注于Python的中⽂学习社区。\n联系我们\n客服&合作: 微信号 flypython\n微信公众号：\n\n```\n\n#### 提取表格\n\n```\n#!/usr/bin/env python3\n\nimport pdfplumber\nimport pandas as pd\n\nwith pdfplumber.open(\"test.pdf\") as pdf:\n    first_page = pdf.pages[0]\n    text = first_page.extract_text()\n    print(text)\n\n    second_page = pdf.pages[1] #第二页\n    table = second_page.extract_tables()#在第二页提取表格\n    for t in table:\n        df = pd.DataFrame(t[1:],columns=t[0])\n        print(df)\n```\n\n\n![](https://tva1.sinaimg.cn/large/006y8mN6ly1g8e0no9hykj30po0f8wg9.jpg)\n\n\n\n```\n         分类                 书名\n0  Python入门  Python编程：从入门到\\n实践\n1  Python中级          流畅的Python\n2\n3\n```\n\n#### 总结\n\npdfplumber的接口还是很容易的，如果只是需要提取文字，几行代码就可以提取到。如果是表格并没有提取出来或者错误的提取了非表格的内容，你需要在提取表格时加入`table_settings`参数来指定表格的设置。\n\n\n这次的demo中，图片并没有提取出来，pdf图片的提取会放到下一篇文章，敬请期待。\n\n\n\n*人生苦短，我用python早下班。如果觉得不错，对你工作中有帮助，可以长按下列二维码关注我们的公众号。*\n\n  ![flypython微信公众号](https://flypython.com/images/wechat.png)","source":"_posts/python-oa-04.md","raw":"---\ndate: 2019-01-04 00:00\ntitle:  Python读取PDF文字和表格\nsubtitle: 极简Python自动化办公系列\ncover: /images/oa4.jpg\ncategories: [自动化办公]\n---\n>【极简Python 自动化办公】专栏是介绍如何利用python办公，减少工作负荷。篇幅精炼，内容易懂，无论是否有编程基础，都非常适合。\n\n\n在日常的工作中，处理PDF是最平常不过的事情了。今天带来极简Python自动化办公系列之使用Python提取Pdf文字和表格，希望能够在PDF处理上帮到你。\n\n\n这次我们准备了一个pdf测试文件，内容如下：\n\n![](https://tva1.sinaimg.cn/large/006y8mN6ly1g8e0nlr7gdj30kc0zcjua.jpg)\n\n\n\npdf中包括了2页，有文字，图片和表格，覆盖了大部分pdf的场景。\n\n\n\n#### pdfplumber介绍\n\nPdfplumber是一个可以处理pdf格式信息的库。它可以查找关于每个文本字符、矩阵、和行的详细信息，也可以对表格进行提取并进行可视化调试。\n\n官方repo:\n    `https://github.com/jsvine/pdfplumber`\n\n安装：\n`pip install pdfplumber`\n\n\n#### 使用入门\n\n```\nimport pdfplumber\n\t\nwith pdfplumber.open(\"test.pdf\") as pdf:\n\tfirst_page = pdf.pages[0] #取第一页\n\tprint(first_page.chars[0])#打印第一页第一个字文字信息\n\n```\n\n\n结果：\n\n```\n{'fontname': 'CRSMRF+PingFangTC-Semibold', 'adv': Decimal('1.000'), 'upright': 1, 'x0': Decimal('57.000'), 'y0': Decimal('751.840'), 'x1': Decimal('81.000'), 'y1': Decimal('779.776'), 'width': Decimal('24.000'), 'height': Decimal('27.936'), 'size': Decimal('27.936'), 'object_type': 'char', 'page_number': 1, 'text': '关', 'top': Decimal('62.224'), 'bottom': Decimal('90.160'), 'doctop': Decimal('62.224')}\n```\n\n\n格式化之后：\n\n![](https://tva1.sinaimg.cn/large/006y8mN6ly1g8e0nm8qvij30kq0hi0um.jpg)\n\n\n```\n{\n\t    \"fontname\":\"CRSMRF+PingFangTC-Semibold\",\n\t    \"adv\":\"1.000\",\n\t    \"upright\":1,\n\t    \"x0\":\"57.000\",\n\t    \"y0\":\"751.840\",\n\t    \"x1\":\"81.000\",\n\t    \"y1\":\"779.776\",\n\t    \"width\":\"24.000\",\n\t    \"height\":\"27.936\",\n\t    \"size\":\"27.936\",\n\t    \"object_type\":\"char\",\n\t    \"page_number\":1,  #页数\n\t    \"text\":\"关\",  #第一个文字\n\t    \"top\":\"62.224\",\n\t    \"bottom\":\"90.160\",\n\t    \"doctop\":\"62.224\"\n}\n\n```\n\n\n\n\n#### 常用方法\n\n- extract_text() 用来提页面中的文本，将页面的所有字符对象整理为一个字符串\n- extract_words() 返回的是所有的单词及其相关信息\n- extract_tables() 提取页面的表格\n\n\n\n#### 提取文字\n\n```\n#!/usr/bin/env python3\n\nimport pdfplumber\n\nwith pdfplumber.open(\"test.pdf\") as pdf:\n\tfirst_page = pdf.pages[0]\n\ttext = first_page.extract_text() #提取第一页的所有文字\n\tprint(text)\n\n```\n\n![](https://tva1.sinaimg.cn/large/006y8mN6ly1g8e0nmzq4wj30r007wgms.jpg)\n\n\n```\n关于我们\n关于FlyPython\nFlyPython是提供⼀站式Python编程学习的组织，我们致⼒于为⽤户提供⾼\n效，有趣的学习环境，打造专注于Python的中⽂学习社区。\n联系我们\n客服&合作: 微信号 flypython\n微信公众号：\n\n```\n\n#### 提取表格\n\n```\n#!/usr/bin/env python3\n\nimport pdfplumber\nimport pandas as pd\n\nwith pdfplumber.open(\"test.pdf\") as pdf:\n    first_page = pdf.pages[0]\n    text = first_page.extract_text()\n    print(text)\n\n    second_page = pdf.pages[1] #第二页\n    table = second_page.extract_tables()#在第二页提取表格\n    for t in table:\n        df = pd.DataFrame(t[1:],columns=t[0])\n        print(df)\n```\n\n\n![](https://tva1.sinaimg.cn/large/006y8mN6ly1g8e0no9hykj30po0f8wg9.jpg)\n\n\n\n```\n         分类                 书名\n0  Python入门  Python编程：从入门到\\n实践\n1  Python中级          流畅的Python\n2\n3\n```\n\n#### 总结\n\npdfplumber的接口还是很容易的，如果只是需要提取文字，几行代码就可以提取到。如果是表格并没有提取出来或者错误的提取了非表格的内容，你需要在提取表格时加入`table_settings`参数来指定表格的设置。\n\n\n这次的demo中，图片并没有提取出来，pdf图片的提取会放到下一篇文章，敬请期待。\n\n\n\n*人生苦短，我用python早下班。如果觉得不错，对你工作中有帮助，可以长按下列二维码关注我们的公众号。*\n\n  ![flypython微信公众号](https://flypython.com/images/wechat.png)","slug":"python-oa-04","published":1,"updated":"2020-01-02T03:49:28.301Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck4wdip890007wz1bjrd5ptcg","content":"<blockquote>\n<p>【极简Python 自动化办公】专栏是介绍如何利用python办公，减少工作负荷。篇幅精炼，内容易懂，无论是否有编程基础，都非常适合。</p>\n</blockquote>\n<p>在日常的工作中，处理PDF是最平常不过的事情了。今天带来极简Python自动化办公系列之使用Python提取Pdf文字和表格，希望能够在PDF处理上帮到你。</p>\n<p>这次我们准备了一个pdf测试文件，内容如下：</p>\n<p><img src=\"https://tva1.sinaimg.cn/large/006y8mN6ly1g8e0nlr7gdj30kc0zcjua.jpg\" alt></p>\n<p>pdf中包括了2页，有文字，图片和表格，覆盖了大部分pdf的场景。</p>\n<h4 id=\"pdfplumber介绍\"><a href=\"#pdfplumber介绍\" class=\"headerlink\" title=\"pdfplumber介绍\"></a>pdfplumber介绍</h4><p>Pdfplumber是一个可以处理pdf格式信息的库。它可以查找关于每个文本字符、矩阵、和行的详细信息，也可以对表格进行提取并进行可视化调试。</p>\n<p>官方repo:<br>    <code>https://github.com/jsvine/pdfplumber</code></p>\n<p>安装：<br><code>pip install pdfplumber</code></p>\n<h4 id=\"使用入门\"><a href=\"#使用入门\" class=\"headerlink\" title=\"使用入门\"></a>使用入门</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import pdfplumber</span><br><span class=\"line\">\t</span><br><span class=\"line\">with pdfplumber.open(&quot;test.pdf&quot;) as pdf:</span><br><span class=\"line\">\tfirst_page = pdf.pages[0] #取第一页</span><br><span class=\"line\">\tprint(first_page.chars[0])#打印第一页第一个字文字信息</span><br></pre></td></tr></table></figure>\n\n<p>结果：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;&apos;fontname&apos;: &apos;CRSMRF+PingFangTC-Semibold&apos;, &apos;adv&apos;: Decimal(&apos;1.000&apos;), &apos;upright&apos;: 1, &apos;x0&apos;: Decimal(&apos;57.000&apos;), &apos;y0&apos;: Decimal(&apos;751.840&apos;), &apos;x1&apos;: Decimal(&apos;81.000&apos;), &apos;y1&apos;: Decimal(&apos;779.776&apos;), &apos;width&apos;: Decimal(&apos;24.000&apos;), &apos;height&apos;: Decimal(&apos;27.936&apos;), &apos;size&apos;: Decimal(&apos;27.936&apos;), &apos;object_type&apos;: &apos;char&apos;, &apos;page_number&apos;: 1, &apos;text&apos;: &apos;关&apos;, &apos;top&apos;: Decimal(&apos;62.224&apos;), &apos;bottom&apos;: Decimal(&apos;90.160&apos;), &apos;doctop&apos;: Decimal(&apos;62.224&apos;)&#125;</span><br></pre></td></tr></table></figure>\n\n<p>格式化之后：</p>\n<p><img src=\"https://tva1.sinaimg.cn/large/006y8mN6ly1g8e0nm8qvij30kq0hi0um.jpg\" alt></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">\t    &quot;fontname&quot;:&quot;CRSMRF+PingFangTC-Semibold&quot;,</span><br><span class=\"line\">\t    &quot;adv&quot;:&quot;1.000&quot;,</span><br><span class=\"line\">\t    &quot;upright&quot;:1,</span><br><span class=\"line\">\t    &quot;x0&quot;:&quot;57.000&quot;,</span><br><span class=\"line\">\t    &quot;y0&quot;:&quot;751.840&quot;,</span><br><span class=\"line\">\t    &quot;x1&quot;:&quot;81.000&quot;,</span><br><span class=\"line\">\t    &quot;y1&quot;:&quot;779.776&quot;,</span><br><span class=\"line\">\t    &quot;width&quot;:&quot;24.000&quot;,</span><br><span class=\"line\">\t    &quot;height&quot;:&quot;27.936&quot;,</span><br><span class=\"line\">\t    &quot;size&quot;:&quot;27.936&quot;,</span><br><span class=\"line\">\t    &quot;object_type&quot;:&quot;char&quot;,</span><br><span class=\"line\">\t    &quot;page_number&quot;:1,  #页数</span><br><span class=\"line\">\t    &quot;text&quot;:&quot;关&quot;,  #第一个文字</span><br><span class=\"line\">\t    &quot;top&quot;:&quot;62.224&quot;,</span><br><span class=\"line\">\t    &quot;bottom&quot;:&quot;90.160&quot;,</span><br><span class=\"line\">\t    &quot;doctop&quot;:&quot;62.224&quot;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"常用方法\"><a href=\"#常用方法\" class=\"headerlink\" title=\"常用方法\"></a>常用方法</h4><ul>\n<li>extract_text() 用来提页面中的文本，将页面的所有字符对象整理为一个字符串</li>\n<li>extract_words() 返回的是所有的单词及其相关信息</li>\n<li>extract_tables() 提取页面的表格</li>\n</ul>\n<h4 id=\"提取文字\"><a href=\"#提取文字\" class=\"headerlink\" title=\"提取文字\"></a>提取文字</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#!/usr/bin/env python3</span><br><span class=\"line\"></span><br><span class=\"line\">import pdfplumber</span><br><span class=\"line\"></span><br><span class=\"line\">with pdfplumber.open(&quot;test.pdf&quot;) as pdf:</span><br><span class=\"line\">\tfirst_page = pdf.pages[0]</span><br><span class=\"line\">\ttext = first_page.extract_text() #提取第一页的所有文字</span><br><span class=\"line\">\tprint(text)</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://tva1.sinaimg.cn/large/006y8mN6ly1g8e0nmzq4wj30r007wgms.jpg\" alt></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">关于我们</span><br><span class=\"line\">关于FlyPython</span><br><span class=\"line\">FlyPython是提供⼀站式Python编程学习的组织，我们致⼒于为⽤户提供⾼</span><br><span class=\"line\">效，有趣的学习环境，打造专注于Python的中⽂学习社区。</span><br><span class=\"line\">联系我们</span><br><span class=\"line\">客服&amp;合作: 微信号 flypython</span><br><span class=\"line\">微信公众号：</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"提取表格\"><a href=\"#提取表格\" class=\"headerlink\" title=\"提取表格\"></a>提取表格</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#!/usr/bin/env python3</span><br><span class=\"line\"></span><br><span class=\"line\">import pdfplumber</span><br><span class=\"line\">import pandas as pd</span><br><span class=\"line\"></span><br><span class=\"line\">with pdfplumber.open(&quot;test.pdf&quot;) as pdf:</span><br><span class=\"line\">    first_page = pdf.pages[0]</span><br><span class=\"line\">    text = first_page.extract_text()</span><br><span class=\"line\">    print(text)</span><br><span class=\"line\"></span><br><span class=\"line\">    second_page = pdf.pages[1] #第二页</span><br><span class=\"line\">    table = second_page.extract_tables()#在第二页提取表格</span><br><span class=\"line\">    for t in table:</span><br><span class=\"line\">        df = pd.DataFrame(t[1:],columns=t[0])</span><br><span class=\"line\">        print(df)</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://tva1.sinaimg.cn/large/006y8mN6ly1g8e0no9hykj30po0f8wg9.jpg\" alt></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">         分类                 书名</span><br><span class=\"line\">0  Python入门  Python编程：从入门到\\n实践</span><br><span class=\"line\">1  Python中级          流畅的Python</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h4><p>pdfplumber的接口还是很容易的，如果只是需要提取文字，几行代码就可以提取到。如果是表格并没有提取出来或者错误的提取了非表格的内容，你需要在提取表格时加入<code>table_settings</code>参数来指定表格的设置。</p>\n<p>这次的demo中，图片并没有提取出来，pdf图片的提取会放到下一篇文章，敬请期待。</p>\n<p><em>人生苦短，我用python早下班。如果觉得不错，对你工作中有帮助，可以长按下列二维码关注我们的公众号。</em></p>\n<p>  <img src=\"https://flypython.com/images/wechat.png\" alt=\"flypython微信公众号\"></p>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>【极简Python 自动化办公】专栏是介绍如何利用python办公，减少工作负荷。篇幅精炼，内容易懂，无论是否有编程基础，都非常适合。</p>\n</blockquote>\n<p>在日常的工作中，处理PDF是最平常不过的事情了。今天带来极简Python自动化办公系列之使用Python提取Pdf文字和表格，希望能够在PDF处理上帮到你。</p>\n<p>这次我们准备了一个pdf测试文件，内容如下：</p>\n<p><img src=\"https://tva1.sinaimg.cn/large/006y8mN6ly1g8e0nlr7gdj30kc0zcjua.jpg\" alt></p>\n<p>pdf中包括了2页，有文字，图片和表格，覆盖了大部分pdf的场景。</p>\n<h4 id=\"pdfplumber介绍\"><a href=\"#pdfplumber介绍\" class=\"headerlink\" title=\"pdfplumber介绍\"></a>pdfplumber介绍</h4><p>Pdfplumber是一个可以处理pdf格式信息的库。它可以查找关于每个文本字符、矩阵、和行的详细信息，也可以对表格进行提取并进行可视化调试。</p>\n<p>官方repo:<br>    <code>https://github.com/jsvine/pdfplumber</code></p>\n<p>安装：<br><code>pip install pdfplumber</code></p>\n<h4 id=\"使用入门\"><a href=\"#使用入门\" class=\"headerlink\" title=\"使用入门\"></a>使用入门</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import pdfplumber</span><br><span class=\"line\">\t</span><br><span class=\"line\">with pdfplumber.open(&quot;test.pdf&quot;) as pdf:</span><br><span class=\"line\">\tfirst_page = pdf.pages[0] #取第一页</span><br><span class=\"line\">\tprint(first_page.chars[0])#打印第一页第一个字文字信息</span><br></pre></td></tr></table></figure>\n\n<p>结果：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;&apos;fontname&apos;: &apos;CRSMRF+PingFangTC-Semibold&apos;, &apos;adv&apos;: Decimal(&apos;1.000&apos;), &apos;upright&apos;: 1, &apos;x0&apos;: Decimal(&apos;57.000&apos;), &apos;y0&apos;: Decimal(&apos;751.840&apos;), &apos;x1&apos;: Decimal(&apos;81.000&apos;), &apos;y1&apos;: Decimal(&apos;779.776&apos;), &apos;width&apos;: Decimal(&apos;24.000&apos;), &apos;height&apos;: Decimal(&apos;27.936&apos;), &apos;size&apos;: Decimal(&apos;27.936&apos;), &apos;object_type&apos;: &apos;char&apos;, &apos;page_number&apos;: 1, &apos;text&apos;: &apos;关&apos;, &apos;top&apos;: Decimal(&apos;62.224&apos;), &apos;bottom&apos;: Decimal(&apos;90.160&apos;), &apos;doctop&apos;: Decimal(&apos;62.224&apos;)&#125;</span><br></pre></td></tr></table></figure>\n\n<p>格式化之后：</p>\n<p><img src=\"https://tva1.sinaimg.cn/large/006y8mN6ly1g8e0nm8qvij30kq0hi0um.jpg\" alt></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">\t    &quot;fontname&quot;:&quot;CRSMRF+PingFangTC-Semibold&quot;,</span><br><span class=\"line\">\t    &quot;adv&quot;:&quot;1.000&quot;,</span><br><span class=\"line\">\t    &quot;upright&quot;:1,</span><br><span class=\"line\">\t    &quot;x0&quot;:&quot;57.000&quot;,</span><br><span class=\"line\">\t    &quot;y0&quot;:&quot;751.840&quot;,</span><br><span class=\"line\">\t    &quot;x1&quot;:&quot;81.000&quot;,</span><br><span class=\"line\">\t    &quot;y1&quot;:&quot;779.776&quot;,</span><br><span class=\"line\">\t    &quot;width&quot;:&quot;24.000&quot;,</span><br><span class=\"line\">\t    &quot;height&quot;:&quot;27.936&quot;,</span><br><span class=\"line\">\t    &quot;size&quot;:&quot;27.936&quot;,</span><br><span class=\"line\">\t    &quot;object_type&quot;:&quot;char&quot;,</span><br><span class=\"line\">\t    &quot;page_number&quot;:1,  #页数</span><br><span class=\"line\">\t    &quot;text&quot;:&quot;关&quot;,  #第一个文字</span><br><span class=\"line\">\t    &quot;top&quot;:&quot;62.224&quot;,</span><br><span class=\"line\">\t    &quot;bottom&quot;:&quot;90.160&quot;,</span><br><span class=\"line\">\t    &quot;doctop&quot;:&quot;62.224&quot;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"常用方法\"><a href=\"#常用方法\" class=\"headerlink\" title=\"常用方法\"></a>常用方法</h4><ul>\n<li>extract_text() 用来提页面中的文本，将页面的所有字符对象整理为一个字符串</li>\n<li>extract_words() 返回的是所有的单词及其相关信息</li>\n<li>extract_tables() 提取页面的表格</li>\n</ul>\n<h4 id=\"提取文字\"><a href=\"#提取文字\" class=\"headerlink\" title=\"提取文字\"></a>提取文字</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#!/usr/bin/env python3</span><br><span class=\"line\"></span><br><span class=\"line\">import pdfplumber</span><br><span class=\"line\"></span><br><span class=\"line\">with pdfplumber.open(&quot;test.pdf&quot;) as pdf:</span><br><span class=\"line\">\tfirst_page = pdf.pages[0]</span><br><span class=\"line\">\ttext = first_page.extract_text() #提取第一页的所有文字</span><br><span class=\"line\">\tprint(text)</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://tva1.sinaimg.cn/large/006y8mN6ly1g8e0nmzq4wj30r007wgms.jpg\" alt></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">关于我们</span><br><span class=\"line\">关于FlyPython</span><br><span class=\"line\">FlyPython是提供⼀站式Python编程学习的组织，我们致⼒于为⽤户提供⾼</span><br><span class=\"line\">效，有趣的学习环境，打造专注于Python的中⽂学习社区。</span><br><span class=\"line\">联系我们</span><br><span class=\"line\">客服&amp;合作: 微信号 flypython</span><br><span class=\"line\">微信公众号：</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"提取表格\"><a href=\"#提取表格\" class=\"headerlink\" title=\"提取表格\"></a>提取表格</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#!/usr/bin/env python3</span><br><span class=\"line\"></span><br><span class=\"line\">import pdfplumber</span><br><span class=\"line\">import pandas as pd</span><br><span class=\"line\"></span><br><span class=\"line\">with pdfplumber.open(&quot;test.pdf&quot;) as pdf:</span><br><span class=\"line\">    first_page = pdf.pages[0]</span><br><span class=\"line\">    text = first_page.extract_text()</span><br><span class=\"line\">    print(text)</span><br><span class=\"line\"></span><br><span class=\"line\">    second_page = pdf.pages[1] #第二页</span><br><span class=\"line\">    table = second_page.extract_tables()#在第二页提取表格</span><br><span class=\"line\">    for t in table:</span><br><span class=\"line\">        df = pd.DataFrame(t[1:],columns=t[0])</span><br><span class=\"line\">        print(df)</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://tva1.sinaimg.cn/large/006y8mN6ly1g8e0no9hykj30po0f8wg9.jpg\" alt></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">         分类                 书名</span><br><span class=\"line\">0  Python入门  Python编程：从入门到\\n实践</span><br><span class=\"line\">1  Python中级          流畅的Python</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h4><p>pdfplumber的接口还是很容易的，如果只是需要提取文字，几行代码就可以提取到。如果是表格并没有提取出来或者错误的提取了非表格的内容，你需要在提取表格时加入<code>table_settings</code>参数来指定表格的设置。</p>\n<p>这次的demo中，图片并没有提取出来，pdf图片的提取会放到下一篇文章，敬请期待。</p>\n<p><em>人生苦短，我用python早下班。如果觉得不错，对你工作中有帮助，可以长按下列二维码关注我们的公众号。</em></p>\n<p>  <img src=\"https://flypython.com/images/wechat.png\" alt=\"flypython微信公众号\"></p>\n"},{"date":"2019-01-04T16:00:00.000Z","title":"Python读取PDF图片","subtitle":"极简Python自动化办公系列","cover":"/images/oa4.jpg","_content":">【极简Python 自动化办公】专栏是介绍如何利用python办公，减少工作负荷。篇幅精炼，内容易懂，无论是否有编程基础，都非常适合。\n\n在上次的文章中，我们从PDF中提取了文字和表格，这次我们需要提取图片。\n\n还是先来看看我们上次的测试例子\n\n![](https://tva1.sinaimg.cn/large/006y8mN6ly1g8e0nlr7gdj30kc0zcjua.jpg)\n\n这次我们要提取第一页的二维码图片。\n\n#### fitz介绍\n\npymupdf是mupdf的Python绑定，而今天我们要使用的fitz是pymupdf的子模块。需要的时候，使用pip安装。\n\n`pip install pymupdf`\n\n导入的时使用`import fitz`导入模块。\n\n\n更多信息可参考pymupdf的文档:\n`https://pymupdf.readthedocs.io/en/latest/intro/`\n\n#### 提取图片\n\n提取图片的思路是通过正则表达式找到图片对象，然后保存为图片格式。\n\n\n```\n#!/usr/bin/env python3\n\nimport fitz  #pip install pymupdf\nimport re\nimport os\n\ndef find_imag(path,img_path):\n\n    checkXO = r\"/Type(?= */XObject)\"\n    checkIM = r\"/Subtype(?= */Image)\"\n\n    pdf = fitz.open(path)\n\n    img_count = 0\n    len_XREF = pdf._getXrefLength()\n\n    print(\"文件名:{}, 页数: {}, 对象: {}\".format(path, len(pdf), len_XREF - 1))\n\n    for i in range(1, len_XREF):\n        text = pdf._getXrefString(i)\n        isXObject = re.search(checkXO, text)\n\n        # 使用正则表达式查看是否是图片\n        isImage = re.search(checkIM, text)\n\n        # 如果不是对象也不是图片，则continue\n        if not isXObject or not isImage:\n            continue\n        img_count += 1\n        # 根据索引生成图像\n        pix = fitz.Pixmap(pdf, i)\n  \n        new_name = path.replace('\\\\', '_') + \"_img{}.png\".format(img_count)\n        new_name = new_name.replace(':', '')\n\n        # 如果pix.n<5,可以直接存为PNG\n        if pix.n < 5:\n            pix.writePNG(os.path.join(img_path, new_name))\n     \n        else:\n            pix0 = fitz.Pixmap(fitz.csRGB, pix)\n            pix0.writePNG(os.path.join(img_path, new_name))\n            pix0 = None\n       \n        pix = None\n     \n        print(\"提取了{}张图片\".format(img_count))\n\n\nif __name__=='__main__':\n    pdf_path = r'test.pdf'\n    img_path = r'img'\n    m = find_imag(pdf_path, img_path)\n\n```\n\n\n运行程序结果：\n\n```\n[pdf] python3 pdf_img.py\n文件名:test.pdf, 页数: 2, 对象: 115\n提取了1张图片\n```\n\n在img目录中，已经存在了我们需要的文件\n\n![](https://tva1.sinaimg.cn/large/006y8mN6ly1g8osipfp3uj30uu0jqgrw.jpg)\n\n\n#### 总结\n\npymupdf的使用，今天就简单介绍到这里。更多的功能请参考pymupdf文档。\n\n下一篇，我们将带来pdf转换为图片的讨论。\n\n\n*人生苦短，我用python早下班。如果觉得不错，对你工作中有帮助，可以长按下列二维码关注我们的公众号。*\n\n  ![flypython微信公众号](https://tva1.sinaimg.cn/large/006y8mN6ly1g8pj2981c1j3076076mxn.jpg)\n ","source":"_posts/python-oa-05.md","raw":"---\ndate: 2019-01-05 00:00\ntitle:  Python读取PDF图片\nsubtitle: 极简Python自动化办公系列\ncover: /images/oa4.jpg\ncategories: [自动化办公]\n---\n>【极简Python 自动化办公】专栏是介绍如何利用python办公，减少工作负荷。篇幅精炼，内容易懂，无论是否有编程基础，都非常适合。\n\n在上次的文章中，我们从PDF中提取了文字和表格，这次我们需要提取图片。\n\n还是先来看看我们上次的测试例子\n\n![](https://tva1.sinaimg.cn/large/006y8mN6ly1g8e0nlr7gdj30kc0zcjua.jpg)\n\n这次我们要提取第一页的二维码图片。\n\n#### fitz介绍\n\npymupdf是mupdf的Python绑定，而今天我们要使用的fitz是pymupdf的子模块。需要的时候，使用pip安装。\n\n`pip install pymupdf`\n\n导入的时使用`import fitz`导入模块。\n\n\n更多信息可参考pymupdf的文档:\n`https://pymupdf.readthedocs.io/en/latest/intro/`\n\n#### 提取图片\n\n提取图片的思路是通过正则表达式找到图片对象，然后保存为图片格式。\n\n\n```\n#!/usr/bin/env python3\n\nimport fitz  #pip install pymupdf\nimport re\nimport os\n\ndef find_imag(path,img_path):\n\n    checkXO = r\"/Type(?= */XObject)\"\n    checkIM = r\"/Subtype(?= */Image)\"\n\n    pdf = fitz.open(path)\n\n    img_count = 0\n    len_XREF = pdf._getXrefLength()\n\n    print(\"文件名:{}, 页数: {}, 对象: {}\".format(path, len(pdf), len_XREF - 1))\n\n    for i in range(1, len_XREF):\n        text = pdf._getXrefString(i)\n        isXObject = re.search(checkXO, text)\n\n        # 使用正则表达式查看是否是图片\n        isImage = re.search(checkIM, text)\n\n        # 如果不是对象也不是图片，则continue\n        if not isXObject or not isImage:\n            continue\n        img_count += 1\n        # 根据索引生成图像\n        pix = fitz.Pixmap(pdf, i)\n  \n        new_name = path.replace('\\\\', '_') + \"_img{}.png\".format(img_count)\n        new_name = new_name.replace(':', '')\n\n        # 如果pix.n<5,可以直接存为PNG\n        if pix.n < 5:\n            pix.writePNG(os.path.join(img_path, new_name))\n     \n        else:\n            pix0 = fitz.Pixmap(fitz.csRGB, pix)\n            pix0.writePNG(os.path.join(img_path, new_name))\n            pix0 = None\n       \n        pix = None\n     \n        print(\"提取了{}张图片\".format(img_count))\n\n\nif __name__=='__main__':\n    pdf_path = r'test.pdf'\n    img_path = r'img'\n    m = find_imag(pdf_path, img_path)\n\n```\n\n\n运行程序结果：\n\n```\n[pdf] python3 pdf_img.py\n文件名:test.pdf, 页数: 2, 对象: 115\n提取了1张图片\n```\n\n在img目录中，已经存在了我们需要的文件\n\n![](https://tva1.sinaimg.cn/large/006y8mN6ly1g8osipfp3uj30uu0jqgrw.jpg)\n\n\n#### 总结\n\npymupdf的使用，今天就简单介绍到这里。更多的功能请参考pymupdf文档。\n\n下一篇，我们将带来pdf转换为图片的讨论。\n\n\n*人生苦短，我用python早下班。如果觉得不错，对你工作中有帮助，可以长按下列二维码关注我们的公众号。*\n\n  ![flypython微信公众号](https://tva1.sinaimg.cn/large/006y8mN6ly1g8pj2981c1j3076076mxn.jpg)\n ","slug":"python-oa-05","published":1,"updated":"2020-01-02T03:55:20.976Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck4wdip8b0008wz1bs667hndt","content":"<blockquote>\n<p>【极简Python 自动化办公】专栏是介绍如何利用python办公，减少工作负荷。篇幅精炼，内容易懂，无论是否有编程基础，都非常适合。</p>\n</blockquote>\n<p>在上次的文章中，我们从PDF中提取了文字和表格，这次我们需要提取图片。</p>\n<p>还是先来看看我们上次的测试例子</p>\n<p><img src=\"https://tva1.sinaimg.cn/large/006y8mN6ly1g8e0nlr7gdj30kc0zcjua.jpg\" alt></p>\n<p>这次我们要提取第一页的二维码图片。</p>\n<h4 id=\"fitz介绍\"><a href=\"#fitz介绍\" class=\"headerlink\" title=\"fitz介绍\"></a>fitz介绍</h4><p>pymupdf是mupdf的Python绑定，而今天我们要使用的fitz是pymupdf的子模块。需要的时候，使用pip安装。</p>\n<p><code>pip install pymupdf</code></p>\n<p>导入的时使用<code>import fitz</code>导入模块。</p>\n<p>更多信息可参考pymupdf的文档:<br><code>https://pymupdf.readthedocs.io/en/latest/intro/</code></p>\n<h4 id=\"提取图片\"><a href=\"#提取图片\" class=\"headerlink\" title=\"提取图片\"></a>提取图片</h4><p>提取图片的思路是通过正则表达式找到图片对象，然后保存为图片格式。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#!/usr/bin/env python3</span><br><span class=\"line\"></span><br><span class=\"line\">import fitz  #pip install pymupdf</span><br><span class=\"line\">import re</span><br><span class=\"line\">import os</span><br><span class=\"line\"></span><br><span class=\"line\">def find_imag(path,img_path):</span><br><span class=\"line\"></span><br><span class=\"line\">    checkXO = r&quot;/Type(?= */XObject)&quot;</span><br><span class=\"line\">    checkIM = r&quot;/Subtype(?= */Image)&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">    pdf = fitz.open(path)</span><br><span class=\"line\"></span><br><span class=\"line\">    img_count = 0</span><br><span class=\"line\">    len_XREF = pdf._getXrefLength()</span><br><span class=\"line\"></span><br><span class=\"line\">    print(&quot;文件名:&#123;&#125;, 页数: &#123;&#125;, 对象: &#123;&#125;&quot;.format(path, len(pdf), len_XREF - 1))</span><br><span class=\"line\"></span><br><span class=\"line\">    for i in range(1, len_XREF):</span><br><span class=\"line\">        text = pdf._getXrefString(i)</span><br><span class=\"line\">        isXObject = re.search(checkXO, text)</span><br><span class=\"line\"></span><br><span class=\"line\">        # 使用正则表达式查看是否是图片</span><br><span class=\"line\">        isImage = re.search(checkIM, text)</span><br><span class=\"line\"></span><br><span class=\"line\">        # 如果不是对象也不是图片，则continue</span><br><span class=\"line\">        if not isXObject or not isImage:</span><br><span class=\"line\">            continue</span><br><span class=\"line\">        img_count += 1</span><br><span class=\"line\">        # 根据索引生成图像</span><br><span class=\"line\">        pix = fitz.Pixmap(pdf, i)</span><br><span class=\"line\">  </span><br><span class=\"line\">        new_name = path.replace(&apos;\\\\&apos;, &apos;_&apos;) + &quot;_img&#123;&#125;.png&quot;.format(img_count)</span><br><span class=\"line\">        new_name = new_name.replace(&apos;:&apos;, &apos;&apos;)</span><br><span class=\"line\"></span><br><span class=\"line\">        # 如果pix.n&lt;5,可以直接存为PNG</span><br><span class=\"line\">        if pix.n &lt; 5:</span><br><span class=\"line\">            pix.writePNG(os.path.join(img_path, new_name))</span><br><span class=\"line\">     </span><br><span class=\"line\">        else:</span><br><span class=\"line\">            pix0 = fitz.Pixmap(fitz.csRGB, pix)</span><br><span class=\"line\">            pix0.writePNG(os.path.join(img_path, new_name))</span><br><span class=\"line\">            pix0 = None</span><br><span class=\"line\">       </span><br><span class=\"line\">        pix = None</span><br><span class=\"line\">     </span><br><span class=\"line\">        print(&quot;提取了&#123;&#125;张图片&quot;.format(img_count))</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">if __name__==&apos;__main__&apos;:</span><br><span class=\"line\">    pdf_path = r&apos;test.pdf&apos;</span><br><span class=\"line\">    img_path = r&apos;img&apos;</span><br><span class=\"line\">    m = find_imag(pdf_path, img_path)</span><br></pre></td></tr></table></figure>\n\n<p>运行程序结果：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[pdf] python3 pdf_img.py</span><br><span class=\"line\">文件名:test.pdf, 页数: 2, 对象: 115</span><br><span class=\"line\">提取了1张图片</span><br></pre></td></tr></table></figure>\n\n<p>在img目录中，已经存在了我们需要的文件</p>\n<p><img src=\"https://tva1.sinaimg.cn/large/006y8mN6ly1g8osipfp3uj30uu0jqgrw.jpg\" alt></p>\n<h4 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h4><p>pymupdf的使用，今天就简单介绍到这里。更多的功能请参考pymupdf文档。</p>\n<p>下一篇，我们将带来pdf转换为图片的讨论。</p>\n<p><em>人生苦短，我用python早下班。如果觉得不错，对你工作中有帮助，可以长按下列二维码关注我们的公众号。</em></p>\n<p>  <img src=\"https://tva1.sinaimg.cn/large/006y8mN6ly1g8pj2981c1j3076076mxn.jpg\" alt=\"flypython微信公众号\"></p>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>【极简Python 自动化办公】专栏是介绍如何利用python办公，减少工作负荷。篇幅精炼，内容易懂，无论是否有编程基础，都非常适合。</p>\n</blockquote>\n<p>在上次的文章中，我们从PDF中提取了文字和表格，这次我们需要提取图片。</p>\n<p>还是先来看看我们上次的测试例子</p>\n<p><img src=\"https://tva1.sinaimg.cn/large/006y8mN6ly1g8e0nlr7gdj30kc0zcjua.jpg\" alt></p>\n<p>这次我们要提取第一页的二维码图片。</p>\n<h4 id=\"fitz介绍\"><a href=\"#fitz介绍\" class=\"headerlink\" title=\"fitz介绍\"></a>fitz介绍</h4><p>pymupdf是mupdf的Python绑定，而今天我们要使用的fitz是pymupdf的子模块。需要的时候，使用pip安装。</p>\n<p><code>pip install pymupdf</code></p>\n<p>导入的时使用<code>import fitz</code>导入模块。</p>\n<p>更多信息可参考pymupdf的文档:<br><code>https://pymupdf.readthedocs.io/en/latest/intro/</code></p>\n<h4 id=\"提取图片\"><a href=\"#提取图片\" class=\"headerlink\" title=\"提取图片\"></a>提取图片</h4><p>提取图片的思路是通过正则表达式找到图片对象，然后保存为图片格式。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#!/usr/bin/env python3</span><br><span class=\"line\"></span><br><span class=\"line\">import fitz  #pip install pymupdf</span><br><span class=\"line\">import re</span><br><span class=\"line\">import os</span><br><span class=\"line\"></span><br><span class=\"line\">def find_imag(path,img_path):</span><br><span class=\"line\"></span><br><span class=\"line\">    checkXO = r&quot;/Type(?= */XObject)&quot;</span><br><span class=\"line\">    checkIM = r&quot;/Subtype(?= */Image)&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">    pdf = fitz.open(path)</span><br><span class=\"line\"></span><br><span class=\"line\">    img_count = 0</span><br><span class=\"line\">    len_XREF = pdf._getXrefLength()</span><br><span class=\"line\"></span><br><span class=\"line\">    print(&quot;文件名:&#123;&#125;, 页数: &#123;&#125;, 对象: &#123;&#125;&quot;.format(path, len(pdf), len_XREF - 1))</span><br><span class=\"line\"></span><br><span class=\"line\">    for i in range(1, len_XREF):</span><br><span class=\"line\">        text = pdf._getXrefString(i)</span><br><span class=\"line\">        isXObject = re.search(checkXO, text)</span><br><span class=\"line\"></span><br><span class=\"line\">        # 使用正则表达式查看是否是图片</span><br><span class=\"line\">        isImage = re.search(checkIM, text)</span><br><span class=\"line\"></span><br><span class=\"line\">        # 如果不是对象也不是图片，则continue</span><br><span class=\"line\">        if not isXObject or not isImage:</span><br><span class=\"line\">            continue</span><br><span class=\"line\">        img_count += 1</span><br><span class=\"line\">        # 根据索引生成图像</span><br><span class=\"line\">        pix = fitz.Pixmap(pdf, i)</span><br><span class=\"line\">  </span><br><span class=\"line\">        new_name = path.replace(&apos;\\\\&apos;, &apos;_&apos;) + &quot;_img&#123;&#125;.png&quot;.format(img_count)</span><br><span class=\"line\">        new_name = new_name.replace(&apos;:&apos;, &apos;&apos;)</span><br><span class=\"line\"></span><br><span class=\"line\">        # 如果pix.n&lt;5,可以直接存为PNG</span><br><span class=\"line\">        if pix.n &lt; 5:</span><br><span class=\"line\">            pix.writePNG(os.path.join(img_path, new_name))</span><br><span class=\"line\">     </span><br><span class=\"line\">        else:</span><br><span class=\"line\">            pix0 = fitz.Pixmap(fitz.csRGB, pix)</span><br><span class=\"line\">            pix0.writePNG(os.path.join(img_path, new_name))</span><br><span class=\"line\">            pix0 = None</span><br><span class=\"line\">       </span><br><span class=\"line\">        pix = None</span><br><span class=\"line\">     </span><br><span class=\"line\">        print(&quot;提取了&#123;&#125;张图片&quot;.format(img_count))</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">if __name__==&apos;__main__&apos;:</span><br><span class=\"line\">    pdf_path = r&apos;test.pdf&apos;</span><br><span class=\"line\">    img_path = r&apos;img&apos;</span><br><span class=\"line\">    m = find_imag(pdf_path, img_path)</span><br></pre></td></tr></table></figure>\n\n<p>运行程序结果：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[pdf] python3 pdf_img.py</span><br><span class=\"line\">文件名:test.pdf, 页数: 2, 对象: 115</span><br><span class=\"line\">提取了1张图片</span><br></pre></td></tr></table></figure>\n\n<p>在img目录中，已经存在了我们需要的文件</p>\n<p><img src=\"https://tva1.sinaimg.cn/large/006y8mN6ly1g8osipfp3uj30uu0jqgrw.jpg\" alt></p>\n<h4 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h4><p>pymupdf的使用，今天就简单介绍到这里。更多的功能请参考pymupdf文档。</p>\n<p>下一篇，我们将带来pdf转换为图片的讨论。</p>\n<p><em>人生苦短，我用python早下班。如果觉得不错，对你工作中有帮助，可以长按下列二维码关注我们的公众号。</em></p>\n<p>  <img src=\"https://tva1.sinaimg.cn/large/006y8mN6ly1g8pj2981c1j3076076mxn.jpg\" alt=\"flypython微信公众号\"></p>\n"},{"date":"2019-01-01T16:00:00.000Z","title":"Python写入Word文档","subtitle":"极简Python自动化办公系列","cover":"/images/oa2.jpg","_content":">【极简Python 自动化办公】专栏是介绍如何利用python办公，减少工作负荷。篇幅精炼，内容易懂，无论是否有编程基础，都非常适合。\n\n\n\n\n\n在上次文章中，我们学习了【用python写入excel】，这次我们学习Python写word文档吧！\n\n\n\n场景：\n有时候，办公室需要按模版生成的固定的文件，模板是固定的，只是每次需要替换信息。如下图的收入证明，模版中所有标黄的都是需要替换的信息：\n![](http://jcjview.github.io/img/pythonword_model0.png)\n如果手工来做这个事情，每次至少需要10分钟的时间。假如每天要开15份，则至少要花2个半小时，而且手工编辑word很容易出错。\n\n可不可用python写个程序，解决这个问题呢？\n\n结论当然是肯定的！\n\n## 0.摘要\n\n**本文大约需要15分钟，建议在电脑上打开，边阅读边操作。**\n\n1. 安装Python读写word模块，python-docx\n2. 准备word模板，准备写入word文档内容\n3. 编写python代码并运行\n4.通过读取excel表格中的信息，批量生成word文件\n\n## 1.安装python-docx模块\n\n与上篇文章类似，需要在cmd窗口输入`pip install python-docx`。\n![](http://jcjview.github.io/img/flypython_python_docx_pip.png)\n\n\n## 2.准备word模板，准备写入word文档内容\nword模板如上所示，（可以不需要标黄），这里注意，需要替换的文字或数字位置，用\"XXXX\"来固定替代。保存为`个人收入证明.docx`。\n\n| 名称 | 内容|\n|---------|------------|\n| 姓名 | 张三 |\n| 身份证号 | 104111199009103531 |\n|职务 | 工程师|\n| 工作年限 | 10 |\n| 月收入 | 10000 |\n| 大写 | 壹万元整|\n|联系人|李四|\n| 单位名称 | 格物致知股份有限公司 |\n| 单位地址 |  珠海市横琴新区宝华路6号105室-67425|\n| 联系电话 | 0756-8627528 |\n\n## 3. 编写python代码并运行\n\n\n在word模板的同级目录，新建一个writeword.py文件，用记事本或其他文本编辑工具打开。\n\n编程思路：\n\n\n1. 用python打开对应doc模板\n1. 按顺序找到每一个需要替换的位置字符\"XXXX\"，替换为对应的内容\n1. 另存为doc为另一个文件\n\n\n在文本编辑工具中输入如下代码，保存并关闭。\n\n```\nfrom docx import Document\n#准备写入内容\nname=\"张三\"\nid_code=\"104111199009103531\"\ncareer=\"工程师\"\nworking_years=\"10\"\nsalary=\"10000\"\nsalary_uppercase=\"壹万元整\"\ncontact=\"李四\"\ncompany=\"格物厚德股份有限公司\"\naddress=\"珠海市横琴新区宝华路6号105室-67425\"\ntel=\"0756-8627528\"\n#打开doc\n\ntextlist=[name,id_code,career,working_years,salary,salary_uppercase,company,address,contact,tel]\n\ndoc = Document(\"个人收入证明.docx\")\n\ncount=0\n\nfor p in doc.paragraphs:\n        if 'XXXX' in p.text:\n            inline = p.runs\n            for i in range(len(inline)):\n                if 'XXXX' in inline[i].text:\n                    text = inline[i].text.replace('XXXX', textlist[count])\n                    inline[i].text = text\n                    count+=1\n                    print(count)\ndoc.save(\"%s_个人收入证明.docx\"%name)\n\n```\n\n在同级目录，打开cmd，运行writeword.py `python writeword.py`\n\n生成结果如下：\n`张三_个人收入证明.docx`\n![](http://jcjview.github.io/img/pythonword2.png)\n## 4.通过读取excel表格中的信息，批量生成word文件\n\n这里生成了对应word文件，但也有几个问题：\n\n1. 对应的日期并没有自动填写，应当填写文件生成时对应的日期\n2. 如果是生成大量同样word文档的话，目前的程序也需要一个一个改，并没有提升太多效率\n\n如果您看过我们之前的2篇用python读写excel的文章，您肯定就会想到，可以利用读取excel表格里的内容，批量生成对应的word文档。对，让我们继续吧！\n\n这里再准备一个excel文件，将需要批量写入的信息写在excel中，并保存为income.xlsx在同级目录，如下图：\n\n![](http://jcjview.github.io/img/pythonword23.png)\n\n修改python 文件writeword.py\n\n```\nfrom docx import Document\n#准备写入内容\nimport xlrd\nimport time\n# 当前时间元组\nfrom datetime import datetime\nnt=datetime.now()\n# 可以输入中文年月日\ndatestr=nt.strftime('%Y{y}%m{m}%d{d}').format(y='年', m='月', d='日')\n\nxlsx=xlrd.open_workbook('income.xlsx')\nsheet=xlsx.sheet_by_index(0)\nfor row in range(1,sheet.nrows):\n    doc = Document(\"个人收入证明.docx\")\n    count=0\n    textlist=[]\n    for col in range(0,sheet.ncols):\n        textlist.append(str(sheet.cell_value(row, col)))\n\n    for p in doc.paragraphs:\n            if 'XXXX' in p.text:\n                inline = p.runs\n                for i in range(len(inline)):\n                    if 'XXXX' in inline[i].text:\n                        text = inline[i].text.replace('XXXX', textlist[count])\n                        inline[i].text = text\n                        count+=1\n            if 'X 年   X 月  X 日' in p.text:\n                inline = p.runs\n                for i in range(len(inline)):\n                    if 'X 年   X 月  X 日' in inline[i].text:\n                        text = inline[i].text.replace('X 年   X 月  X 日', datestr)\n                        inline[i].text = text\n\n    doc.save(\"%s_个人收入证明.docx\"%textlist[0])\n```\n   \n  运行后，输入结果：\n  \n  \n\n![](http://jcjview.github.io/img/pythonword3.png)\n\n\n![](http://jcjview.github.io/img/pythonword4.png)\n\n\n*人生苦短，我用python早下班。如果觉得不错，对你工作中有帮助，请加我微信公众号flypython，我们一起探讨python相关问题*\n\n  ![flypython微信公众号](https://flypython.com/images/wechat.png)","source":"_posts/python-oa-02.md","raw":"---\ndate: 2019-01-02 00:00\ntitle:  Python写入Word文档\nsubtitle: 极简Python自动化办公系列\ncover: /images/oa2.jpg\ncategories: [自动化办公]\n---\n>【极简Python 自动化办公】专栏是介绍如何利用python办公，减少工作负荷。篇幅精炼，内容易懂，无论是否有编程基础，都非常适合。\n\n\n\n\n\n在上次文章中，我们学习了【用python写入excel】，这次我们学习Python写word文档吧！\n\n\n\n场景：\n有时候，办公室需要按模版生成的固定的文件，模板是固定的，只是每次需要替换信息。如下图的收入证明，模版中所有标黄的都是需要替换的信息：\n![](http://jcjview.github.io/img/pythonword_model0.png)\n如果手工来做这个事情，每次至少需要10分钟的时间。假如每天要开15份，则至少要花2个半小时，而且手工编辑word很容易出错。\n\n可不可用python写个程序，解决这个问题呢？\n\n结论当然是肯定的！\n\n## 0.摘要\n\n**本文大约需要15分钟，建议在电脑上打开，边阅读边操作。**\n\n1. 安装Python读写word模块，python-docx\n2. 准备word模板，准备写入word文档内容\n3. 编写python代码并运行\n4.通过读取excel表格中的信息，批量生成word文件\n\n## 1.安装python-docx模块\n\n与上篇文章类似，需要在cmd窗口输入`pip install python-docx`。\n![](http://jcjview.github.io/img/flypython_python_docx_pip.png)\n\n\n## 2.准备word模板，准备写入word文档内容\nword模板如上所示，（可以不需要标黄），这里注意，需要替换的文字或数字位置，用\"XXXX\"来固定替代。保存为`个人收入证明.docx`。\n\n| 名称 | 内容|\n|---------|------------|\n| 姓名 | 张三 |\n| 身份证号 | 104111199009103531 |\n|职务 | 工程师|\n| 工作年限 | 10 |\n| 月收入 | 10000 |\n| 大写 | 壹万元整|\n|联系人|李四|\n| 单位名称 | 格物致知股份有限公司 |\n| 单位地址 |  珠海市横琴新区宝华路6号105室-67425|\n| 联系电话 | 0756-8627528 |\n\n## 3. 编写python代码并运行\n\n\n在word模板的同级目录，新建一个writeword.py文件，用记事本或其他文本编辑工具打开。\n\n编程思路：\n\n\n1. 用python打开对应doc模板\n1. 按顺序找到每一个需要替换的位置字符\"XXXX\"，替换为对应的内容\n1. 另存为doc为另一个文件\n\n\n在文本编辑工具中输入如下代码，保存并关闭。\n\n```\nfrom docx import Document\n#准备写入内容\nname=\"张三\"\nid_code=\"104111199009103531\"\ncareer=\"工程师\"\nworking_years=\"10\"\nsalary=\"10000\"\nsalary_uppercase=\"壹万元整\"\ncontact=\"李四\"\ncompany=\"格物厚德股份有限公司\"\naddress=\"珠海市横琴新区宝华路6号105室-67425\"\ntel=\"0756-8627528\"\n#打开doc\n\ntextlist=[name,id_code,career,working_years,salary,salary_uppercase,company,address,contact,tel]\n\ndoc = Document(\"个人收入证明.docx\")\n\ncount=0\n\nfor p in doc.paragraphs:\n        if 'XXXX' in p.text:\n            inline = p.runs\n            for i in range(len(inline)):\n                if 'XXXX' in inline[i].text:\n                    text = inline[i].text.replace('XXXX', textlist[count])\n                    inline[i].text = text\n                    count+=1\n                    print(count)\ndoc.save(\"%s_个人收入证明.docx\"%name)\n\n```\n\n在同级目录，打开cmd，运行writeword.py `python writeword.py`\n\n生成结果如下：\n`张三_个人收入证明.docx`\n![](http://jcjview.github.io/img/pythonword2.png)\n## 4.通过读取excel表格中的信息，批量生成word文件\n\n这里生成了对应word文件，但也有几个问题：\n\n1. 对应的日期并没有自动填写，应当填写文件生成时对应的日期\n2. 如果是生成大量同样word文档的话，目前的程序也需要一个一个改，并没有提升太多效率\n\n如果您看过我们之前的2篇用python读写excel的文章，您肯定就会想到，可以利用读取excel表格里的内容，批量生成对应的word文档。对，让我们继续吧！\n\n这里再准备一个excel文件，将需要批量写入的信息写在excel中，并保存为income.xlsx在同级目录，如下图：\n\n![](http://jcjview.github.io/img/pythonword23.png)\n\n修改python 文件writeword.py\n\n```\nfrom docx import Document\n#准备写入内容\nimport xlrd\nimport time\n# 当前时间元组\nfrom datetime import datetime\nnt=datetime.now()\n# 可以输入中文年月日\ndatestr=nt.strftime('%Y{y}%m{m}%d{d}').format(y='年', m='月', d='日')\n\nxlsx=xlrd.open_workbook('income.xlsx')\nsheet=xlsx.sheet_by_index(0)\nfor row in range(1,sheet.nrows):\n    doc = Document(\"个人收入证明.docx\")\n    count=0\n    textlist=[]\n    for col in range(0,sheet.ncols):\n        textlist.append(str(sheet.cell_value(row, col)))\n\n    for p in doc.paragraphs:\n            if 'XXXX' in p.text:\n                inline = p.runs\n                for i in range(len(inline)):\n                    if 'XXXX' in inline[i].text:\n                        text = inline[i].text.replace('XXXX', textlist[count])\n                        inline[i].text = text\n                        count+=1\n            if 'X 年   X 月  X 日' in p.text:\n                inline = p.runs\n                for i in range(len(inline)):\n                    if 'X 年   X 月  X 日' in inline[i].text:\n                        text = inline[i].text.replace('X 年   X 月  X 日', datestr)\n                        inline[i].text = text\n\n    doc.save(\"%s_个人收入证明.docx\"%textlist[0])\n```\n   \n  运行后，输入结果：\n  \n  \n\n![](http://jcjview.github.io/img/pythonword3.png)\n\n\n![](http://jcjview.github.io/img/pythonword4.png)\n\n\n*人生苦短，我用python早下班。如果觉得不错，对你工作中有帮助，请加我微信公众号flypython，我们一起探讨python相关问题*\n\n  ![flypython微信公众号](https://flypython.com/images/wechat.png)","slug":"python-oa-02","published":1,"updated":"2020-01-02T03:46:38.931Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck4wdip8e000bwz1blorz21pj","content":"<blockquote>\n<p>【极简Python 自动化办公】专栏是介绍如何利用python办公，减少工作负荷。篇幅精炼，内容易懂，无论是否有编程基础，都非常适合。</p>\n</blockquote>\n<p>在上次文章中，我们学习了【用python写入excel】，这次我们学习Python写word文档吧！</p>\n<p>场景：<br>有时候，办公室需要按模版生成的固定的文件，模板是固定的，只是每次需要替换信息。如下图的收入证明，模版中所有标黄的都是需要替换的信息：<br><img src=\"http://jcjview.github.io/img/pythonword_model0.png\" alt><br>如果手工来做这个事情，每次至少需要10分钟的时间。假如每天要开15份，则至少要花2个半小时，而且手工编辑word很容易出错。</p>\n<p>可不可用python写个程序，解决这个问题呢？</p>\n<p>结论当然是肯定的！</p>\n<h2 id=\"0-摘要\"><a href=\"#0-摘要\" class=\"headerlink\" title=\"0.摘要\"></a>0.摘要</h2><p><strong>本文大约需要15分钟，建议在电脑上打开，边阅读边操作。</strong></p>\n<ol>\n<li>安装Python读写word模块，python-docx</li>\n<li>准备word模板，准备写入word文档内容</li>\n<li>编写python代码并运行</li>\n<li>通过读取excel表格中的信息，批量生成word文件</li>\n</ol>\n<h2 id=\"1-安装python-docx模块\"><a href=\"#1-安装python-docx模块\" class=\"headerlink\" title=\"1.安装python-docx模块\"></a>1.安装python-docx模块</h2><p>与上篇文章类似，需要在cmd窗口输入<code>pip install python-docx</code>。<br><img src=\"http://jcjview.github.io/img/flypython_python_docx_pip.png\" alt></p>\n<h2 id=\"2-准备word模板，准备写入word文档内容\"><a href=\"#2-准备word模板，准备写入word文档内容\" class=\"headerlink\" title=\"2.准备word模板，准备写入word文档内容\"></a>2.准备word模板，准备写入word文档内容</h2><p>word模板如上所示，（可以不需要标黄），这里注意，需要替换的文字或数字位置，用”XXXX”来固定替代。保存为<code>个人收入证明.docx</code>。</p>\n<table>\n<thead>\n<tr>\n<th>名称</th>\n<th>内容</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>姓名</td>\n<td>张三</td>\n</tr>\n<tr>\n<td>身份证号</td>\n<td>104111199009103531</td>\n</tr>\n<tr>\n<td>职务</td>\n<td>工程师</td>\n</tr>\n<tr>\n<td>工作年限</td>\n<td>10</td>\n</tr>\n<tr>\n<td>月收入</td>\n<td>10000</td>\n</tr>\n<tr>\n<td>大写</td>\n<td>壹万元整</td>\n</tr>\n<tr>\n<td>联系人</td>\n<td>李四</td>\n</tr>\n<tr>\n<td>单位名称</td>\n<td>格物致知股份有限公司</td>\n</tr>\n<tr>\n<td>单位地址</td>\n<td>珠海市横琴新区宝华路6号105室-67425</td>\n</tr>\n<tr>\n<td>联系电话</td>\n<td>0756-8627528</td>\n</tr>\n</tbody></table>\n<h2 id=\"3-编写python代码并运行\"><a href=\"#3-编写python代码并运行\" class=\"headerlink\" title=\"3. 编写python代码并运行\"></a>3. 编写python代码并运行</h2><p>在word模板的同级目录，新建一个writeword.py文件，用记事本或其他文本编辑工具打开。</p>\n<p>编程思路：</p>\n<ol>\n<li>用python打开对应doc模板</li>\n<li>按顺序找到每一个需要替换的位置字符”XXXX”，替换为对应的内容</li>\n<li>另存为doc为另一个文件</li>\n</ol>\n<p>在文本编辑工具中输入如下代码，保存并关闭。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from docx import Document</span><br><span class=\"line\">#准备写入内容</span><br><span class=\"line\">name=&quot;张三&quot;</span><br><span class=\"line\">id_code=&quot;104111199009103531&quot;</span><br><span class=\"line\">career=&quot;工程师&quot;</span><br><span class=\"line\">working_years=&quot;10&quot;</span><br><span class=\"line\">salary=&quot;10000&quot;</span><br><span class=\"line\">salary_uppercase=&quot;壹万元整&quot;</span><br><span class=\"line\">contact=&quot;李四&quot;</span><br><span class=\"line\">company=&quot;格物厚德股份有限公司&quot;</span><br><span class=\"line\">address=&quot;珠海市横琴新区宝华路6号105室-67425&quot;</span><br><span class=\"line\">tel=&quot;0756-8627528&quot;</span><br><span class=\"line\">#打开doc</span><br><span class=\"line\"></span><br><span class=\"line\">textlist=[name,id_code,career,working_years,salary,salary_uppercase,company,address,contact,tel]</span><br><span class=\"line\"></span><br><span class=\"line\">doc = Document(&quot;个人收入证明.docx&quot;)</span><br><span class=\"line\"></span><br><span class=\"line\">count=0</span><br><span class=\"line\"></span><br><span class=\"line\">for p in doc.paragraphs:</span><br><span class=\"line\">        if &apos;XXXX&apos; in p.text:</span><br><span class=\"line\">            inline = p.runs</span><br><span class=\"line\">            for i in range(len(inline)):</span><br><span class=\"line\">                if &apos;XXXX&apos; in inline[i].text:</span><br><span class=\"line\">                    text = inline[i].text.replace(&apos;XXXX&apos;, textlist[count])</span><br><span class=\"line\">                    inline[i].text = text</span><br><span class=\"line\">                    count+=1</span><br><span class=\"line\">                    print(count)</span><br><span class=\"line\">doc.save(&quot;%s_个人收入证明.docx&quot;%name)</span><br></pre></td></tr></table></figure>\n\n<p>在同级目录，打开cmd，运行writeword.py <code>python writeword.py</code></p>\n<p>生成结果如下：<br><code>张三_个人收入证明.docx</code><br><img src=\"http://jcjview.github.io/img/pythonword2.png\" alt></p>\n<h2 id=\"4-通过读取excel表格中的信息，批量生成word文件\"><a href=\"#4-通过读取excel表格中的信息，批量生成word文件\" class=\"headerlink\" title=\"4.通过读取excel表格中的信息，批量生成word文件\"></a>4.通过读取excel表格中的信息，批量生成word文件</h2><p>这里生成了对应word文件，但也有几个问题：</p>\n<ol>\n<li>对应的日期并没有自动填写，应当填写文件生成时对应的日期</li>\n<li>如果是生成大量同样word文档的话，目前的程序也需要一个一个改，并没有提升太多效率</li>\n</ol>\n<p>如果您看过我们之前的2篇用python读写excel的文章，您肯定就会想到，可以利用读取excel表格里的内容，批量生成对应的word文档。对，让我们继续吧！</p>\n<p>这里再准备一个excel文件，将需要批量写入的信息写在excel中，并保存为income.xlsx在同级目录，如下图：</p>\n<p><img src=\"http://jcjview.github.io/img/pythonword23.png\" alt></p>\n<p>修改python 文件writeword.py</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from docx import Document</span><br><span class=\"line\">#准备写入内容</span><br><span class=\"line\">import xlrd</span><br><span class=\"line\">import time</span><br><span class=\"line\"># 当前时间元组</span><br><span class=\"line\">from datetime import datetime</span><br><span class=\"line\">nt=datetime.now()</span><br><span class=\"line\"># 可以输入中文年月日</span><br><span class=\"line\">datestr=nt.strftime(&apos;%Y&#123;y&#125;%m&#123;m&#125;%d&#123;d&#125;&apos;).format(y=&apos;年&apos;, m=&apos;月&apos;, d=&apos;日&apos;)</span><br><span class=\"line\"></span><br><span class=\"line\">xlsx=xlrd.open_workbook(&apos;income.xlsx&apos;)</span><br><span class=\"line\">sheet=xlsx.sheet_by_index(0)</span><br><span class=\"line\">for row in range(1,sheet.nrows):</span><br><span class=\"line\">    doc = Document(&quot;个人收入证明.docx&quot;)</span><br><span class=\"line\">    count=0</span><br><span class=\"line\">    textlist=[]</span><br><span class=\"line\">    for col in range(0,sheet.ncols):</span><br><span class=\"line\">        textlist.append(str(sheet.cell_value(row, col)))</span><br><span class=\"line\"></span><br><span class=\"line\">    for p in doc.paragraphs:</span><br><span class=\"line\">            if &apos;XXXX&apos; in p.text:</span><br><span class=\"line\">                inline = p.runs</span><br><span class=\"line\">                for i in range(len(inline)):</span><br><span class=\"line\">                    if &apos;XXXX&apos; in inline[i].text:</span><br><span class=\"line\">                        text = inline[i].text.replace(&apos;XXXX&apos;, textlist[count])</span><br><span class=\"line\">                        inline[i].text = text</span><br><span class=\"line\">                        count+=1</span><br><span class=\"line\">            if &apos;X 年   X 月  X 日&apos; in p.text:</span><br><span class=\"line\">                inline = p.runs</span><br><span class=\"line\">                for i in range(len(inline)):</span><br><span class=\"line\">                    if &apos;X 年   X 月  X 日&apos; in inline[i].text:</span><br><span class=\"line\">                        text = inline[i].text.replace(&apos;X 年   X 月  X 日&apos;, datestr)</span><br><span class=\"line\">                        inline[i].text = text</span><br><span class=\"line\"></span><br><span class=\"line\">    doc.save(&quot;%s_个人收入证明.docx&quot;%textlist[0])</span><br></pre></td></tr></table></figure>\n\n\n<p>  运行后，输入结果：</p>\n<p><img src=\"http://jcjview.github.io/img/pythonword3.png\" alt></p>\n<p><img src=\"http://jcjview.github.io/img/pythonword4.png\" alt></p>\n<p><em>人生苦短，我用python早下班。如果觉得不错，对你工作中有帮助，请加我微信公众号flypython，我们一起探讨python相关问题</em></p>\n<p>  <img src=\"https://flypython.com/images/wechat.png\" alt=\"flypython微信公众号\"></p>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>【极简Python 自动化办公】专栏是介绍如何利用python办公，减少工作负荷。篇幅精炼，内容易懂，无论是否有编程基础，都非常适合。</p>\n</blockquote>\n<p>在上次文章中，我们学习了【用python写入excel】，这次我们学习Python写word文档吧！</p>\n<p>场景：<br>有时候，办公室需要按模版生成的固定的文件，模板是固定的，只是每次需要替换信息。如下图的收入证明，模版中所有标黄的都是需要替换的信息：<br><img src=\"http://jcjview.github.io/img/pythonword_model0.png\" alt><br>如果手工来做这个事情，每次至少需要10分钟的时间。假如每天要开15份，则至少要花2个半小时，而且手工编辑word很容易出错。</p>\n<p>可不可用python写个程序，解决这个问题呢？</p>\n<p>结论当然是肯定的！</p>\n<h2 id=\"0-摘要\"><a href=\"#0-摘要\" class=\"headerlink\" title=\"0.摘要\"></a>0.摘要</h2><p><strong>本文大约需要15分钟，建议在电脑上打开，边阅读边操作。</strong></p>\n<ol>\n<li>安装Python读写word模块，python-docx</li>\n<li>准备word模板，准备写入word文档内容</li>\n<li>编写python代码并运行</li>\n<li>通过读取excel表格中的信息，批量生成word文件</li>\n</ol>\n<h2 id=\"1-安装python-docx模块\"><a href=\"#1-安装python-docx模块\" class=\"headerlink\" title=\"1.安装python-docx模块\"></a>1.安装python-docx模块</h2><p>与上篇文章类似，需要在cmd窗口输入<code>pip install python-docx</code>。<br><img src=\"http://jcjview.github.io/img/flypython_python_docx_pip.png\" alt></p>\n<h2 id=\"2-准备word模板，准备写入word文档内容\"><a href=\"#2-准备word模板，准备写入word文档内容\" class=\"headerlink\" title=\"2.准备word模板，准备写入word文档内容\"></a>2.准备word模板，准备写入word文档内容</h2><p>word模板如上所示，（可以不需要标黄），这里注意，需要替换的文字或数字位置，用”XXXX”来固定替代。保存为<code>个人收入证明.docx</code>。</p>\n<table>\n<thead>\n<tr>\n<th>名称</th>\n<th>内容</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>姓名</td>\n<td>张三</td>\n</tr>\n<tr>\n<td>身份证号</td>\n<td>104111199009103531</td>\n</tr>\n<tr>\n<td>职务</td>\n<td>工程师</td>\n</tr>\n<tr>\n<td>工作年限</td>\n<td>10</td>\n</tr>\n<tr>\n<td>月收入</td>\n<td>10000</td>\n</tr>\n<tr>\n<td>大写</td>\n<td>壹万元整</td>\n</tr>\n<tr>\n<td>联系人</td>\n<td>李四</td>\n</tr>\n<tr>\n<td>单位名称</td>\n<td>格物致知股份有限公司</td>\n</tr>\n<tr>\n<td>单位地址</td>\n<td>珠海市横琴新区宝华路6号105室-67425</td>\n</tr>\n<tr>\n<td>联系电话</td>\n<td>0756-8627528</td>\n</tr>\n</tbody></table>\n<h2 id=\"3-编写python代码并运行\"><a href=\"#3-编写python代码并运行\" class=\"headerlink\" title=\"3. 编写python代码并运行\"></a>3. 编写python代码并运行</h2><p>在word模板的同级目录，新建一个writeword.py文件，用记事本或其他文本编辑工具打开。</p>\n<p>编程思路：</p>\n<ol>\n<li>用python打开对应doc模板</li>\n<li>按顺序找到每一个需要替换的位置字符”XXXX”，替换为对应的内容</li>\n<li>另存为doc为另一个文件</li>\n</ol>\n<p>在文本编辑工具中输入如下代码，保存并关闭。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from docx import Document</span><br><span class=\"line\">#准备写入内容</span><br><span class=\"line\">name=&quot;张三&quot;</span><br><span class=\"line\">id_code=&quot;104111199009103531&quot;</span><br><span class=\"line\">career=&quot;工程师&quot;</span><br><span class=\"line\">working_years=&quot;10&quot;</span><br><span class=\"line\">salary=&quot;10000&quot;</span><br><span class=\"line\">salary_uppercase=&quot;壹万元整&quot;</span><br><span class=\"line\">contact=&quot;李四&quot;</span><br><span class=\"line\">company=&quot;格物厚德股份有限公司&quot;</span><br><span class=\"line\">address=&quot;珠海市横琴新区宝华路6号105室-67425&quot;</span><br><span class=\"line\">tel=&quot;0756-8627528&quot;</span><br><span class=\"line\">#打开doc</span><br><span class=\"line\"></span><br><span class=\"line\">textlist=[name,id_code,career,working_years,salary,salary_uppercase,company,address,contact,tel]</span><br><span class=\"line\"></span><br><span class=\"line\">doc = Document(&quot;个人收入证明.docx&quot;)</span><br><span class=\"line\"></span><br><span class=\"line\">count=0</span><br><span class=\"line\"></span><br><span class=\"line\">for p in doc.paragraphs:</span><br><span class=\"line\">        if &apos;XXXX&apos; in p.text:</span><br><span class=\"line\">            inline = p.runs</span><br><span class=\"line\">            for i in range(len(inline)):</span><br><span class=\"line\">                if &apos;XXXX&apos; in inline[i].text:</span><br><span class=\"line\">                    text = inline[i].text.replace(&apos;XXXX&apos;, textlist[count])</span><br><span class=\"line\">                    inline[i].text = text</span><br><span class=\"line\">                    count+=1</span><br><span class=\"line\">                    print(count)</span><br><span class=\"line\">doc.save(&quot;%s_个人收入证明.docx&quot;%name)</span><br></pre></td></tr></table></figure>\n\n<p>在同级目录，打开cmd，运行writeword.py <code>python writeword.py</code></p>\n<p>生成结果如下：<br><code>张三_个人收入证明.docx</code><br><img src=\"http://jcjview.github.io/img/pythonword2.png\" alt></p>\n<h2 id=\"4-通过读取excel表格中的信息，批量生成word文件\"><a href=\"#4-通过读取excel表格中的信息，批量生成word文件\" class=\"headerlink\" title=\"4.通过读取excel表格中的信息，批量生成word文件\"></a>4.通过读取excel表格中的信息，批量生成word文件</h2><p>这里生成了对应word文件，但也有几个问题：</p>\n<ol>\n<li>对应的日期并没有自动填写，应当填写文件生成时对应的日期</li>\n<li>如果是生成大量同样word文档的话，目前的程序也需要一个一个改，并没有提升太多效率</li>\n</ol>\n<p>如果您看过我们之前的2篇用python读写excel的文章，您肯定就会想到，可以利用读取excel表格里的内容，批量生成对应的word文档。对，让我们继续吧！</p>\n<p>这里再准备一个excel文件，将需要批量写入的信息写在excel中，并保存为income.xlsx在同级目录，如下图：</p>\n<p><img src=\"http://jcjview.github.io/img/pythonword23.png\" alt></p>\n<p>修改python 文件writeword.py</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from docx import Document</span><br><span class=\"line\">#准备写入内容</span><br><span class=\"line\">import xlrd</span><br><span class=\"line\">import time</span><br><span class=\"line\"># 当前时间元组</span><br><span class=\"line\">from datetime import datetime</span><br><span class=\"line\">nt=datetime.now()</span><br><span class=\"line\"># 可以输入中文年月日</span><br><span class=\"line\">datestr=nt.strftime(&apos;%Y&#123;y&#125;%m&#123;m&#125;%d&#123;d&#125;&apos;).format(y=&apos;年&apos;, m=&apos;月&apos;, d=&apos;日&apos;)</span><br><span class=\"line\"></span><br><span class=\"line\">xlsx=xlrd.open_workbook(&apos;income.xlsx&apos;)</span><br><span class=\"line\">sheet=xlsx.sheet_by_index(0)</span><br><span class=\"line\">for row in range(1,sheet.nrows):</span><br><span class=\"line\">    doc = Document(&quot;个人收入证明.docx&quot;)</span><br><span class=\"line\">    count=0</span><br><span class=\"line\">    textlist=[]</span><br><span class=\"line\">    for col in range(0,sheet.ncols):</span><br><span class=\"line\">        textlist.append(str(sheet.cell_value(row, col)))</span><br><span class=\"line\"></span><br><span class=\"line\">    for p in doc.paragraphs:</span><br><span class=\"line\">            if &apos;XXXX&apos; in p.text:</span><br><span class=\"line\">                inline = p.runs</span><br><span class=\"line\">                for i in range(len(inline)):</span><br><span class=\"line\">                    if &apos;XXXX&apos; in inline[i].text:</span><br><span class=\"line\">                        text = inline[i].text.replace(&apos;XXXX&apos;, textlist[count])</span><br><span class=\"line\">                        inline[i].text = text</span><br><span class=\"line\">                        count+=1</span><br><span class=\"line\">            if &apos;X 年   X 月  X 日&apos; in p.text:</span><br><span class=\"line\">                inline = p.runs</span><br><span class=\"line\">                for i in range(len(inline)):</span><br><span class=\"line\">                    if &apos;X 年   X 月  X 日&apos; in inline[i].text:</span><br><span class=\"line\">                        text = inline[i].text.replace(&apos;X 年   X 月  X 日&apos;, datestr)</span><br><span class=\"line\">                        inline[i].text = text</span><br><span class=\"line\"></span><br><span class=\"line\">    doc.save(&quot;%s_个人收入证明.docx&quot;%textlist[0])</span><br></pre></td></tr></table></figure>\n\n\n<p>  运行后，输入结果：</p>\n<p><img src=\"http://jcjview.github.io/img/pythonword3.png\" alt></p>\n<p><img src=\"http://jcjview.github.io/img/pythonword4.png\" alt></p>\n<p><em>人生苦短，我用python早下班。如果觉得不错，对你工作中有帮助，请加我微信公众号flypython，我们一起探讨python相关问题</em></p>\n<p>  <img src=\"https://flypython.com/images/wechat.png\" alt=\"flypython微信公众号\"></p>\n"},{"date":"2019-01-02T16:00:00.000Z","title":"Python批量转换任意文档格式","subtitle":"极简Python自动化办公系列","cover":"/images/oa3.jpg","_content":"在工作中，常常会遇到文档格式的转换。如果数据不多，手工转换就可以。如果是大量文档，那我们应该怎么办呢？\n\n今天我们将使用Python来批量处理文档转换的问题.\n\n#### 关于unoconv \n\nunoconv是一款跨平台的工具，用于格式转换，支持命令行。底层实现是依赖于开源的LibreOffice/OpenOffice。\n\n项目地址：https://github.com/unoconv/unoconv\n\n文档地址： http://dag.wiee.rs/home-made/unoconv/\n\n根据unoconv的文档介绍，支持上百种文档格式的转换，已经覆盖了绝大部分的需求。\n\n#### 使用unoconv\n\n安装unoconv比较繁琐，而且需要针对中文进行进一步的字符集配置。我们可以选择别人已经集成好的服务来进行操作，在这里我们选择了docker-unoconv-webservice项目。\n\n项目地址为： https://github.com/zrrrzzt/docker-unoconv-webservice\n\n查看项目的README，接口如下: \n\n`curl --form file=@myfile.docx http://localhost/unoconv/pdf > myfile.pdf`\n\n我们使用下列命令，先把项目的镜像pull下来\n\n`docker pull zrrrzzt/docker-unoconv-webservice`\n\n然后启动命令如下：\n\n`docker run -d -p 80:3000 zrrrzzt/docker-unoconv-webservice`\n\n服务在80端口上提供服务，如果80端口被占用，可以调整为其他的端口\n\n确认服务正在运行：\n\n`docker ps | grep zrrrzzt/docker-unoconv-webservice`\n\n```\n[flypython] docker ps | grep zrrrzzt/docker-unoconv-webservice                                         \nc014cf335b31        zrrrzzt/docker-unoconv-webservice   \"/bin/sh -c '/usr/bi…\"   2 minutes ago       Up 2 minutes        0.0.0.0:80->3000/tcp   brave_blackburn\n\n```\n\n从docx转换为pdf：\n\n`curl --form file=@demo.docx http://localhost/unoconv/pdf > demo.pdf` \n\n```\n[flypython] curl --form file=@demo.docx http://localhost/unoconv/pdf > demo.pdf               \n  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current\n                                 Dload  Upload   Total   Spent    Left  Speed\n100 12089  100  4242  100  7847   2532   4684  0:00:01  0:00:01 --:--:--  7213\n[flypython] ls demo*                                                                                   \ndemo.docx demo.pdf\n\n```\n\n#### 使用Python批量请求\n\nPython批量请求的思路是，把需要转换的文档发送到服务器，服务器会返回转换后的格式，我们保存为文件就可以了。\n\n```\ndef post_file(url,path):\n    filename = os.path.basename(path)\n    convert_name = str(filename).split('.')[0] + '.pdf'\n\n    m = MultipartEncoder(\n        fields= {\n            'file':(filename,open(path,'rb')),\n        }\n    )\n    response = requests.request('POST', url, data=m, headers={'Content-Type':m.content_type})\n\n    with open(convert_name, 'wb') as f:\n        f.write(response.content)\n\n    return convert_name\n```\n\n好了，更多类型转换，更完整的应用需要你根据业务来完善，这次的介绍就到这里了。demo完整代码在github上，点击原文可以获取。\n\n\nhttps://github.com/flypythoncom/flypython/blob/master/convert.py\n\n\n\n\n\n","source":"_posts/python-oa-03.md","raw":"---\ndate: 2019-01-03 00:00\ntitle:  Python批量转换任意文档格式\nsubtitle: 极简Python自动化办公系列\ncover: /images/oa3.jpg\ncategories: [自动化办公]\n---\n在工作中，常常会遇到文档格式的转换。如果数据不多，手工转换就可以。如果是大量文档，那我们应该怎么办呢？\n\n今天我们将使用Python来批量处理文档转换的问题.\n\n#### 关于unoconv \n\nunoconv是一款跨平台的工具，用于格式转换，支持命令行。底层实现是依赖于开源的LibreOffice/OpenOffice。\n\n项目地址：https://github.com/unoconv/unoconv\n\n文档地址： http://dag.wiee.rs/home-made/unoconv/\n\n根据unoconv的文档介绍，支持上百种文档格式的转换，已经覆盖了绝大部分的需求。\n\n#### 使用unoconv\n\n安装unoconv比较繁琐，而且需要针对中文进行进一步的字符集配置。我们可以选择别人已经集成好的服务来进行操作，在这里我们选择了docker-unoconv-webservice项目。\n\n项目地址为： https://github.com/zrrrzzt/docker-unoconv-webservice\n\n查看项目的README，接口如下: \n\n`curl --form file=@myfile.docx http://localhost/unoconv/pdf > myfile.pdf`\n\n我们使用下列命令，先把项目的镜像pull下来\n\n`docker pull zrrrzzt/docker-unoconv-webservice`\n\n然后启动命令如下：\n\n`docker run -d -p 80:3000 zrrrzzt/docker-unoconv-webservice`\n\n服务在80端口上提供服务，如果80端口被占用，可以调整为其他的端口\n\n确认服务正在运行：\n\n`docker ps | grep zrrrzzt/docker-unoconv-webservice`\n\n```\n[flypython] docker ps | grep zrrrzzt/docker-unoconv-webservice                                         \nc014cf335b31        zrrrzzt/docker-unoconv-webservice   \"/bin/sh -c '/usr/bi…\"   2 minutes ago       Up 2 minutes        0.0.0.0:80->3000/tcp   brave_blackburn\n\n```\n\n从docx转换为pdf：\n\n`curl --form file=@demo.docx http://localhost/unoconv/pdf > demo.pdf` \n\n```\n[flypython] curl --form file=@demo.docx http://localhost/unoconv/pdf > demo.pdf               \n  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current\n                                 Dload  Upload   Total   Spent    Left  Speed\n100 12089  100  4242  100  7847   2532   4684  0:00:01  0:00:01 --:--:--  7213\n[flypython] ls demo*                                                                                   \ndemo.docx demo.pdf\n\n```\n\n#### 使用Python批量请求\n\nPython批量请求的思路是，把需要转换的文档发送到服务器，服务器会返回转换后的格式，我们保存为文件就可以了。\n\n```\ndef post_file(url,path):\n    filename = os.path.basename(path)\n    convert_name = str(filename).split('.')[0] + '.pdf'\n\n    m = MultipartEncoder(\n        fields= {\n            'file':(filename,open(path,'rb')),\n        }\n    )\n    response = requests.request('POST', url, data=m, headers={'Content-Type':m.content_type})\n\n    with open(convert_name, 'wb') as f:\n        f.write(response.content)\n\n    return convert_name\n```\n\n好了，更多类型转换，更完整的应用需要你根据业务来完善，这次的介绍就到这里了。demo完整代码在github上，点击原文可以获取。\n\n\nhttps://github.com/flypythoncom/flypython/blob/master/convert.py\n\n\n\n\n\n","slug":"python-oa-03","published":1,"updated":"2020-01-02T03:48:38.668Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck4wdip8f000cwz1b9oqh9k17","content":"<p>在工作中，常常会遇到文档格式的转换。如果数据不多，手工转换就可以。如果是大量文档，那我们应该怎么办呢？</p>\n<p>今天我们将使用Python来批量处理文档转换的问题.</p>\n<h4 id=\"关于unoconv\"><a href=\"#关于unoconv\" class=\"headerlink\" title=\"关于unoconv\"></a>关于unoconv</h4><p>unoconv是一款跨平台的工具，用于格式转换，支持命令行。底层实现是依赖于开源的LibreOffice/OpenOffice。</p>\n<p>项目地址：<a href=\"https://github.com/unoconv/unoconv\" target=\"_blank\" rel=\"noopener\">https://github.com/unoconv/unoconv</a></p>\n<p>文档地址： <a href=\"http://dag.wiee.rs/home-made/unoconv/\" target=\"_blank\" rel=\"noopener\">http://dag.wiee.rs/home-made/unoconv/</a></p>\n<p>根据unoconv的文档介绍，支持上百种文档格式的转换，已经覆盖了绝大部分的需求。</p>\n<h4 id=\"使用unoconv\"><a href=\"#使用unoconv\" class=\"headerlink\" title=\"使用unoconv\"></a>使用unoconv</h4><p>安装unoconv比较繁琐，而且需要针对中文进行进一步的字符集配置。我们可以选择别人已经集成好的服务来进行操作，在这里我们选择了docker-unoconv-webservice项目。</p>\n<p>项目地址为： <a href=\"https://github.com/zrrrzzt/docker-unoconv-webservice\" target=\"_blank\" rel=\"noopener\">https://github.com/zrrrzzt/docker-unoconv-webservice</a></p>\n<p>查看项目的README，接口如下: </p>\n<p><code>curl --form file=@myfile.docx http://localhost/unoconv/pdf &gt; myfile.pdf</code></p>\n<p>我们使用下列命令，先把项目的镜像pull下来</p>\n<p><code>docker pull zrrrzzt/docker-unoconv-webservice</code></p>\n<p>然后启动命令如下：</p>\n<p><code>docker run -d -p 80:3000 zrrrzzt/docker-unoconv-webservice</code></p>\n<p>服务在80端口上提供服务，如果80端口被占用，可以调整为其他的端口</p>\n<p>确认服务正在运行：</p>\n<p><code>docker ps | grep zrrrzzt/docker-unoconv-webservice</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[flypython] docker ps | grep zrrrzzt/docker-unoconv-webservice                                         </span><br><span class=\"line\">c014cf335b31        zrrrzzt/docker-unoconv-webservice   &quot;/bin/sh -c &apos;/usr/bi…&quot;   2 minutes ago       Up 2 minutes        0.0.0.0:80-&gt;3000/tcp   brave_blackburn</span><br></pre></td></tr></table></figure>\n\n<p>从docx转换为pdf：</p>\n<p><code>curl --form file=@demo.docx http://localhost/unoconv/pdf &gt; demo.pdf</code> </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[flypython] curl --form file=@demo.docx http://localhost/unoconv/pdf &gt; demo.pdf               </span><br><span class=\"line\">  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current</span><br><span class=\"line\">                                 Dload  Upload   Total   Spent    Left  Speed</span><br><span class=\"line\">100 12089  100  4242  100  7847   2532   4684  0:00:01  0:00:01 --:--:--  7213</span><br><span class=\"line\">[flypython] ls demo*                                                                                   </span><br><span class=\"line\">demo.docx demo.pdf</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"使用Python批量请求\"><a href=\"#使用Python批量请求\" class=\"headerlink\" title=\"使用Python批量请求\"></a>使用Python批量请求</h4><p>Python批量请求的思路是，把需要转换的文档发送到服务器，服务器会返回转换后的格式，我们保存为文件就可以了。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">def post_file(url,path):</span><br><span class=\"line\">    filename = os.path.basename(path)</span><br><span class=\"line\">    convert_name = str(filename).split(&apos;.&apos;)[0] + &apos;.pdf&apos;</span><br><span class=\"line\"></span><br><span class=\"line\">    m = MultipartEncoder(</span><br><span class=\"line\">        fields= &#123;</span><br><span class=\"line\">            &apos;file&apos;:(filename,open(path,&apos;rb&apos;)),</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    )</span><br><span class=\"line\">    response = requests.request(&apos;POST&apos;, url, data=m, headers=&#123;&apos;Content-Type&apos;:m.content_type&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">    with open(convert_name, &apos;wb&apos;) as f:</span><br><span class=\"line\">        f.write(response.content)</span><br><span class=\"line\"></span><br><span class=\"line\">    return convert_name</span><br></pre></td></tr></table></figure>\n\n<p>好了，更多类型转换，更完整的应用需要你根据业务来完善，这次的介绍就到这里了。demo完整代码在github上，点击原文可以获取。</p>\n<p><a href=\"https://github.com/flypythoncom/flypython/blob/master/convert.py\" target=\"_blank\" rel=\"noopener\">https://github.com/flypythoncom/flypython/blob/master/convert.py</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>在工作中，常常会遇到文档格式的转换。如果数据不多，手工转换就可以。如果是大量文档，那我们应该怎么办呢？</p>\n<p>今天我们将使用Python来批量处理文档转换的问题.</p>\n<h4 id=\"关于unoconv\"><a href=\"#关于unoconv\" class=\"headerlink\" title=\"关于unoconv\"></a>关于unoconv</h4><p>unoconv是一款跨平台的工具，用于格式转换，支持命令行。底层实现是依赖于开源的LibreOffice/OpenOffice。</p>\n<p>项目地址：<a href=\"https://github.com/unoconv/unoconv\" target=\"_blank\" rel=\"noopener\">https://github.com/unoconv/unoconv</a></p>\n<p>文档地址： <a href=\"http://dag.wiee.rs/home-made/unoconv/\" target=\"_blank\" rel=\"noopener\">http://dag.wiee.rs/home-made/unoconv/</a></p>\n<p>根据unoconv的文档介绍，支持上百种文档格式的转换，已经覆盖了绝大部分的需求。</p>\n<h4 id=\"使用unoconv\"><a href=\"#使用unoconv\" class=\"headerlink\" title=\"使用unoconv\"></a>使用unoconv</h4><p>安装unoconv比较繁琐，而且需要针对中文进行进一步的字符集配置。我们可以选择别人已经集成好的服务来进行操作，在这里我们选择了docker-unoconv-webservice项目。</p>\n<p>项目地址为： <a href=\"https://github.com/zrrrzzt/docker-unoconv-webservice\" target=\"_blank\" rel=\"noopener\">https://github.com/zrrrzzt/docker-unoconv-webservice</a></p>\n<p>查看项目的README，接口如下: </p>\n<p><code>curl --form file=@myfile.docx http://localhost/unoconv/pdf &gt; myfile.pdf</code></p>\n<p>我们使用下列命令，先把项目的镜像pull下来</p>\n<p><code>docker pull zrrrzzt/docker-unoconv-webservice</code></p>\n<p>然后启动命令如下：</p>\n<p><code>docker run -d -p 80:3000 zrrrzzt/docker-unoconv-webservice</code></p>\n<p>服务在80端口上提供服务，如果80端口被占用，可以调整为其他的端口</p>\n<p>确认服务正在运行：</p>\n<p><code>docker ps | grep zrrrzzt/docker-unoconv-webservice</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[flypython] docker ps | grep zrrrzzt/docker-unoconv-webservice                                         </span><br><span class=\"line\">c014cf335b31        zrrrzzt/docker-unoconv-webservice   &quot;/bin/sh -c &apos;/usr/bi…&quot;   2 minutes ago       Up 2 minutes        0.0.0.0:80-&gt;3000/tcp   brave_blackburn</span><br></pre></td></tr></table></figure>\n\n<p>从docx转换为pdf：</p>\n<p><code>curl --form file=@demo.docx http://localhost/unoconv/pdf &gt; demo.pdf</code> </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[flypython] curl --form file=@demo.docx http://localhost/unoconv/pdf &gt; demo.pdf               </span><br><span class=\"line\">  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current</span><br><span class=\"line\">                                 Dload  Upload   Total   Spent    Left  Speed</span><br><span class=\"line\">100 12089  100  4242  100  7847   2532   4684  0:00:01  0:00:01 --:--:--  7213</span><br><span class=\"line\">[flypython] ls demo*                                                                                   </span><br><span class=\"line\">demo.docx demo.pdf</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"使用Python批量请求\"><a href=\"#使用Python批量请求\" class=\"headerlink\" title=\"使用Python批量请求\"></a>使用Python批量请求</h4><p>Python批量请求的思路是，把需要转换的文档发送到服务器，服务器会返回转换后的格式，我们保存为文件就可以了。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">def post_file(url,path):</span><br><span class=\"line\">    filename = os.path.basename(path)</span><br><span class=\"line\">    convert_name = str(filename).split(&apos;.&apos;)[0] + &apos;.pdf&apos;</span><br><span class=\"line\"></span><br><span class=\"line\">    m = MultipartEncoder(</span><br><span class=\"line\">        fields= &#123;</span><br><span class=\"line\">            &apos;file&apos;:(filename,open(path,&apos;rb&apos;)),</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    )</span><br><span class=\"line\">    response = requests.request(&apos;POST&apos;, url, data=m, headers=&#123;&apos;Content-Type&apos;:m.content_type&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">    with open(convert_name, &apos;wb&apos;) as f:</span><br><span class=\"line\">        f.write(response.content)</span><br><span class=\"line\"></span><br><span class=\"line\">    return convert_name</span><br></pre></td></tr></table></figure>\n\n<p>好了，更多类型转换，更完整的应用需要你根据业务来完善，这次的介绍就到这里了。demo完整代码在github上，点击原文可以获取。</p>\n<p><a href=\"https://github.com/flypythoncom/flypython/blob/master/convert.py\" target=\"_blank\" rel=\"noopener\">https://github.com/flypythoncom/flypython/blob/master/convert.py</a></p>\n"},{"date":"2019-01-31T16:00:00.000Z","title":"你是如何自学Python的？","subtitle":"Python入门教程","cover":"/images/tutorial1.png","_content":"# 你是如何自学 Python 的？\n\n![](http://jcjview.github.io/img/flypythonflypython001.jpg)\n\nwhy python?\n \n> 你可能听说过python\n>\n>Python入门相对容易又可以干很多事(网站,>运维,数据,爬虫等），是一门方便的工具语言。\n>**2019年8月TIOBE排名显示Python已经名列第3**，仅次于java和c，并且还在快速增长中。\n\n## Python的使用场景\n\n### 01 数据分析\n\n对于数据分析和机器学习，Python是首选编程语言。python有众多数据分析工具，知名数据分析比赛网站kaggle，90%以上的竞赛代码都是用python写成。大数据平台如spark、flink，python有完整的支持api可调用。\n### 02 网站开发\n对于网站开发，Python的生态环境也可以支撑起重量级的产品。\n国外的Youtube，Instagram，Pinterest，Reddit，Dropbox，Disqus， Quora等知名应用一开始都是基于Python构建，国内的豆瓣，知乎，果壳，饿了么，等初期在也是Python应用的典型。\n\n### 03 爬虫\n\n对于爬虫，则想不到比python更方便、更通用的的语言了。Python极其丰富的生态，诸如Request、Beautiful Soup、Scrapy、PySpider等第三方库，加上简洁易上手的语法，分分钟就能让你写出一个爬虫来。\n\n\n此外，还有机器学习、人工智能、科学计算、IT运维等领域，Python都是极其方便顺手的工具，更重要的是，永远开源，免费。\n\n\n## Python的就业前景\n\n\n在it行业飞速发展的今天，在数据成为it命脉的时代，python的重要意义越来越不言自明。学习python，不仅仅是一门可以调用数据结构和算法的语言，在学会python的同时，可以同时学会爬取互联网海量资源，学会自动化分析互联网海量数据，学会制作展示宣传的网站，学会使用人工智能预测和改变世界。\n\n学习一门语言，得到多种技能，以及大数据的思维方式，何乐而不为呢。\n\n### Python有多火？\n\nPython有多火？大多数IT研发岗位，都需要Python程序员；甚至许多非研发岗位，纷纷在JD中给出精通Python技能者优先的字样。\n\n![](http://jcjview.github.io/img/flypythonpython%20job.jpg)\n\n\n![](http://jcjview.github.io/img/flypythonpython%20job2.jpg)\n\n\n## Python的学习曲线\n\n\n对于爱好者来说， python上手非常容易，学习曲线非常平滑。基本的例子，几行代码都能完成。\n\npython代码环境安装几乎是傻瓜式的，不像java要考虑众多库的配置和解决冲突。如果有编程的基础甚至只需要几小时就能上手，即使没有基础的小白，通过努力，7-10天，每天1小时，也可以快速掌握基本编程技巧。\n\n##  Python的学习资料\n\n\nPython官网 \nPython.org\n\n廖雪峰的Python教程  \nhttps://www.liaoxuefeng.com/\n\n简明python教程  \nhttp://www.kuqin.com/abyteofpython_cn/\n\n---\n\n重点推荐书籍：《Python 基础教程》\n\n![](http://jcjview.github.io/img/flypythonflpython001zhihu.jpg)\n\n知乎评价:\n![](\nhttp://jcjview.github.io/img/flypythonflpython001zhihu002.jpg)\n\n\n\n其他入门书籍：\n\n* Head First Python\n* Dive Into Python\n* Python 核心编程\n* 深入理解 Python\n* Python 标准库\n* Python 编程指南\n\n\n\n（我们搜集了一些网上的电子书版本，关注公众号，回复\"python\"获取）\n\n当然，英文著作虽然经典，但涉及领域众多，概念多，信息量大，不适合速成。网上的资料丰富，但也鱼龙混杂。\n\n以 “Python入门” 为关键字搜索出的结果成千上万。不少小白选手难免会东一榔头西一棒槌，最终看了很多文章，却仍没跨过新手那道门槛。\n\n我们这里有一个python的入门课程，帮你把需要掌握的python基础知识都融汇贯通在小篇幅中。我们提供了很多有趣的实践项目，并且可以进群，互助学习，遇到困难有人来解答。\n\n加群请关注公众号，并回复“训练营”\n  ![flypython微信公众号](https://flypython.com/images/wechat.png)","source":"_posts/python-tutorial-01.md","raw":"---\ndate: 2019-02-01 00:00\ntitle:  你是如何自学Python的？\nsubtitle: Python入门教程\ncover: /images/tutorial1.png\ncategories: [Python入门]\n---\n# 你是如何自学 Python 的？\n\n![](http://jcjview.github.io/img/flypythonflypython001.jpg)\n\nwhy python?\n \n> 你可能听说过python\n>\n>Python入门相对容易又可以干很多事(网站,>运维,数据,爬虫等），是一门方便的工具语言。\n>**2019年8月TIOBE排名显示Python已经名列第3**，仅次于java和c，并且还在快速增长中。\n\n## Python的使用场景\n\n### 01 数据分析\n\n对于数据分析和机器学习，Python是首选编程语言。python有众多数据分析工具，知名数据分析比赛网站kaggle，90%以上的竞赛代码都是用python写成。大数据平台如spark、flink，python有完整的支持api可调用。\n### 02 网站开发\n对于网站开发，Python的生态环境也可以支撑起重量级的产品。\n国外的Youtube，Instagram，Pinterest，Reddit，Dropbox，Disqus， Quora等知名应用一开始都是基于Python构建，国内的豆瓣，知乎，果壳，饿了么，等初期在也是Python应用的典型。\n\n### 03 爬虫\n\n对于爬虫，则想不到比python更方便、更通用的的语言了。Python极其丰富的生态，诸如Request、Beautiful Soup、Scrapy、PySpider等第三方库，加上简洁易上手的语法，分分钟就能让你写出一个爬虫来。\n\n\n此外，还有机器学习、人工智能、科学计算、IT运维等领域，Python都是极其方便顺手的工具，更重要的是，永远开源，免费。\n\n\n## Python的就业前景\n\n\n在it行业飞速发展的今天，在数据成为it命脉的时代，python的重要意义越来越不言自明。学习python，不仅仅是一门可以调用数据结构和算法的语言，在学会python的同时，可以同时学会爬取互联网海量资源，学会自动化分析互联网海量数据，学会制作展示宣传的网站，学会使用人工智能预测和改变世界。\n\n学习一门语言，得到多种技能，以及大数据的思维方式，何乐而不为呢。\n\n### Python有多火？\n\nPython有多火？大多数IT研发岗位，都需要Python程序员；甚至许多非研发岗位，纷纷在JD中给出精通Python技能者优先的字样。\n\n![](http://jcjview.github.io/img/flypythonpython%20job.jpg)\n\n\n![](http://jcjview.github.io/img/flypythonpython%20job2.jpg)\n\n\n## Python的学习曲线\n\n\n对于爱好者来说， python上手非常容易，学习曲线非常平滑。基本的例子，几行代码都能完成。\n\npython代码环境安装几乎是傻瓜式的，不像java要考虑众多库的配置和解决冲突。如果有编程的基础甚至只需要几小时就能上手，即使没有基础的小白，通过努力，7-10天，每天1小时，也可以快速掌握基本编程技巧。\n\n##  Python的学习资料\n\n\nPython官网 \nPython.org\n\n廖雪峰的Python教程  \nhttps://www.liaoxuefeng.com/\n\n简明python教程  \nhttp://www.kuqin.com/abyteofpython_cn/\n\n---\n\n重点推荐书籍：《Python 基础教程》\n\n![](http://jcjview.github.io/img/flypythonflpython001zhihu.jpg)\n\n知乎评价:\n![](\nhttp://jcjview.github.io/img/flypythonflpython001zhihu002.jpg)\n\n\n\n其他入门书籍：\n\n* Head First Python\n* Dive Into Python\n* Python 核心编程\n* 深入理解 Python\n* Python 标准库\n* Python 编程指南\n\n\n\n（我们搜集了一些网上的电子书版本，关注公众号，回复\"python\"获取）\n\n当然，英文著作虽然经典，但涉及领域众多，概念多，信息量大，不适合速成。网上的资料丰富，但也鱼龙混杂。\n\n以 “Python入门” 为关键字搜索出的结果成千上万。不少小白选手难免会东一榔头西一棒槌，最终看了很多文章，却仍没跨过新手那道门槛。\n\n我们这里有一个python的入门课程，帮你把需要掌握的python基础知识都融汇贯通在小篇幅中。我们提供了很多有趣的实践项目，并且可以进群，互助学习，遇到困难有人来解答。\n\n加群请关注公众号，并回复“训练营”\n  ![flypython微信公众号](https://flypython.com/images/wechat.png)","slug":"python-tutorial-01","published":1,"updated":"2020-01-02T04:31:18.548Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck4wdip8i000fwz1b5pmtqb6w","content":"<h1 id=\"你是如何自学-Python-的？\"><a href=\"#你是如何自学-Python-的？\" class=\"headerlink\" title=\"你是如何自学 Python 的？\"></a>你是如何自学 Python 的？</h1><p><img src=\"http://jcjview.github.io/img/flypythonflypython001.jpg\" alt></p>\n<p>why python?</p>\n<blockquote>\n<p>你可能听说过python</p>\n<p>Python入门相对容易又可以干很多事(网站,&gt;运维,数据,爬虫等），是一门方便的工具语言。<br><strong>2019年8月TIOBE排名显示Python已经名列第3</strong>，仅次于java和c，并且还在快速增长中。</p>\n</blockquote>\n<h2 id=\"Python的使用场景\"><a href=\"#Python的使用场景\" class=\"headerlink\" title=\"Python的使用场景\"></a>Python的使用场景</h2><h3 id=\"01-数据分析\"><a href=\"#01-数据分析\" class=\"headerlink\" title=\"01 数据分析\"></a>01 数据分析</h3><p>对于数据分析和机器学习，Python是首选编程语言。python有众多数据分析工具，知名数据分析比赛网站kaggle，90%以上的竞赛代码都是用python写成。大数据平台如spark、flink，python有完整的支持api可调用。</p>\n<h3 id=\"02-网站开发\"><a href=\"#02-网站开发\" class=\"headerlink\" title=\"02 网站开发\"></a>02 网站开发</h3><p>对于网站开发，Python的生态环境也可以支撑起重量级的产品。<br>国外的Youtube，Instagram，Pinterest，Reddit，Dropbox，Disqus， Quora等知名应用一开始都是基于Python构建，国内的豆瓣，知乎，果壳，饿了么，等初期在也是Python应用的典型。</p>\n<h3 id=\"03-爬虫\"><a href=\"#03-爬虫\" class=\"headerlink\" title=\"03 爬虫\"></a>03 爬虫</h3><p>对于爬虫，则想不到比python更方便、更通用的的语言了。Python极其丰富的生态，诸如Request、Beautiful Soup、Scrapy、PySpider等第三方库，加上简洁易上手的语法，分分钟就能让你写出一个爬虫来。</p>\n<p>此外，还有机器学习、人工智能、科学计算、IT运维等领域，Python都是极其方便顺手的工具，更重要的是，永远开源，免费。</p>\n<h2 id=\"Python的就业前景\"><a href=\"#Python的就业前景\" class=\"headerlink\" title=\"Python的就业前景\"></a>Python的就业前景</h2><p>在it行业飞速发展的今天，在数据成为it命脉的时代，python的重要意义越来越不言自明。学习python，不仅仅是一门可以调用数据结构和算法的语言，在学会python的同时，可以同时学会爬取互联网海量资源，学会自动化分析互联网海量数据，学会制作展示宣传的网站，学会使用人工智能预测和改变世界。</p>\n<p>学习一门语言，得到多种技能，以及大数据的思维方式，何乐而不为呢。</p>\n<h3 id=\"Python有多火？\"><a href=\"#Python有多火？\" class=\"headerlink\" title=\"Python有多火？\"></a>Python有多火？</h3><p>Python有多火？大多数IT研发岗位，都需要Python程序员；甚至许多非研发岗位，纷纷在JD中给出精通Python技能者优先的字样。</p>\n<p><img src=\"http://jcjview.github.io/img/flypythonpython%20job.jpg\" alt></p>\n<p><img src=\"http://jcjview.github.io/img/flypythonpython%20job2.jpg\" alt></p>\n<h2 id=\"Python的学习曲线\"><a href=\"#Python的学习曲线\" class=\"headerlink\" title=\"Python的学习曲线\"></a>Python的学习曲线</h2><p>对于爱好者来说， python上手非常容易，学习曲线非常平滑。基本的例子，几行代码都能完成。</p>\n<p>python代码环境安装几乎是傻瓜式的，不像java要考虑众多库的配置和解决冲突。如果有编程的基础甚至只需要几小时就能上手，即使没有基础的小白，通过努力，7-10天，每天1小时，也可以快速掌握基本编程技巧。</p>\n<h2 id=\"Python的学习资料\"><a href=\"#Python的学习资料\" class=\"headerlink\" title=\"Python的学习资料\"></a>Python的学习资料</h2><p>Python官网<br>Python.org</p>\n<p>廖雪峰的Python教程<br><a href=\"https://www.liaoxuefeng.com/\" target=\"_blank\" rel=\"noopener\">https://www.liaoxuefeng.com/</a></p>\n<p>简明python教程<br><a href=\"http://www.kuqin.com/abyteofpython_cn/\" target=\"_blank\" rel=\"noopener\">http://www.kuqin.com/abyteofpython_cn/</a></p>\n<hr>\n<p>重点推荐书籍：《Python 基础教程》</p>\n<p><img src=\"http://jcjview.github.io/img/flypythonflpython001zhihu.jpg\" alt></p>\n<p>知乎评价:<br><img src=\"http://jcjview.github.io/img/flypythonflpython001zhihu002.jpg\" alt></p>\n<p>其他入门书籍：</p>\n<ul>\n<li>Head First Python</li>\n<li>Dive Into Python</li>\n<li>Python 核心编程</li>\n<li>深入理解 Python</li>\n<li>Python 标准库</li>\n<li>Python 编程指南</li>\n</ul>\n<p>（我们搜集了一些网上的电子书版本，关注公众号，回复”python”获取）</p>\n<p>当然，英文著作虽然经典，但涉及领域众多，概念多，信息量大，不适合速成。网上的资料丰富，但也鱼龙混杂。</p>\n<p>以 “Python入门” 为关键字搜索出的结果成千上万。不少小白选手难免会东一榔头西一棒槌，最终看了很多文章，却仍没跨过新手那道门槛。</p>\n<p>我们这里有一个python的入门课程，帮你把需要掌握的python基础知识都融汇贯通在小篇幅中。我们提供了很多有趣的实践项目，并且可以进群，互助学习，遇到困难有人来解答。</p>\n<p>加群请关注公众号，并回复“训练营”<br>  <img src=\"https://flypython.com/images/wechat.png\" alt=\"flypython微信公众号\"></p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"你是如何自学-Python-的？\"><a href=\"#你是如何自学-Python-的？\" class=\"headerlink\" title=\"你是如何自学 Python 的？\"></a>你是如何自学 Python 的？</h1><p><img src=\"http://jcjview.github.io/img/flypythonflypython001.jpg\" alt></p>\n<p>why python?</p>\n<blockquote>\n<p>你可能听说过python</p>\n<p>Python入门相对容易又可以干很多事(网站,&gt;运维,数据,爬虫等），是一门方便的工具语言。<br><strong>2019年8月TIOBE排名显示Python已经名列第3</strong>，仅次于java和c，并且还在快速增长中。</p>\n</blockquote>\n<h2 id=\"Python的使用场景\"><a href=\"#Python的使用场景\" class=\"headerlink\" title=\"Python的使用场景\"></a>Python的使用场景</h2><h3 id=\"01-数据分析\"><a href=\"#01-数据分析\" class=\"headerlink\" title=\"01 数据分析\"></a>01 数据分析</h3><p>对于数据分析和机器学习，Python是首选编程语言。python有众多数据分析工具，知名数据分析比赛网站kaggle，90%以上的竞赛代码都是用python写成。大数据平台如spark、flink，python有完整的支持api可调用。</p>\n<h3 id=\"02-网站开发\"><a href=\"#02-网站开发\" class=\"headerlink\" title=\"02 网站开发\"></a>02 网站开发</h3><p>对于网站开发，Python的生态环境也可以支撑起重量级的产品。<br>国外的Youtube，Instagram，Pinterest，Reddit，Dropbox，Disqus， Quora等知名应用一开始都是基于Python构建，国内的豆瓣，知乎，果壳，饿了么，等初期在也是Python应用的典型。</p>\n<h3 id=\"03-爬虫\"><a href=\"#03-爬虫\" class=\"headerlink\" title=\"03 爬虫\"></a>03 爬虫</h3><p>对于爬虫，则想不到比python更方便、更通用的的语言了。Python极其丰富的生态，诸如Request、Beautiful Soup、Scrapy、PySpider等第三方库，加上简洁易上手的语法，分分钟就能让你写出一个爬虫来。</p>\n<p>此外，还有机器学习、人工智能、科学计算、IT运维等领域，Python都是极其方便顺手的工具，更重要的是，永远开源，免费。</p>\n<h2 id=\"Python的就业前景\"><a href=\"#Python的就业前景\" class=\"headerlink\" title=\"Python的就业前景\"></a>Python的就业前景</h2><p>在it行业飞速发展的今天，在数据成为it命脉的时代，python的重要意义越来越不言自明。学习python，不仅仅是一门可以调用数据结构和算法的语言，在学会python的同时，可以同时学会爬取互联网海量资源，学会自动化分析互联网海量数据，学会制作展示宣传的网站，学会使用人工智能预测和改变世界。</p>\n<p>学习一门语言，得到多种技能，以及大数据的思维方式，何乐而不为呢。</p>\n<h3 id=\"Python有多火？\"><a href=\"#Python有多火？\" class=\"headerlink\" title=\"Python有多火？\"></a>Python有多火？</h3><p>Python有多火？大多数IT研发岗位，都需要Python程序员；甚至许多非研发岗位，纷纷在JD中给出精通Python技能者优先的字样。</p>\n<p><img src=\"http://jcjview.github.io/img/flypythonpython%20job.jpg\" alt></p>\n<p><img src=\"http://jcjview.github.io/img/flypythonpython%20job2.jpg\" alt></p>\n<h2 id=\"Python的学习曲线\"><a href=\"#Python的学习曲线\" class=\"headerlink\" title=\"Python的学习曲线\"></a>Python的学习曲线</h2><p>对于爱好者来说， python上手非常容易，学习曲线非常平滑。基本的例子，几行代码都能完成。</p>\n<p>python代码环境安装几乎是傻瓜式的，不像java要考虑众多库的配置和解决冲突。如果有编程的基础甚至只需要几小时就能上手，即使没有基础的小白，通过努力，7-10天，每天1小时，也可以快速掌握基本编程技巧。</p>\n<h2 id=\"Python的学习资料\"><a href=\"#Python的学习资料\" class=\"headerlink\" title=\"Python的学习资料\"></a>Python的学习资料</h2><p>Python官网<br>Python.org</p>\n<p>廖雪峰的Python教程<br><a href=\"https://www.liaoxuefeng.com/\" target=\"_blank\" rel=\"noopener\">https://www.liaoxuefeng.com/</a></p>\n<p>简明python教程<br><a href=\"http://www.kuqin.com/abyteofpython_cn/\" target=\"_blank\" rel=\"noopener\">http://www.kuqin.com/abyteofpython_cn/</a></p>\n<hr>\n<p>重点推荐书籍：《Python 基础教程》</p>\n<p><img src=\"http://jcjview.github.io/img/flypythonflpython001zhihu.jpg\" alt></p>\n<p>知乎评价:<br><img src=\"http://jcjview.github.io/img/flypythonflpython001zhihu002.jpg\" alt></p>\n<p>其他入门书籍：</p>\n<ul>\n<li>Head First Python</li>\n<li>Dive Into Python</li>\n<li>Python 核心编程</li>\n<li>深入理解 Python</li>\n<li>Python 标准库</li>\n<li>Python 编程指南</li>\n</ul>\n<p>（我们搜集了一些网上的电子书版本，关注公众号，回复”python”获取）</p>\n<p>当然，英文著作虽然经典，但涉及领域众多，概念多，信息量大，不适合速成。网上的资料丰富，但也鱼龙混杂。</p>\n<p>以 “Python入门” 为关键字搜索出的结果成千上万。不少小白选手难免会东一榔头西一棒槌，最终看了很多文章，却仍没跨过新手那道门槛。</p>\n<p>我们这里有一个python的入门课程，帮你把需要掌握的python基础知识都融汇贯通在小篇幅中。我们提供了很多有趣的实践项目，并且可以进群，互助学习，遇到困难有人来解答。</p>\n<p>加群请关注公众号，并回复“训练营”<br>  <img src=\"https://flypython.com/images/wechat.png\" alt=\"flypython微信公众号\"></p>\n"},{"date":"2019-02-01T16:00:00.000Z","title":"潘石屹：我们为什么要学习Python语言？","subtitle":"Python入门教程","cover":"/images/tutorial2.png","_content":"\n>11 月 15 日，SOHO 中国董事长潘石屹在微博上宣布，开始学习一门新的语言 Python，这也是今天给自己人生的礼物。\n\n![](https://raw.githubusercontent.com/jcjview/jcjview.github.io/master/img/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20191115152124.jpg)\n\n什么鬼？房地产大佬要学python？\n\n![](https://raw.githubusercontent.com/jcjview/jcjview.github.io/master/img/pys.jpg)\n\n潘石屹，一位成功的房地产开发商老板，第一专业是石油方面的，63年出生，年龄都超过了55岁，这些描述怎么着都和编程沾不上边啊。然而，最近他非常高调地表示，要学习一款编程语言。\n虽然我不同意他的有些观点，不过他的跨界，不给自己设限的态度是还是值得学习的。\n大佬都忙着学编程，这让我们35岁左右的专业程序员们非常惭愧啊（难道非得财务自由以后才能学python么）。\n\n![](http://jcjview.github.io/img/flypythonflypython001.jpg)\n\n潘石屹学python肯定不是为了转行找工作，肯定也不是为了爬取全网美女图片，他在微博里详细阐述了我们为什么要学习Python语言。\n\n\n![](https://raw.githubusercontent.com/jcjview/jcjview.github.io/master/img/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20191115152906.png)\n\n我们为什么要学习python——使用范围广\n01.数据分析\n\n对于数据科学和机器学习，Python是首选编程语言。python有众多数据分析工具，知名数据分析比赛网站kaggle，90%以上的竞赛代码都是用python写成。大数据平台如hadoop、spark、flink、beam，python有完整的支持api可调用。\n\n02.网站开发\n\n对于网站开发，Python的生态环境也可以支撑起重量级的产品。国外的Youtube，Instagram，Pinterest，Reddit，Dropbox，Disqus， Quora等知名应用一开始都是基于Python构建，国内的豆瓣，知乎，果壳，饿了么，等初期在也是Python应用的典型。\n\n03.爬虫\n\n对于爬虫，则想不到比python更方便、更通用的的语言了。Python极其丰富的生态，诸如Request、Beautiful Soup、Scrapy、PySpider等第三方库，加上简洁易上手的语法，分分钟就能让你写出一个爬虫来。\n\n此外，还有机器学习、人工智能、科学计算、IT运维等领域，Python都是极其方便顺手的工具，更重要的是，永远开源，免费。\n\n\n\nPython的就业前景\n在it行业飞速发展的今天，在数据成为it命脉的时代，python的重要意义越来越不言自明。学习python，不仅仅是一门可以调用数据结构和算法的语言，在学会python的同时，可以同时学会爬取互联网海量资源，学会自动化分析互联网海量数据，学会制作展示宣传的网站，学会使用人工智能预测和改变世界。学习一门语言，得到多种技能，以及大数据的思维方式，何乐而不为呢。\n\nPython有多火？大多数IT研发岗位，都需要Python程序员；甚至许多非研发岗位，纷纷在JD中给出精通Python技能者优先的字样。\n\nPython的学习曲线\n对于爱好者来说， python上手非常容易，学习曲线非常平滑。基本的例子，几行代码都能完成。python代码环境安装几乎是傻瓜式的，不像java要考虑众多库的配置和解决冲突。如果有编程的基础甚至只需要几小时就能上手，即使没有基础的小白，通过努力，7-10天，每天1小时，也可以快速掌握基本编程技巧。\n\nPython的学习资料\n\nPython官网 \n\nPython.org\n\n廖雪峰的Python教程    \n\nhttps://www.liaoxuefeng.com/\n\n简明的python教程   \n\nhttp://www.kuqin.com/abyteofpython_cn/\n\n\n         \n\n重点推荐书籍：\n\n\n\n《Python 基础教程》\n\n\n\n知乎评价:\n\n\n\n其他入门书籍：\n\nHead First Python\n\nDive Into Python\n\nPython 核心编程\n\n深入理解 Python\n\nPython 标准库\n\nPython 编程指南\n\n\n\n（我们搜集了一些网上的电子书版本，关注公众号，回复\"python\"获取）\n\n\n\n\n\n\n\n当然，英文著作虽然经典，但涉及领域众多，概念多，信息量大，不适合速成。网上的资料丰富，但也鱼龙混杂。\n\n以 “Python入门” 为关键字搜索出的结果成千上万。不少小白选手难免会东一榔头西一棒槌，最终看了很多文章，却仍没跨过新手那道门槛。\n\n\n\n我们这里有一个python的入门课程，帮你把需要掌握的python基础知识都融汇贯通在小篇幅中。我们提供了很多有趣的实践项目，并且可以进群，互助学习，遇到困难有人来解答。\n\n\n\n加群请加个人微信号flypython。\n\n人生苦短，我用python早下班。如果觉得不错，对你工作中有帮助，动动手指分享给更多人哦。\n\n\n","source":"_posts/python-tutorial-02.md","raw":"---\ndate: 2019-02-02 00:00\ntitle:  潘石屹：我们为什么要学习Python语言？\nsubtitle: Python入门教程\ncover: /images/tutorial2.png\ncategories: [Python入门]\n---\n\n>11 月 15 日，SOHO 中国董事长潘石屹在微博上宣布，开始学习一门新的语言 Python，这也是今天给自己人生的礼物。\n\n![](https://raw.githubusercontent.com/jcjview/jcjview.github.io/master/img/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20191115152124.jpg)\n\n什么鬼？房地产大佬要学python？\n\n![](https://raw.githubusercontent.com/jcjview/jcjview.github.io/master/img/pys.jpg)\n\n潘石屹，一位成功的房地产开发商老板，第一专业是石油方面的，63年出生，年龄都超过了55岁，这些描述怎么着都和编程沾不上边啊。然而，最近他非常高调地表示，要学习一款编程语言。\n虽然我不同意他的有些观点，不过他的跨界，不给自己设限的态度是还是值得学习的。\n大佬都忙着学编程，这让我们35岁左右的专业程序员们非常惭愧啊（难道非得财务自由以后才能学python么）。\n\n![](http://jcjview.github.io/img/flypythonflypython001.jpg)\n\n潘石屹学python肯定不是为了转行找工作，肯定也不是为了爬取全网美女图片，他在微博里详细阐述了我们为什么要学习Python语言。\n\n\n![](https://raw.githubusercontent.com/jcjview/jcjview.github.io/master/img/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20191115152906.png)\n\n我们为什么要学习python——使用范围广\n01.数据分析\n\n对于数据科学和机器学习，Python是首选编程语言。python有众多数据分析工具，知名数据分析比赛网站kaggle，90%以上的竞赛代码都是用python写成。大数据平台如hadoop、spark、flink、beam，python有完整的支持api可调用。\n\n02.网站开发\n\n对于网站开发，Python的生态环境也可以支撑起重量级的产品。国外的Youtube，Instagram，Pinterest，Reddit，Dropbox，Disqus， Quora等知名应用一开始都是基于Python构建，国内的豆瓣，知乎，果壳，饿了么，等初期在也是Python应用的典型。\n\n03.爬虫\n\n对于爬虫，则想不到比python更方便、更通用的的语言了。Python极其丰富的生态，诸如Request、Beautiful Soup、Scrapy、PySpider等第三方库，加上简洁易上手的语法，分分钟就能让你写出一个爬虫来。\n\n此外，还有机器学习、人工智能、科学计算、IT运维等领域，Python都是极其方便顺手的工具，更重要的是，永远开源，免费。\n\n\n\nPython的就业前景\n在it行业飞速发展的今天，在数据成为it命脉的时代，python的重要意义越来越不言自明。学习python，不仅仅是一门可以调用数据结构和算法的语言，在学会python的同时，可以同时学会爬取互联网海量资源，学会自动化分析互联网海量数据，学会制作展示宣传的网站，学会使用人工智能预测和改变世界。学习一门语言，得到多种技能，以及大数据的思维方式，何乐而不为呢。\n\nPython有多火？大多数IT研发岗位，都需要Python程序员；甚至许多非研发岗位，纷纷在JD中给出精通Python技能者优先的字样。\n\nPython的学习曲线\n对于爱好者来说， python上手非常容易，学习曲线非常平滑。基本的例子，几行代码都能完成。python代码环境安装几乎是傻瓜式的，不像java要考虑众多库的配置和解决冲突。如果有编程的基础甚至只需要几小时就能上手，即使没有基础的小白，通过努力，7-10天，每天1小时，也可以快速掌握基本编程技巧。\n\nPython的学习资料\n\nPython官网 \n\nPython.org\n\n廖雪峰的Python教程    \n\nhttps://www.liaoxuefeng.com/\n\n简明的python教程   \n\nhttp://www.kuqin.com/abyteofpython_cn/\n\n\n         \n\n重点推荐书籍：\n\n\n\n《Python 基础教程》\n\n\n\n知乎评价:\n\n\n\n其他入门书籍：\n\nHead First Python\n\nDive Into Python\n\nPython 核心编程\n\n深入理解 Python\n\nPython 标准库\n\nPython 编程指南\n\n\n\n（我们搜集了一些网上的电子书版本，关注公众号，回复\"python\"获取）\n\n\n\n\n\n\n\n当然，英文著作虽然经典，但涉及领域众多，概念多，信息量大，不适合速成。网上的资料丰富，但也鱼龙混杂。\n\n以 “Python入门” 为关键字搜索出的结果成千上万。不少小白选手难免会东一榔头西一棒槌，最终看了很多文章，却仍没跨过新手那道门槛。\n\n\n\n我们这里有一个python的入门课程，帮你把需要掌握的python基础知识都融汇贯通在小篇幅中。我们提供了很多有趣的实践项目，并且可以进群，互助学习，遇到困难有人来解答。\n\n\n\n加群请加个人微信号flypython。\n\n人生苦短，我用python早下班。如果觉得不错，对你工作中有帮助，动动手指分享给更多人哦。\n\n\n","slug":"python-tutorial-02","published":1,"updated":"2020-01-02T04:31:24.964Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck4wdip8j000gwz1b7p1drxa2","content":"<blockquote>\n<p>11 月 15 日，SOHO 中国董事长潘石屹在微博上宣布，开始学习一门新的语言 Python，这也是今天给自己人生的礼物。</p>\n</blockquote>\n<p><img src=\"https://raw.githubusercontent.com/jcjview/jcjview.github.io/master/img/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20191115152124.jpg\" alt></p>\n<p>什么鬼？房地产大佬要学python？</p>\n<p><img src=\"https://raw.githubusercontent.com/jcjview/jcjview.github.io/master/img/pys.jpg\" alt></p>\n<p>潘石屹，一位成功的房地产开发商老板，第一专业是石油方面的，63年出生，年龄都超过了55岁，这些描述怎么着都和编程沾不上边啊。然而，最近他非常高调地表示，要学习一款编程语言。<br>虽然我不同意他的有些观点，不过他的跨界，不给自己设限的态度是还是值得学习的。<br>大佬都忙着学编程，这让我们35岁左右的专业程序员们非常惭愧啊（难道非得财务自由以后才能学python么）。</p>\n<p><img src=\"http://jcjview.github.io/img/flypythonflypython001.jpg\" alt></p>\n<p>潘石屹学python肯定不是为了转行找工作，肯定也不是为了爬取全网美女图片，他在微博里详细阐述了我们为什么要学习Python语言。</p>\n<p><img src=\"https://raw.githubusercontent.com/jcjview/jcjview.github.io/master/img/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20191115152906.png\" alt></p>\n<p>我们为什么要学习python——使用范围广<br>01.数据分析</p>\n<p>对于数据科学和机器学习，Python是首选编程语言。python有众多数据分析工具，知名数据分析比赛网站kaggle，90%以上的竞赛代码都是用python写成。大数据平台如hadoop、spark、flink、beam，python有完整的支持api可调用。</p>\n<p>02.网站开发</p>\n<p>对于网站开发，Python的生态环境也可以支撑起重量级的产品。国外的Youtube，Instagram，Pinterest，Reddit，Dropbox，Disqus， Quora等知名应用一开始都是基于Python构建，国内的豆瓣，知乎，果壳，饿了么，等初期在也是Python应用的典型。</p>\n<p>03.爬虫</p>\n<p>对于爬虫，则想不到比python更方便、更通用的的语言了。Python极其丰富的生态，诸如Request、Beautiful Soup、Scrapy、PySpider等第三方库，加上简洁易上手的语法，分分钟就能让你写出一个爬虫来。</p>\n<p>此外，还有机器学习、人工智能、科学计算、IT运维等领域，Python都是极其方便顺手的工具，更重要的是，永远开源，免费。</p>\n<p>Python的就业前景<br>在it行业飞速发展的今天，在数据成为it命脉的时代，python的重要意义越来越不言自明。学习python，不仅仅是一门可以调用数据结构和算法的语言，在学会python的同时，可以同时学会爬取互联网海量资源，学会自动化分析互联网海量数据，学会制作展示宣传的网站，学会使用人工智能预测和改变世界。学习一门语言，得到多种技能，以及大数据的思维方式，何乐而不为呢。</p>\n<p>Python有多火？大多数IT研发岗位，都需要Python程序员；甚至许多非研发岗位，纷纷在JD中给出精通Python技能者优先的字样。</p>\n<p>Python的学习曲线<br>对于爱好者来说， python上手非常容易，学习曲线非常平滑。基本的例子，几行代码都能完成。python代码环境安装几乎是傻瓜式的，不像java要考虑众多库的配置和解决冲突。如果有编程的基础甚至只需要几小时就能上手，即使没有基础的小白，通过努力，7-10天，每天1小时，也可以快速掌握基本编程技巧。</p>\n<p>Python的学习资料</p>\n<p>Python官网 </p>\n<p>Python.org</p>\n<p>廖雪峰的Python教程    </p>\n<p><a href=\"https://www.liaoxuefeng.com/\" target=\"_blank\" rel=\"noopener\">https://www.liaoxuefeng.com/</a></p>\n<p>简明的python教程   </p>\n<p><a href=\"http://www.kuqin.com/abyteofpython_cn/\" target=\"_blank\" rel=\"noopener\">http://www.kuqin.com/abyteofpython_cn/</a></p>\n<p>重点推荐书籍：</p>\n<p>《Python 基础教程》</p>\n<p>知乎评价:</p>\n<p>其他入门书籍：</p>\n<p>Head First Python</p>\n<p>Dive Into Python</p>\n<p>Python 核心编程</p>\n<p>深入理解 Python</p>\n<p>Python 标准库</p>\n<p>Python 编程指南</p>\n<p>（我们搜集了一些网上的电子书版本，关注公众号，回复”python”获取）</p>\n<p>当然，英文著作虽然经典，但涉及领域众多，概念多，信息量大，不适合速成。网上的资料丰富，但也鱼龙混杂。</p>\n<p>以 “Python入门” 为关键字搜索出的结果成千上万。不少小白选手难免会东一榔头西一棒槌，最终看了很多文章，却仍没跨过新手那道门槛。</p>\n<p>我们这里有一个python的入门课程，帮你把需要掌握的python基础知识都融汇贯通在小篇幅中。我们提供了很多有趣的实践项目，并且可以进群，互助学习，遇到困难有人来解答。</p>\n<p>加群请加个人微信号flypython。</p>\n<p>人生苦短，我用python早下班。如果觉得不错，对你工作中有帮助，动动手指分享给更多人哦。</p>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>11 月 15 日，SOHO 中国董事长潘石屹在微博上宣布，开始学习一门新的语言 Python，这也是今天给自己人生的礼物。</p>\n</blockquote>\n<p><img src=\"https://raw.githubusercontent.com/jcjview/jcjview.github.io/master/img/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20191115152124.jpg\" alt></p>\n<p>什么鬼？房地产大佬要学python？</p>\n<p><img src=\"https://raw.githubusercontent.com/jcjview/jcjview.github.io/master/img/pys.jpg\" alt></p>\n<p>潘石屹，一位成功的房地产开发商老板，第一专业是石油方面的，63年出生，年龄都超过了55岁，这些描述怎么着都和编程沾不上边啊。然而，最近他非常高调地表示，要学习一款编程语言。<br>虽然我不同意他的有些观点，不过他的跨界，不给自己设限的态度是还是值得学习的。<br>大佬都忙着学编程，这让我们35岁左右的专业程序员们非常惭愧啊（难道非得财务自由以后才能学python么）。</p>\n<p><img src=\"http://jcjview.github.io/img/flypythonflypython001.jpg\" alt></p>\n<p>潘石屹学python肯定不是为了转行找工作，肯定也不是为了爬取全网美女图片，他在微博里详细阐述了我们为什么要学习Python语言。</p>\n<p><img src=\"https://raw.githubusercontent.com/jcjview/jcjview.github.io/master/img/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20191115152906.png\" alt></p>\n<p>我们为什么要学习python——使用范围广<br>01.数据分析</p>\n<p>对于数据科学和机器学习，Python是首选编程语言。python有众多数据分析工具，知名数据分析比赛网站kaggle，90%以上的竞赛代码都是用python写成。大数据平台如hadoop、spark、flink、beam，python有完整的支持api可调用。</p>\n<p>02.网站开发</p>\n<p>对于网站开发，Python的生态环境也可以支撑起重量级的产品。国外的Youtube，Instagram，Pinterest，Reddit，Dropbox，Disqus， Quora等知名应用一开始都是基于Python构建，国内的豆瓣，知乎，果壳，饿了么，等初期在也是Python应用的典型。</p>\n<p>03.爬虫</p>\n<p>对于爬虫，则想不到比python更方便、更通用的的语言了。Python极其丰富的生态，诸如Request、Beautiful Soup、Scrapy、PySpider等第三方库，加上简洁易上手的语法，分分钟就能让你写出一个爬虫来。</p>\n<p>此外，还有机器学习、人工智能、科学计算、IT运维等领域，Python都是极其方便顺手的工具，更重要的是，永远开源，免费。</p>\n<p>Python的就业前景<br>在it行业飞速发展的今天，在数据成为it命脉的时代，python的重要意义越来越不言自明。学习python，不仅仅是一门可以调用数据结构和算法的语言，在学会python的同时，可以同时学会爬取互联网海量资源，学会自动化分析互联网海量数据，学会制作展示宣传的网站，学会使用人工智能预测和改变世界。学习一门语言，得到多种技能，以及大数据的思维方式，何乐而不为呢。</p>\n<p>Python有多火？大多数IT研发岗位，都需要Python程序员；甚至许多非研发岗位，纷纷在JD中给出精通Python技能者优先的字样。</p>\n<p>Python的学习曲线<br>对于爱好者来说， python上手非常容易，学习曲线非常平滑。基本的例子，几行代码都能完成。python代码环境安装几乎是傻瓜式的，不像java要考虑众多库的配置和解决冲突。如果有编程的基础甚至只需要几小时就能上手，即使没有基础的小白，通过努力，7-10天，每天1小时，也可以快速掌握基本编程技巧。</p>\n<p>Python的学习资料</p>\n<p>Python官网 </p>\n<p>Python.org</p>\n<p>廖雪峰的Python教程    </p>\n<p><a href=\"https://www.liaoxuefeng.com/\" target=\"_blank\" rel=\"noopener\">https://www.liaoxuefeng.com/</a></p>\n<p>简明的python教程   </p>\n<p><a href=\"http://www.kuqin.com/abyteofpython_cn/\" target=\"_blank\" rel=\"noopener\">http://www.kuqin.com/abyteofpython_cn/</a></p>\n<p>重点推荐书籍：</p>\n<p>《Python 基础教程》</p>\n<p>知乎评价:</p>\n<p>其他入门书籍：</p>\n<p>Head First Python</p>\n<p>Dive Into Python</p>\n<p>Python 核心编程</p>\n<p>深入理解 Python</p>\n<p>Python 标准库</p>\n<p>Python 编程指南</p>\n<p>（我们搜集了一些网上的电子书版本，关注公众号，回复”python”获取）</p>\n<p>当然，英文著作虽然经典，但涉及领域众多，概念多，信息量大，不适合速成。网上的资料丰富，但也鱼龙混杂。</p>\n<p>以 “Python入门” 为关键字搜索出的结果成千上万。不少小白选手难免会东一榔头西一棒槌，最终看了很多文章，却仍没跨过新手那道门槛。</p>\n<p>我们这里有一个python的入门课程，帮你把需要掌握的python基础知识都融汇贯通在小篇幅中。我们提供了很多有趣的实践项目，并且可以进群，互助学习，遇到困难有人来解答。</p>\n<p>加群请加个人微信号flypython。</p>\n<p>人生苦短，我用python早下班。如果觉得不错，对你工作中有帮助，动动手指分享给更多人哦。</p>\n"},{"date":"2019-02-02T16:00:00.000Z","title":"Python正则15分钟入门","subtitle":"Python入门教程","cover":"/images/tutorial3.png","_content":"\nflypython群里有同学问我，如何从大量格式不确定的word文档抽取姓名、电话号码、邮箱等信息存入excel表格。通过之前我们的文章，他已经学会读取和写入文档和表格，但就是无法处理格式不确定的文档。**这里介绍的正则方法，可以帮助他解决这个问题。**\n\n\n\n## 目标\n\n15分钟内让你真正明白正则表达式是什么，并且让你可以在自己的python程序里正确使用它。\n\n\n你将学会：\n\n1. 极简python使用正则的方法\n2. 如果利用python高效的匹配字符串\n3. 如何利用python正则进行文本判断、过滤、信息提取\n\n\n## 0.极简正则入门\n\n假设程序从word或者excel读取了一串字符串，字符串中有一部分是电话号码，现在需要完整提取这个电话号码。\n\n\n\n```PYTHON\nimport re\nreg=re.compile(\"[0-9]+\")\na=reg.findall(\"我的电话是3555487\")\nprint(a)\n\n```\n输出：\n\n![](https://raw.githubusercontent.com/jcjview/jcjview.github.io/master/img/20191016101032.png)\n\n\n\n\n\n解释：\n`\"[0-9]+\"`是正则表达式，意思是匹配0-9的数字，`\"+\"`\n表示可以匹配1次-多次，`reg.findall`表示从后面的字符串里找到所有的匹配值。\n\n## 1.字符集\n\n\n字符集，又叫元字符，就是用一些特殊符号表示特定种类的字符或位置。\n\n#### 匹配字符\n| 代码  |说明 |\n| :---: | --- |\n| `.` | 匹配除换行符以外的任意一个字符 |\n|`\\d` |匹配数字|\n| `\\w` | 匹配字母或数字或下划线或汉字 |\n| `\\s` | 匹配任意的空白符 |\n| `^` | 匹配字符串的开始 |\n| `$` | 匹配字符串的结束 |\n\n\n举例\n\n```PYTHON\nimport re\nreg=re.compile(\"我.\")\na=reg.findall(\"我的电话是3555487\")\nprint(a)\n\n```\n输出：\n![](http://jcjview.github.io/img/re201910161010321.png)\n\n\n#### 重复匹配\n| 代码  |说明 |\n| :---: | --- |\n| `*` |重复0次-无数次 |\n| `+` |重复1次-无数次 |\n| `?` |重复0次-1次 |\n| `{m}` |重复m次 |\n| `{m,n}` |重复m-n次 |\n\n举例\n\n```PYTHON\nimport re\nreg=re.compile(\"5+\")\na=reg.findall(\"我的电话是3555487\")\nprint(a)\n\n```\n输出：\n![](\nhttps://raw.githubusercontent.com/jcjview/jcjview.github.io/master/img/re_20191016101824.png)\n\n\n\n\n#### 贪婪与懒惰\n贪婪：匹配尽可能长的字符串\n懒惰：匹配尽可能短的字符串\n懒惰模式的启用只需在重复元字符之后加?既可。\n* `*?` 重复任意次，但尽可能少重复\n* `+?` 重复1次或更多次，但尽可能少重复\n*  `??` 重复0次或1次，但尽可能少重复\n* `{n,m}?` 重复n到m次，但尽可能少重复\n* `{n,}?` 重复n次以上，但尽可能少重复\n\n举例\n\n```PYTHON\nimport re\nreg=re.compile(\"5+?\")\na=reg.findall(\"我的电话是3555487\")\nprint(a)\n\n```\n输出\n![](https://raw.githubusercontent.com/jcjview/jcjview.github.io/master/img//re_20191016101824111.png)\n\n注意：\n如果想匹配元字符本身或者正则中的一些特殊字符，使用`\\\\`转义。\n\n这里介绍的正则内容是最基础的，想要了解更详细的正则表达式语法，请参考：\n\n\n\n\n## 2.利用正则判断\n\n#### 判断\n有时候我们想利用正则表达式对用户输入进行判断，比如判断用户输入的身份证号是否符合规则，那么可以这样写：\n\n\n```PYTHON\nimport re\nr=r'^([1-9]\\d{5}[12]\\d{3}(0[1-9]|1[012])(0[1-9]|[12][0-9]|3[01])\\d{3}[0-9xX])$'\n\ns1 = '110102200101014779'\n\n#判断s1字符串是符合正则r\nan = re.search(r, s1)\nif an:\n    print ('yes')\nelse:\n    print ('no')\n```\n输入结果\n![](https://raw.githubusercontent.com/jcjview/jcjview.github.io/master/img/re_20191016104208.png)\n\n说明：`^`字符表示必须匹配字符串开头；`$`表示必须匹配字符串结尾。\n\n#### 过滤\n假设，输出一串文本，只想保留汉字，去除特殊符号。代码如下：\n```PYTHON\nimport re\nspecial_character_removal = re.compile(r'[，。、【 】“”：；（）《》‘’{}？！⑦%>℃.^-——=&#@￥『』]', re.IGNORECASE)\nline=\"贾蓉看了说：“高明的很。还要请教先生，这病与『性』命终久有妨无妨？”\"\nl = special_character_removal.sub('', line)\nprint(l)\n```\n输入结果：\n![](https://raw.githubusercontent.com/jcjview/jcjview.github.io/master/img/re_20191016104753.png)\n\n\n#### 查找位置\n查找某个文本在字符串中的位置，一般用于信息提取。\n\n\n```PYTHON\nimport re\np = re.compile(\"\\d+\")\ncontent=\"2019年9月9月9日\"\nresult2 = p.finditer(content)\n\nfor m in result2:\n    print(\"str\",m.group())  ##字符串\n    print(\"start: \",m.start(),\" end: \",m.end())  ##字符串位置\n```\n\n输出结果\n\n![](https://raw.githubusercontent.com/jcjview/jcjview.github.io/master/img/re_20191016110227.png)\n\n\n*人生苦短，我用python早下班。如果觉得不错，对你工作中有帮助，请长按下面二维码关注我们。（回复训练营加群，一起探讨python问题）*\n\n  ![flypython微信公众号](https://flypython.com/images/wechat.png)","source":"_posts/python-tutorial-03.md","raw":"---\ndate: 2019-02-03 00:00\ntitle:  Python正则15分钟入门\nsubtitle: Python入门教程\ncover: /images/tutorial3.png\ncategories: [Python入门]\n---\n\nflypython群里有同学问我，如何从大量格式不确定的word文档抽取姓名、电话号码、邮箱等信息存入excel表格。通过之前我们的文章，他已经学会读取和写入文档和表格，但就是无法处理格式不确定的文档。**这里介绍的正则方法，可以帮助他解决这个问题。**\n\n\n\n## 目标\n\n15分钟内让你真正明白正则表达式是什么，并且让你可以在自己的python程序里正确使用它。\n\n\n你将学会：\n\n1. 极简python使用正则的方法\n2. 如果利用python高效的匹配字符串\n3. 如何利用python正则进行文本判断、过滤、信息提取\n\n\n## 0.极简正则入门\n\n假设程序从word或者excel读取了一串字符串，字符串中有一部分是电话号码，现在需要完整提取这个电话号码。\n\n\n\n```PYTHON\nimport re\nreg=re.compile(\"[0-9]+\")\na=reg.findall(\"我的电话是3555487\")\nprint(a)\n\n```\n输出：\n\n![](https://raw.githubusercontent.com/jcjview/jcjview.github.io/master/img/20191016101032.png)\n\n\n\n\n\n解释：\n`\"[0-9]+\"`是正则表达式，意思是匹配0-9的数字，`\"+\"`\n表示可以匹配1次-多次，`reg.findall`表示从后面的字符串里找到所有的匹配值。\n\n## 1.字符集\n\n\n字符集，又叫元字符，就是用一些特殊符号表示特定种类的字符或位置。\n\n#### 匹配字符\n| 代码  |说明 |\n| :---: | --- |\n| `.` | 匹配除换行符以外的任意一个字符 |\n|`\\d` |匹配数字|\n| `\\w` | 匹配字母或数字或下划线或汉字 |\n| `\\s` | 匹配任意的空白符 |\n| `^` | 匹配字符串的开始 |\n| `$` | 匹配字符串的结束 |\n\n\n举例\n\n```PYTHON\nimport re\nreg=re.compile(\"我.\")\na=reg.findall(\"我的电话是3555487\")\nprint(a)\n\n```\n输出：\n![](http://jcjview.github.io/img/re201910161010321.png)\n\n\n#### 重复匹配\n| 代码  |说明 |\n| :---: | --- |\n| `*` |重复0次-无数次 |\n| `+` |重复1次-无数次 |\n| `?` |重复0次-1次 |\n| `{m}` |重复m次 |\n| `{m,n}` |重复m-n次 |\n\n举例\n\n```PYTHON\nimport re\nreg=re.compile(\"5+\")\na=reg.findall(\"我的电话是3555487\")\nprint(a)\n\n```\n输出：\n![](\nhttps://raw.githubusercontent.com/jcjview/jcjview.github.io/master/img/re_20191016101824.png)\n\n\n\n\n#### 贪婪与懒惰\n贪婪：匹配尽可能长的字符串\n懒惰：匹配尽可能短的字符串\n懒惰模式的启用只需在重复元字符之后加?既可。\n* `*?` 重复任意次，但尽可能少重复\n* `+?` 重复1次或更多次，但尽可能少重复\n*  `??` 重复0次或1次，但尽可能少重复\n* `{n,m}?` 重复n到m次，但尽可能少重复\n* `{n,}?` 重复n次以上，但尽可能少重复\n\n举例\n\n```PYTHON\nimport re\nreg=re.compile(\"5+?\")\na=reg.findall(\"我的电话是3555487\")\nprint(a)\n\n```\n输出\n![](https://raw.githubusercontent.com/jcjview/jcjview.github.io/master/img//re_20191016101824111.png)\n\n注意：\n如果想匹配元字符本身或者正则中的一些特殊字符，使用`\\\\`转义。\n\n这里介绍的正则内容是最基础的，想要了解更详细的正则表达式语法，请参考：\n\n\n\n\n## 2.利用正则判断\n\n#### 判断\n有时候我们想利用正则表达式对用户输入进行判断，比如判断用户输入的身份证号是否符合规则，那么可以这样写：\n\n\n```PYTHON\nimport re\nr=r'^([1-9]\\d{5}[12]\\d{3}(0[1-9]|1[012])(0[1-9]|[12][0-9]|3[01])\\d{3}[0-9xX])$'\n\ns1 = '110102200101014779'\n\n#判断s1字符串是符合正则r\nan = re.search(r, s1)\nif an:\n    print ('yes')\nelse:\n    print ('no')\n```\n输入结果\n![](https://raw.githubusercontent.com/jcjview/jcjview.github.io/master/img/re_20191016104208.png)\n\n说明：`^`字符表示必须匹配字符串开头；`$`表示必须匹配字符串结尾。\n\n#### 过滤\n假设，输出一串文本，只想保留汉字，去除特殊符号。代码如下：\n```PYTHON\nimport re\nspecial_character_removal = re.compile(r'[，。、【 】“”：；（）《》‘’{}？！⑦%>℃.^-——=&#@￥『』]', re.IGNORECASE)\nline=\"贾蓉看了说：“高明的很。还要请教先生，这病与『性』命终久有妨无妨？”\"\nl = special_character_removal.sub('', line)\nprint(l)\n```\n输入结果：\n![](https://raw.githubusercontent.com/jcjview/jcjview.github.io/master/img/re_20191016104753.png)\n\n\n#### 查找位置\n查找某个文本在字符串中的位置，一般用于信息提取。\n\n\n```PYTHON\nimport re\np = re.compile(\"\\d+\")\ncontent=\"2019年9月9月9日\"\nresult2 = p.finditer(content)\n\nfor m in result2:\n    print(\"str\",m.group())  ##字符串\n    print(\"start: \",m.start(),\" end: \",m.end())  ##字符串位置\n```\n\n输出结果\n\n![](https://raw.githubusercontent.com/jcjview/jcjview.github.io/master/img/re_20191016110227.png)\n\n\n*人生苦短，我用python早下班。如果觉得不错，对你工作中有帮助，请长按下面二维码关注我们。（回复训练营加群，一起探讨python问题）*\n\n  ![flypython微信公众号](https://flypython.com/images/wechat.png)","slug":"python-tutorial-03","published":1,"updated":"2020-01-02T04:31:34.650Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck4wdip8l000jwz1bryn0akmd","content":"<p>flypython群里有同学问我，如何从大量格式不确定的word文档抽取姓名、电话号码、邮箱等信息存入excel表格。通过之前我们的文章，他已经学会读取和写入文档和表格，但就是无法处理格式不确定的文档。<strong>这里介绍的正则方法，可以帮助他解决这个问题。</strong></p>\n<h2 id=\"目标\"><a href=\"#目标\" class=\"headerlink\" title=\"目标\"></a>目标</h2><p>15分钟内让你真正明白正则表达式是什么，并且让你可以在自己的python程序里正确使用它。</p>\n<p>你将学会：</p>\n<ol>\n<li>极简python使用正则的方法</li>\n<li>如果利用python高效的匹配字符串</li>\n<li>如何利用python正则进行文本判断、过滤、信息提取</li>\n</ol>\n<h2 id=\"0-极简正则入门\"><a href=\"#0-极简正则入门\" class=\"headerlink\" title=\"0.极简正则入门\"></a>0.极简正则入门</h2><p>假设程序从word或者excel读取了一串字符串，字符串中有一部分是电话号码，现在需要完整提取这个电话号码。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> re</span><br><span class=\"line\">reg=re.compile(<span class=\"string\">\"[0-9]+\"</span>)</span><br><span class=\"line\">a=reg.findall(<span class=\"string\">\"我的电话是3555487\"</span>)</span><br><span class=\"line\">print(a)</span><br></pre></td></tr></table></figure>\n\n<p>输出：</p>\n<p><img src=\"https://raw.githubusercontent.com/jcjview/jcjview.github.io/master/img/20191016101032.png\" alt></p>\n<p>解释：<br><code>&quot;[0-9]+&quot;</code>是正则表达式，意思是匹配0-9的数字，<code>&quot;+&quot;</code><br>表示可以匹配1次-多次，<code>reg.findall</code>表示从后面的字符串里找到所有的匹配值。</p>\n<h2 id=\"1-字符集\"><a href=\"#1-字符集\" class=\"headerlink\" title=\"1.字符集\"></a>1.字符集</h2><p>字符集，又叫元字符，就是用一些特殊符号表示特定种类的字符或位置。</p>\n<h4 id=\"匹配字符\"><a href=\"#匹配字符\" class=\"headerlink\" title=\"匹配字符\"></a>匹配字符</h4><table>\n<thead>\n<tr>\n<th align=\"center\">代码</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\"><code>.</code></td>\n<td>匹配除换行符以外的任意一个字符</td>\n</tr>\n<tr>\n<td align=\"center\"><code>\\d</code></td>\n<td>匹配数字</td>\n</tr>\n<tr>\n<td align=\"center\"><code>\\w</code></td>\n<td>匹配字母或数字或下划线或汉字</td>\n</tr>\n<tr>\n<td align=\"center\"><code>\\s</code></td>\n<td>匹配任意的空白符</td>\n</tr>\n<tr>\n<td align=\"center\"><code>^</code></td>\n<td>匹配字符串的开始</td>\n</tr>\n<tr>\n<td align=\"center\"><code>$</code></td>\n<td>匹配字符串的结束</td>\n</tr>\n</tbody></table>\n<p>举例</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> re</span><br><span class=\"line\">reg=re.compile(<span class=\"string\">\"我.\"</span>)</span><br><span class=\"line\">a=reg.findall(<span class=\"string\">\"我的电话是3555487\"</span>)</span><br><span class=\"line\">print(a)</span><br></pre></td></tr></table></figure>\n\n<p>输出：<br><img src=\"http://jcjview.github.io/img/re201910161010321.png\" alt></p>\n<h4 id=\"重复匹配\"><a href=\"#重复匹配\" class=\"headerlink\" title=\"重复匹配\"></a>重复匹配</h4><table>\n<thead>\n<tr>\n<th align=\"center\">代码</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\"><code>*</code></td>\n<td>重复0次-无数次</td>\n</tr>\n<tr>\n<td align=\"center\"><code>+</code></td>\n<td>重复1次-无数次</td>\n</tr>\n<tr>\n<td align=\"center\"><code>?</code></td>\n<td>重复0次-1次</td>\n</tr>\n<tr>\n<td align=\"center\"><code>{m}</code></td>\n<td>重复m次</td>\n</tr>\n<tr>\n<td align=\"center\"><code>{m,n}</code></td>\n<td>重复m-n次</td>\n</tr>\n</tbody></table>\n<p>举例</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> re</span><br><span class=\"line\">reg=re.compile(<span class=\"string\">\"5+\"</span>)</span><br><span class=\"line\">a=reg.findall(<span class=\"string\">\"我的电话是3555487\"</span>)</span><br><span class=\"line\">print(a)</span><br></pre></td></tr></table></figure>\n\n<p>输出：<br><img src=\"https://raw.githubusercontent.com/jcjview/jcjview.github.io/master/img/re_20191016101824.png\" alt></p>\n<h4 id=\"贪婪与懒惰\"><a href=\"#贪婪与懒惰\" class=\"headerlink\" title=\"贪婪与懒惰\"></a>贪婪与懒惰</h4><p>贪婪：匹配尽可能长的字符串<br>懒惰：匹配尽可能短的字符串<br>懒惰模式的启用只需在重复元字符之后加?既可。</p>\n<ul>\n<li><code>*?</code> 重复任意次，但尽可能少重复</li>\n<li><code>+?</code> 重复1次或更多次，但尽可能少重复</li>\n<li><code>??</code> 重复0次或1次，但尽可能少重复</li>\n<li><code>{n,m}?</code> 重复n到m次，但尽可能少重复</li>\n<li><code>{n,}?</code> 重复n次以上，但尽可能少重复</li>\n</ul>\n<p>举例</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> re</span><br><span class=\"line\">reg=re.compile(<span class=\"string\">\"5+?\"</span>)</span><br><span class=\"line\">a=reg.findall(<span class=\"string\">\"我的电话是3555487\"</span>)</span><br><span class=\"line\">print(a)</span><br></pre></td></tr></table></figure>\n\n<p>输出<br><img src=\"https://raw.githubusercontent.com/jcjview/jcjview.github.io/master/img//re_20191016101824111.png\" alt></p>\n<p>注意：<br>如果想匹配元字符本身或者正则中的一些特殊字符，使用<code>\\\\</code>转义。</p>\n<p>这里介绍的正则内容是最基础的，想要了解更详细的正则表达式语法，请参考：</p>\n<h2 id=\"2-利用正则判断\"><a href=\"#2-利用正则判断\" class=\"headerlink\" title=\"2.利用正则判断\"></a>2.利用正则判断</h2><h4 id=\"判断\"><a href=\"#判断\" class=\"headerlink\" title=\"判断\"></a>判断</h4><p>有时候我们想利用正则表达式对用户输入进行判断，比如判断用户输入的身份证号是否符合规则，那么可以这样写：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> re</span><br><span class=\"line\">r=<span class=\"string\">r'^([1-9]\\d&#123;5&#125;[12]\\d&#123;3&#125;(0[1-9]|1[012])(0[1-9]|[12][0-9]|3[01])\\d&#123;3&#125;[0-9xX])$'</span></span><br><span class=\"line\"></span><br><span class=\"line\">s1 = <span class=\"string\">'110102200101014779'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#判断s1字符串是符合正则r</span></span><br><span class=\"line\">an = re.search(r, s1)</span><br><span class=\"line\"><span class=\"keyword\">if</span> an:</span><br><span class=\"line\">    <span class=\"keyword\">print</span> (<span class=\"string\">'yes'</span>)</span><br><span class=\"line\"><span class=\"keyword\">else</span>:</span><br><span class=\"line\">    <span class=\"keyword\">print</span> (<span class=\"string\">'no'</span>)</span><br></pre></td></tr></table></figure>\n\n<p>输入结果<br><img src=\"https://raw.githubusercontent.com/jcjview/jcjview.github.io/master/img/re_20191016104208.png\" alt></p>\n<p>说明：<code>^</code>字符表示必须匹配字符串开头；<code>$</code>表示必须匹配字符串结尾。</p>\n<h4 id=\"过滤\"><a href=\"#过滤\" class=\"headerlink\" title=\"过滤\"></a>过滤</h4><p>假设，输出一串文本，只想保留汉字，去除特殊符号。代码如下：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> re</span><br><span class=\"line\">special_character_removal = re.compile(<span class=\"string\">r'[，。、【 】“”：；（）《》‘’&#123;&#125;？！⑦%&gt;℃.^-——=&amp;#@￥『』]'</span>, re.IGNORECASE)</span><br><span class=\"line\">line=<span class=\"string\">\"贾蓉看了说：“高明的很。还要请教先生，这病与『性』命终久有妨无妨？”\"</span></span><br><span class=\"line\">l = special_character_removal.sub(<span class=\"string\">''</span>, line)</span><br><span class=\"line\">print(l)</span><br></pre></td></tr></table></figure>\n\n<p>输入结果：<br><img src=\"https://raw.githubusercontent.com/jcjview/jcjview.github.io/master/img/re_20191016104753.png\" alt></p>\n<h4 id=\"查找位置\"><a href=\"#查找位置\" class=\"headerlink\" title=\"查找位置\"></a>查找位置</h4><p>查找某个文本在字符串中的位置，一般用于信息提取。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> re</span><br><span class=\"line\">p = re.compile(<span class=\"string\">\"\\d+\"</span>)</span><br><span class=\"line\">content=<span class=\"string\">\"2019年9月9月9日\"</span></span><br><span class=\"line\">result2 = p.finditer(content)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> m <span class=\"keyword\">in</span> result2:</span><br><span class=\"line\">    print(<span class=\"string\">\"str\"</span>,m.group())  <span class=\"comment\">##字符串</span></span><br><span class=\"line\">    print(<span class=\"string\">\"start: \"</span>,m.start(),<span class=\"string\">\" end: \"</span>,m.end())  <span class=\"comment\">##字符串位置</span></span><br></pre></td></tr></table></figure>\n\n<p>输出结果</p>\n<p><img src=\"https://raw.githubusercontent.com/jcjview/jcjview.github.io/master/img/re_20191016110227.png\" alt></p>\n<p><em>人生苦短，我用python早下班。如果觉得不错，对你工作中有帮助，请长按下面二维码关注我们。（回复训练营加群，一起探讨python问题）</em></p>\n<p>  <img src=\"https://flypython.com/images/wechat.png\" alt=\"flypython微信公众号\"></p>\n","site":{"data":{}},"excerpt":"","more":"<p>flypython群里有同学问我，如何从大量格式不确定的word文档抽取姓名、电话号码、邮箱等信息存入excel表格。通过之前我们的文章，他已经学会读取和写入文档和表格，但就是无法处理格式不确定的文档。<strong>这里介绍的正则方法，可以帮助他解决这个问题。</strong></p>\n<h2 id=\"目标\"><a href=\"#目标\" class=\"headerlink\" title=\"目标\"></a>目标</h2><p>15分钟内让你真正明白正则表达式是什么，并且让你可以在自己的python程序里正确使用它。</p>\n<p>你将学会：</p>\n<ol>\n<li>极简python使用正则的方法</li>\n<li>如果利用python高效的匹配字符串</li>\n<li>如何利用python正则进行文本判断、过滤、信息提取</li>\n</ol>\n<h2 id=\"0-极简正则入门\"><a href=\"#0-极简正则入门\" class=\"headerlink\" title=\"0.极简正则入门\"></a>0.极简正则入门</h2><p>假设程序从word或者excel读取了一串字符串，字符串中有一部分是电话号码，现在需要完整提取这个电话号码。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> re</span><br><span class=\"line\">reg=re.compile(<span class=\"string\">\"[0-9]+\"</span>)</span><br><span class=\"line\">a=reg.findall(<span class=\"string\">\"我的电话是3555487\"</span>)</span><br><span class=\"line\">print(a)</span><br></pre></td></tr></table></figure>\n\n<p>输出：</p>\n<p><img src=\"https://raw.githubusercontent.com/jcjview/jcjview.github.io/master/img/20191016101032.png\" alt></p>\n<p>解释：<br><code>&quot;[0-9]+&quot;</code>是正则表达式，意思是匹配0-9的数字，<code>&quot;+&quot;</code><br>表示可以匹配1次-多次，<code>reg.findall</code>表示从后面的字符串里找到所有的匹配值。</p>\n<h2 id=\"1-字符集\"><a href=\"#1-字符集\" class=\"headerlink\" title=\"1.字符集\"></a>1.字符集</h2><p>字符集，又叫元字符，就是用一些特殊符号表示特定种类的字符或位置。</p>\n<h4 id=\"匹配字符\"><a href=\"#匹配字符\" class=\"headerlink\" title=\"匹配字符\"></a>匹配字符</h4><table>\n<thead>\n<tr>\n<th align=\"center\">代码</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\"><code>.</code></td>\n<td>匹配除换行符以外的任意一个字符</td>\n</tr>\n<tr>\n<td align=\"center\"><code>\\d</code></td>\n<td>匹配数字</td>\n</tr>\n<tr>\n<td align=\"center\"><code>\\w</code></td>\n<td>匹配字母或数字或下划线或汉字</td>\n</tr>\n<tr>\n<td align=\"center\"><code>\\s</code></td>\n<td>匹配任意的空白符</td>\n</tr>\n<tr>\n<td align=\"center\"><code>^</code></td>\n<td>匹配字符串的开始</td>\n</tr>\n<tr>\n<td align=\"center\"><code>$</code></td>\n<td>匹配字符串的结束</td>\n</tr>\n</tbody></table>\n<p>举例</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> re</span><br><span class=\"line\">reg=re.compile(<span class=\"string\">\"我.\"</span>)</span><br><span class=\"line\">a=reg.findall(<span class=\"string\">\"我的电话是3555487\"</span>)</span><br><span class=\"line\">print(a)</span><br></pre></td></tr></table></figure>\n\n<p>输出：<br><img src=\"http://jcjview.github.io/img/re201910161010321.png\" alt></p>\n<h4 id=\"重复匹配\"><a href=\"#重复匹配\" class=\"headerlink\" title=\"重复匹配\"></a>重复匹配</h4><table>\n<thead>\n<tr>\n<th align=\"center\">代码</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\"><code>*</code></td>\n<td>重复0次-无数次</td>\n</tr>\n<tr>\n<td align=\"center\"><code>+</code></td>\n<td>重复1次-无数次</td>\n</tr>\n<tr>\n<td align=\"center\"><code>?</code></td>\n<td>重复0次-1次</td>\n</tr>\n<tr>\n<td align=\"center\"><code>{m}</code></td>\n<td>重复m次</td>\n</tr>\n<tr>\n<td align=\"center\"><code>{m,n}</code></td>\n<td>重复m-n次</td>\n</tr>\n</tbody></table>\n<p>举例</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> re</span><br><span class=\"line\">reg=re.compile(<span class=\"string\">\"5+\"</span>)</span><br><span class=\"line\">a=reg.findall(<span class=\"string\">\"我的电话是3555487\"</span>)</span><br><span class=\"line\">print(a)</span><br></pre></td></tr></table></figure>\n\n<p>输出：<br><img src=\"https://raw.githubusercontent.com/jcjview/jcjview.github.io/master/img/re_20191016101824.png\" alt></p>\n<h4 id=\"贪婪与懒惰\"><a href=\"#贪婪与懒惰\" class=\"headerlink\" title=\"贪婪与懒惰\"></a>贪婪与懒惰</h4><p>贪婪：匹配尽可能长的字符串<br>懒惰：匹配尽可能短的字符串<br>懒惰模式的启用只需在重复元字符之后加?既可。</p>\n<ul>\n<li><code>*?</code> 重复任意次，但尽可能少重复</li>\n<li><code>+?</code> 重复1次或更多次，但尽可能少重复</li>\n<li><code>??</code> 重复0次或1次，但尽可能少重复</li>\n<li><code>{n,m}?</code> 重复n到m次，但尽可能少重复</li>\n<li><code>{n,}?</code> 重复n次以上，但尽可能少重复</li>\n</ul>\n<p>举例</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> re</span><br><span class=\"line\">reg=re.compile(<span class=\"string\">\"5+?\"</span>)</span><br><span class=\"line\">a=reg.findall(<span class=\"string\">\"我的电话是3555487\"</span>)</span><br><span class=\"line\">print(a)</span><br></pre></td></tr></table></figure>\n\n<p>输出<br><img src=\"https://raw.githubusercontent.com/jcjview/jcjview.github.io/master/img//re_20191016101824111.png\" alt></p>\n<p>注意：<br>如果想匹配元字符本身或者正则中的一些特殊字符，使用<code>\\\\</code>转义。</p>\n<p>这里介绍的正则内容是最基础的，想要了解更详细的正则表达式语法，请参考：</p>\n<h2 id=\"2-利用正则判断\"><a href=\"#2-利用正则判断\" class=\"headerlink\" title=\"2.利用正则判断\"></a>2.利用正则判断</h2><h4 id=\"判断\"><a href=\"#判断\" class=\"headerlink\" title=\"判断\"></a>判断</h4><p>有时候我们想利用正则表达式对用户输入进行判断，比如判断用户输入的身份证号是否符合规则，那么可以这样写：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> re</span><br><span class=\"line\">r=<span class=\"string\">r'^([1-9]\\d&#123;5&#125;[12]\\d&#123;3&#125;(0[1-9]|1[012])(0[1-9]|[12][0-9]|3[01])\\d&#123;3&#125;[0-9xX])$'</span></span><br><span class=\"line\"></span><br><span class=\"line\">s1 = <span class=\"string\">'110102200101014779'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#判断s1字符串是符合正则r</span></span><br><span class=\"line\">an = re.search(r, s1)</span><br><span class=\"line\"><span class=\"keyword\">if</span> an:</span><br><span class=\"line\">    <span class=\"keyword\">print</span> (<span class=\"string\">'yes'</span>)</span><br><span class=\"line\"><span class=\"keyword\">else</span>:</span><br><span class=\"line\">    <span class=\"keyword\">print</span> (<span class=\"string\">'no'</span>)</span><br></pre></td></tr></table></figure>\n\n<p>输入结果<br><img src=\"https://raw.githubusercontent.com/jcjview/jcjview.github.io/master/img/re_20191016104208.png\" alt></p>\n<p>说明：<code>^</code>字符表示必须匹配字符串开头；<code>$</code>表示必须匹配字符串结尾。</p>\n<h4 id=\"过滤\"><a href=\"#过滤\" class=\"headerlink\" title=\"过滤\"></a>过滤</h4><p>假设，输出一串文本，只想保留汉字，去除特殊符号。代码如下：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> re</span><br><span class=\"line\">special_character_removal = re.compile(<span class=\"string\">r'[，。、【 】“”：；（）《》‘’&#123;&#125;？！⑦%&gt;℃.^-——=&amp;#@￥『』]'</span>, re.IGNORECASE)</span><br><span class=\"line\">line=<span class=\"string\">\"贾蓉看了说：“高明的很。还要请教先生，这病与『性』命终久有妨无妨？”\"</span></span><br><span class=\"line\">l = special_character_removal.sub(<span class=\"string\">''</span>, line)</span><br><span class=\"line\">print(l)</span><br></pre></td></tr></table></figure>\n\n<p>输入结果：<br><img src=\"https://raw.githubusercontent.com/jcjview/jcjview.github.io/master/img/re_20191016104753.png\" alt></p>\n<h4 id=\"查找位置\"><a href=\"#查找位置\" class=\"headerlink\" title=\"查找位置\"></a>查找位置</h4><p>查找某个文本在字符串中的位置，一般用于信息提取。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> re</span><br><span class=\"line\">p = re.compile(<span class=\"string\">\"\\d+\"</span>)</span><br><span class=\"line\">content=<span class=\"string\">\"2019年9月9月9日\"</span></span><br><span class=\"line\">result2 = p.finditer(content)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> m <span class=\"keyword\">in</span> result2:</span><br><span class=\"line\">    print(<span class=\"string\">\"str\"</span>,m.group())  <span class=\"comment\">##字符串</span></span><br><span class=\"line\">    print(<span class=\"string\">\"start: \"</span>,m.start(),<span class=\"string\">\" end: \"</span>,m.end())  <span class=\"comment\">##字符串位置</span></span><br></pre></td></tr></table></figure>\n\n<p>输出结果</p>\n<p><img src=\"https://raw.githubusercontent.com/jcjview/jcjview.github.io/master/img/re_20191016110227.png\" alt></p>\n<p><em>人生苦短，我用python早下班。如果觉得不错，对你工作中有帮助，请长按下面二维码关注我们。（回复训练营加群，一起探讨python问题）</em></p>\n<p>  <img src=\"https://flypython.com/images/wechat.png\" alt=\"flypython微信公众号\"></p>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"ck4wdip7u0000wz1bh68wu3dz","category_id":"ck4wdip830002wz1b2tpr7ety","_id":"ck4wdip8b0009wz1b1hsd8cp1"},{"post_id":"ck4wdip810001wz1bpzb1bkfv","category_id":"ck4wdip890006wz1b5r4r38am","_id":"ck4wdip8h000ewz1bfvexuo1m"},{"post_id":"ck4wdip850003wz1b9djz8e2s","category_id":"ck4wdip890006wz1b5r4r38am","_id":"ck4wdip8k000hwz1b4vwktxjd"},{"post_id":"ck4wdip8i000fwz1b5pmtqb6w","category_id":"ck4wdip830002wz1b2tpr7ety","_id":"ck4wdip8m000kwz1bh1losn8n"},{"post_id":"ck4wdip860004wz1bqndu1rjc","category_id":"ck4wdip8h000dwz1bsdbs84e4","_id":"ck4wdip8m000mwz1bhxz7n529"},{"post_id":"ck4wdip8j000gwz1b7p1drxa2","category_id":"ck4wdip830002wz1b2tpr7ety","_id":"ck4wdip8n000nwz1bd2gtjl7u"},{"post_id":"ck4wdip8l000jwz1bryn0akmd","category_id":"ck4wdip830002wz1b2tpr7ety","_id":"ck4wdip8n000pwz1bvna8jwv4"},{"post_id":"ck4wdip880005wz1b91ml0hnn","category_id":"ck4wdip8k000iwz1bttiuiyhn","_id":"ck4wdip8o000qwz1bi24rpjqk"},{"post_id":"ck4wdip890007wz1bjrd5ptcg","category_id":"ck4wdip8k000iwz1bttiuiyhn","_id":"ck4wdip8o000swz1bfce72dqu"},{"post_id":"ck4wdip8b0008wz1bs667hndt","category_id":"ck4wdip8k000iwz1bttiuiyhn","_id":"ck4wdip8p000uwz1byim1oi8v"},{"post_id":"ck4wdip8e000bwz1blorz21pj","category_id":"ck4wdip8k000iwz1bttiuiyhn","_id":"ck4wdip8p000vwz1bq5ubj17l"},{"post_id":"ck4wdip8f000cwz1b9oqh9k17","category_id":"ck4wdip8k000iwz1bttiuiyhn","_id":"ck4wdip8q000wwz1b1tgzrumh"}],"PostTag":[],"Tag":[]}}